
calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003472  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000066  00800060  00003472  000034e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002dcc  00000000  00000000  0000354c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000108a  00000000  00000000  00006318  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  000073a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  000074e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00007652  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  0000929b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  0000a186  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000af34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000b094  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000b321  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000baef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e7       	ldi	r30, 0x72	; 114
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3c       	cpi	r26, 0xC6	; 198
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 ac 19 	call	0x3358	; 0x3358 <main>
      7a:	0c 94 37 1a 	jmp	0x346e	; 0x346e <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 00 1a 	jmp	0x3400	; 0x3400 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a5 ea       	ldi	r26, 0xA5	; 165
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 1c 1a 	jmp	0x3438	; 0x3438 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 0c 1a 	jmp	0x3418	; 0x3418 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 28 1a 	jmp	0x3450	; 0x3450 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 0c 1a 	jmp	0x3418	; 0x3418 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 28 1a 	jmp	0x3450	; 0x3450 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 00 1a 	jmp	0x3400	; 0x3400 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	85 ea       	ldi	r24, 0xA5	; 165
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 1c 1a 	jmp	0x3438	; 0x3438 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 0c 1a 	jmp	0x3418	; 0x3418 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 28 1a 	jmp	0x3450	; 0x3450 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 0c 1a 	jmp	0x3418	; 0x3418 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 28 1a 	jmp	0x3450	; 0x3450 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 0c 1a 	jmp	0x3418	; 0x3418 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 28 1a 	jmp	0x3450	; 0x3450 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 10 1a 	jmp	0x3420	; 0x3420 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 2c 1a 	jmp	0x3458	; 0x3458 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <app>:
#include"../MCAL/DIO_int.h"
#include"../HAL/KEYPAD_int.h"
#include"../HAL/LCD_int.h"

void arrToNum(u8*ptr1,u8*ptr2,u8 n1,u8 n2,u8 operation);
void app(){
     b36:	0f 93       	push	r16
     b38:	1f 93       	push	r17
     b3a:	df 93       	push	r29
     b3c:	cf 93       	push	r28
     b3e:	cd b7       	in	r28, 0x3d	; 61
     b40:	de b7       	in	r29, 0x3e	; 62
     b42:	c7 5c       	subi	r28, 0xC7	; 199
     b44:	d0 40       	sbci	r29, 0x00	; 0
     b46:	0f b6       	in	r0, 0x3f	; 63
     b48:	f8 94       	cli
     b4a:	de bf       	out	0x3e, r29	; 62
     b4c:	0f be       	out	0x3f, r0	; 63
     b4e:	cd bf       	out	0x3d, r28	; 61
DIO_enuInit();
     b50:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <DIO_enuInit>
LCD_enuInit();
     b54:	0e 94 21 13 	call	0x2642	; 0x2642 <LCD_enuInit>
 KEYPAD_Init();
     b58:	0e 94 62 12 	call	0x24c4	; 0x24c4 <KEYPAD_Init>
/*enter pass*/
u8 kp_pass= KP_NO_PRESSED_KEY; u8 pass_nums=0;
     b5c:	fe 01       	movw	r30, r28
     b5e:	e9 57       	subi	r30, 0x79	; 121
     b60:	ff 4f       	sbci	r31, 0xFF	; 255
     b62:	83 e4       	ldi	r24, 0x43	; 67
     b64:	80 83       	st	Z, r24
     b66:	fe 01       	movw	r30, r28
     b68:	ea 57       	subi	r30, 0x7A	; 122
     b6a:	ff 4f       	sbci	r31, 0xFF	; 255
     b6c:	10 82       	st	Z, r1
u8 pass_nums_arr[16];
u8 pass_ch_nums_arr[16];
LCD_enuDisplayStringPOS("enter password",1,2);
     b6e:	80 e6       	ldi	r24, 0x60	; 96
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	61 e0       	ldi	r22, 0x01	; 1
     b74:	42 e0       	ldi	r20, 0x02	; 2
     b76:	0e 94 6f 19 	call	0x32de	; 0x32de <LCD_enuDisplayStringPOS>

//STAY HERE UNTIL THE KET GET PRESSED
 while(1){
do{
	 kp_pass=KEYPAD_enuGetpressedKey();
     b7a:	0e 94 a5 12 	call	0x254a	; 0x254a <KEYPAD_enuGetpressedKey>
     b7e:	fe 01       	movw	r30, r28
     b80:	e9 57       	subi	r30, 0x79	; 121
     b82:	ff 4f       	sbci	r31, 0xFF	; 255
     b84:	80 83       	st	Z, r24
}while(kp_pass== KP_NO_PRESSED_KEY);
     b86:	fe 01       	movw	r30, r28
     b88:	e9 57       	subi	r30, 0x79	; 121
     b8a:	ff 4f       	sbci	r31, 0xFF	; 255
     b8c:	80 81       	ld	r24, Z
     b8e:	83 34       	cpi	r24, 0x43	; 67
     b90:	a1 f3       	breq	.-24     	; 0xb7a <app+0x44>
if(kp_pass=='$') break;
     b92:	fe 01       	movw	r30, r28
     b94:	e9 57       	subi	r30, 0x79	; 121
     b96:	ff 4f       	sbci	r31, 0xFF	; 255
     b98:	80 81       	ld	r24, Z
     b9a:	84 32       	cpi	r24, 0x24	; 36
     b9c:	09 f4       	brne	.+2      	; 0xba0 <app+0x6a>
     b9e:	9b c1       	rjmp	.+822    	; 0xed6 <app+0x3a0>
pass_nums_arr[pass_nums++]=kp_pass;
     ba0:	fe 01       	movw	r30, r28
     ba2:	ea 57       	subi	r30, 0x7A	; 122
     ba4:	ff 4f       	sbci	r31, 0xFF	; 255
     ba6:	80 81       	ld	r24, Z
     ba8:	28 2f       	mov	r18, r24
     baa:	30 e0       	ldi	r19, 0x00	; 0
     bac:	ce 01       	movw	r24, r28
     bae:	88 57       	subi	r24, 0x78	; 120
     bb0:	9f 4f       	sbci	r25, 0xFF	; 255
     bb2:	dc 01       	movw	r26, r24
     bb4:	a2 0f       	add	r26, r18
     bb6:	b3 1f       	adc	r27, r19
     bb8:	fe 01       	movw	r30, r28
     bba:	e9 57       	subi	r30, 0x79	; 121
     bbc:	ff 4f       	sbci	r31, 0xFF	; 255
     bbe:	80 81       	ld	r24, Z
     bc0:	8c 93       	st	X, r24
     bc2:	de 01       	movw	r26, r28
     bc4:	aa 57       	subi	r26, 0x7A	; 122
     bc6:	bf 4f       	sbci	r27, 0xFF	; 255
     bc8:	fe 01       	movw	r30, r28
     bca:	ea 57       	subi	r30, 0x7A	; 122
     bcc:	ff 4f       	sbci	r31, 0xFF	; 255
     bce:	80 81       	ld	r24, Z
     bd0:	8f 5f       	subi	r24, 0xFF	; 255
     bd2:	8c 93       	st	X, r24
LCD_enuDisplayNumPOS(kp_pass,2,pass_nums);
     bd4:	fe 01       	movw	r30, r28
     bd6:	e9 57       	subi	r30, 0x79	; 121
     bd8:	ff 4f       	sbci	r31, 0xFF	; 255
     bda:	80 81       	ld	r24, Z
     bdc:	88 2f       	mov	r24, r24
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	a0 e0       	ldi	r26, 0x00	; 0
     be2:	b0 e0       	ldi	r27, 0x00	; 0
     be4:	fe 01       	movw	r30, r28
     be6:	ea 57       	subi	r30, 0x7A	; 122
     be8:	ff 4f       	sbci	r31, 0xFF	; 255
     bea:	bc 01       	movw	r22, r24
     bec:	cd 01       	movw	r24, r26
     bee:	42 e0       	ldi	r20, 0x02	; 2
     bf0:	20 81       	ld	r18, Z
     bf2:	0e 94 89 19 	call	0x3312	; 0x3312 <LCD_enuDisplayNumPOS>
     bf6:	fe 01       	movw	r30, r28
     bf8:	e3 59       	subi	r30, 0x93	; 147
     bfa:	ff 4f       	sbci	r31, 0xFF	; 255
     bfc:	80 e0       	ldi	r24, 0x00	; 0
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	a8 ec       	ldi	r26, 0xC8	; 200
     c02:	b2 e4       	ldi	r27, 0x42	; 66
     c04:	80 83       	st	Z, r24
     c06:	91 83       	std	Z+1, r25	; 0x01
     c08:	a2 83       	std	Z+2, r26	; 0x02
     c0a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c0c:	8e 01       	movw	r16, r28
     c0e:	07 59       	subi	r16, 0x97	; 151
     c10:	1f 4f       	sbci	r17, 0xFF	; 255
     c12:	fe 01       	movw	r30, r28
     c14:	e3 59       	subi	r30, 0x93	; 147
     c16:	ff 4f       	sbci	r31, 0xFF	; 255
     c18:	60 81       	ld	r22, Z
     c1a:	71 81       	ldd	r23, Z+1	; 0x01
     c1c:	82 81       	ldd	r24, Z+2	; 0x02
     c1e:	93 81       	ldd	r25, Z+3	; 0x03
     c20:	20 e0       	ldi	r18, 0x00	; 0
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	4a e7       	ldi	r20, 0x7A	; 122
     c26:	53 e4       	ldi	r21, 0x43	; 67
     c28:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     c2c:	dc 01       	movw	r26, r24
     c2e:	cb 01       	movw	r24, r22
     c30:	f8 01       	movw	r30, r16
     c32:	80 83       	st	Z, r24
     c34:	91 83       	std	Z+1, r25	; 0x01
     c36:	a2 83       	std	Z+2, r26	; 0x02
     c38:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     c3a:	fe 01       	movw	r30, r28
     c3c:	e7 59       	subi	r30, 0x97	; 151
     c3e:	ff 4f       	sbci	r31, 0xFF	; 255
     c40:	60 81       	ld	r22, Z
     c42:	71 81       	ldd	r23, Z+1	; 0x01
     c44:	82 81       	ldd	r24, Z+2	; 0x02
     c46:	93 81       	ldd	r25, Z+3	; 0x03
     c48:	20 e0       	ldi	r18, 0x00	; 0
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	40 e8       	ldi	r20, 0x80	; 128
     c4e:	5f e3       	ldi	r21, 0x3F	; 63
     c50:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     c54:	88 23       	and	r24, r24
     c56:	44 f4       	brge	.+16     	; 0xc68 <app+0x132>
		__ticks = 1;
     c58:	fe 01       	movw	r30, r28
     c5a:	e9 59       	subi	r30, 0x99	; 153
     c5c:	ff 4f       	sbci	r31, 0xFF	; 255
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	91 83       	std	Z+1, r25	; 0x01
     c64:	80 83       	st	Z, r24
     c66:	64 c0       	rjmp	.+200    	; 0xd30 <app+0x1fa>
	else if (__tmp > 65535)
     c68:	fe 01       	movw	r30, r28
     c6a:	e7 59       	subi	r30, 0x97	; 151
     c6c:	ff 4f       	sbci	r31, 0xFF	; 255
     c6e:	60 81       	ld	r22, Z
     c70:	71 81       	ldd	r23, Z+1	; 0x01
     c72:	82 81       	ldd	r24, Z+2	; 0x02
     c74:	93 81       	ldd	r25, Z+3	; 0x03
     c76:	20 e0       	ldi	r18, 0x00	; 0
     c78:	3f ef       	ldi	r19, 0xFF	; 255
     c7a:	4f e7       	ldi	r20, 0x7F	; 127
     c7c:	57 e4       	ldi	r21, 0x47	; 71
     c7e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     c82:	18 16       	cp	r1, r24
     c84:	0c f0       	brlt	.+2      	; 0xc88 <app+0x152>
     c86:	43 c0       	rjmp	.+134    	; 0xd0e <app+0x1d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c88:	fe 01       	movw	r30, r28
     c8a:	e3 59       	subi	r30, 0x93	; 147
     c8c:	ff 4f       	sbci	r31, 0xFF	; 255
     c8e:	60 81       	ld	r22, Z
     c90:	71 81       	ldd	r23, Z+1	; 0x01
     c92:	82 81       	ldd	r24, Z+2	; 0x02
     c94:	93 81       	ldd	r25, Z+3	; 0x03
     c96:	20 e0       	ldi	r18, 0x00	; 0
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	40 e2       	ldi	r20, 0x20	; 32
     c9c:	51 e4       	ldi	r21, 0x41	; 65
     c9e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ca2:	dc 01       	movw	r26, r24
     ca4:	cb 01       	movw	r24, r22
     ca6:	8e 01       	movw	r16, r28
     ca8:	09 59       	subi	r16, 0x99	; 153
     caa:	1f 4f       	sbci	r17, 0xFF	; 255
     cac:	bc 01       	movw	r22, r24
     cae:	cd 01       	movw	r24, r26
     cb0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     cb4:	dc 01       	movw	r26, r24
     cb6:	cb 01       	movw	r24, r22
     cb8:	f8 01       	movw	r30, r16
     cba:	91 83       	std	Z+1, r25	; 0x01
     cbc:	80 83       	st	Z, r24
     cbe:	1f c0       	rjmp	.+62     	; 0xcfe <app+0x1c8>
     cc0:	fe 01       	movw	r30, r28
     cc2:	eb 59       	subi	r30, 0x9B	; 155
     cc4:	ff 4f       	sbci	r31, 0xFF	; 255
     cc6:	89 e1       	ldi	r24, 0x19	; 25
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	91 83       	std	Z+1, r25	; 0x01
     ccc:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cce:	fe 01       	movw	r30, r28
     cd0:	eb 59       	subi	r30, 0x9B	; 155
     cd2:	ff 4f       	sbci	r31, 0xFF	; 255
     cd4:	80 81       	ld	r24, Z
     cd6:	91 81       	ldd	r25, Z+1	; 0x01
     cd8:	01 97       	sbiw	r24, 0x01	; 1
     cda:	f1 f7       	brne	.-4      	; 0xcd8 <app+0x1a2>
     cdc:	fe 01       	movw	r30, r28
     cde:	eb 59       	subi	r30, 0x9B	; 155
     ce0:	ff 4f       	sbci	r31, 0xFF	; 255
     ce2:	91 83       	std	Z+1, r25	; 0x01
     ce4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ce6:	de 01       	movw	r26, r28
     ce8:	a9 59       	subi	r26, 0x99	; 153
     cea:	bf 4f       	sbci	r27, 0xFF	; 255
     cec:	fe 01       	movw	r30, r28
     cee:	e9 59       	subi	r30, 0x99	; 153
     cf0:	ff 4f       	sbci	r31, 0xFF	; 255
     cf2:	80 81       	ld	r24, Z
     cf4:	91 81       	ldd	r25, Z+1	; 0x01
     cf6:	01 97       	sbiw	r24, 0x01	; 1
     cf8:	11 96       	adiw	r26, 0x01	; 1
     cfa:	9c 93       	st	X, r25
     cfc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cfe:	fe 01       	movw	r30, r28
     d00:	e9 59       	subi	r30, 0x99	; 153
     d02:	ff 4f       	sbci	r31, 0xFF	; 255
     d04:	80 81       	ld	r24, Z
     d06:	91 81       	ldd	r25, Z+1	; 0x01
     d08:	00 97       	sbiw	r24, 0x00	; 0
     d0a:	d1 f6       	brne	.-76     	; 0xcc0 <app+0x18a>
     d0c:	27 c0       	rjmp	.+78     	; 0xd5c <app+0x226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d0e:	8e 01       	movw	r16, r28
     d10:	09 59       	subi	r16, 0x99	; 153
     d12:	1f 4f       	sbci	r17, 0xFF	; 255
     d14:	fe 01       	movw	r30, r28
     d16:	e7 59       	subi	r30, 0x97	; 151
     d18:	ff 4f       	sbci	r31, 0xFF	; 255
     d1a:	60 81       	ld	r22, Z
     d1c:	71 81       	ldd	r23, Z+1	; 0x01
     d1e:	82 81       	ldd	r24, Z+2	; 0x02
     d20:	93 81       	ldd	r25, Z+3	; 0x03
     d22:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d26:	dc 01       	movw	r26, r24
     d28:	cb 01       	movw	r24, r22
     d2a:	f8 01       	movw	r30, r16
     d2c:	91 83       	std	Z+1, r25	; 0x01
     d2e:	80 83       	st	Z, r24
     d30:	de 01       	movw	r26, r28
     d32:	ad 59       	subi	r26, 0x9D	; 157
     d34:	bf 4f       	sbci	r27, 0xFF	; 255
     d36:	fe 01       	movw	r30, r28
     d38:	e9 59       	subi	r30, 0x99	; 153
     d3a:	ff 4f       	sbci	r31, 0xFF	; 255
     d3c:	80 81       	ld	r24, Z
     d3e:	91 81       	ldd	r25, Z+1	; 0x01
     d40:	8d 93       	st	X+, r24
     d42:	9c 93       	st	X, r25
     d44:	fe 01       	movw	r30, r28
     d46:	ed 59       	subi	r30, 0x9D	; 157
     d48:	ff 4f       	sbci	r31, 0xFF	; 255
     d4a:	80 81       	ld	r24, Z
     d4c:	91 81       	ldd	r25, Z+1	; 0x01
     d4e:	01 97       	sbiw	r24, 0x01	; 1
     d50:	f1 f7       	brne	.-4      	; 0xd4e <app+0x218>
     d52:	fe 01       	movw	r30, r28
     d54:	ed 59       	subi	r30, 0x9D	; 157
     d56:	ff 4f       	sbci	r31, 0xFF	; 255
     d58:	91 83       	std	Z+1, r25	; 0x01
     d5a:	80 83       	st	Z, r24
_delay_ms(100);
LCD_enuDisplayCharPOS('*',2,pass_nums);
     d5c:	fe 01       	movw	r30, r28
     d5e:	ea 57       	subi	r30, 0x7A	; 122
     d60:	ff 4f       	sbci	r31, 0xFF	; 255
     d62:	8a e2       	ldi	r24, 0x2A	; 42
     d64:	62 e0       	ldi	r22, 0x02	; 2
     d66:	40 81       	ld	r20, Z
     d68:	0e 94 58 19 	call	0x32b0	; 0x32b0 <LCD_enuDisplayCharPOS>
     d6c:	fe 01       	movw	r30, r28
     d6e:	e1 5a       	subi	r30, 0xA1	; 161
     d70:	ff 4f       	sbci	r31, 0xFF	; 255
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	a8 ec       	ldi	r26, 0xC8	; 200
     d78:	b2 e4       	ldi	r27, 0x42	; 66
     d7a:	80 83       	st	Z, r24
     d7c:	91 83       	std	Z+1, r25	; 0x01
     d7e:	a2 83       	std	Z+2, r26	; 0x02
     d80:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d82:	8e 01       	movw	r16, r28
     d84:	05 5a       	subi	r16, 0xA5	; 165
     d86:	1f 4f       	sbci	r17, 0xFF	; 255
     d88:	fe 01       	movw	r30, r28
     d8a:	e1 5a       	subi	r30, 0xA1	; 161
     d8c:	ff 4f       	sbci	r31, 0xFF	; 255
     d8e:	60 81       	ld	r22, Z
     d90:	71 81       	ldd	r23, Z+1	; 0x01
     d92:	82 81       	ldd	r24, Z+2	; 0x02
     d94:	93 81       	ldd	r25, Z+3	; 0x03
     d96:	20 e0       	ldi	r18, 0x00	; 0
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	4a e7       	ldi	r20, 0x7A	; 122
     d9c:	53 e4       	ldi	r21, 0x43	; 67
     d9e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     da2:	dc 01       	movw	r26, r24
     da4:	cb 01       	movw	r24, r22
     da6:	f8 01       	movw	r30, r16
     da8:	80 83       	st	Z, r24
     daa:	91 83       	std	Z+1, r25	; 0x01
     dac:	a2 83       	std	Z+2, r26	; 0x02
     dae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     db0:	fe 01       	movw	r30, r28
     db2:	e5 5a       	subi	r30, 0xA5	; 165
     db4:	ff 4f       	sbci	r31, 0xFF	; 255
     db6:	60 81       	ld	r22, Z
     db8:	71 81       	ldd	r23, Z+1	; 0x01
     dba:	82 81       	ldd	r24, Z+2	; 0x02
     dbc:	93 81       	ldd	r25, Z+3	; 0x03
     dbe:	20 e0       	ldi	r18, 0x00	; 0
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	40 e8       	ldi	r20, 0x80	; 128
     dc4:	5f e3       	ldi	r21, 0x3F	; 63
     dc6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     dca:	88 23       	and	r24, r24
     dcc:	44 f4       	brge	.+16     	; 0xdde <app+0x2a8>
		__ticks = 1;
     dce:	fe 01       	movw	r30, r28
     dd0:	e7 5a       	subi	r30, 0xA7	; 167
     dd2:	ff 4f       	sbci	r31, 0xFF	; 255
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	91 83       	std	Z+1, r25	; 0x01
     dda:	80 83       	st	Z, r24
     ddc:	64 c0       	rjmp	.+200    	; 0xea6 <app+0x370>
	else if (__tmp > 65535)
     dde:	fe 01       	movw	r30, r28
     de0:	e5 5a       	subi	r30, 0xA5	; 165
     de2:	ff 4f       	sbci	r31, 0xFF	; 255
     de4:	60 81       	ld	r22, Z
     de6:	71 81       	ldd	r23, Z+1	; 0x01
     de8:	82 81       	ldd	r24, Z+2	; 0x02
     dea:	93 81       	ldd	r25, Z+3	; 0x03
     dec:	20 e0       	ldi	r18, 0x00	; 0
     dee:	3f ef       	ldi	r19, 0xFF	; 255
     df0:	4f e7       	ldi	r20, 0x7F	; 127
     df2:	57 e4       	ldi	r21, 0x47	; 71
     df4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     df8:	18 16       	cp	r1, r24
     dfa:	0c f0       	brlt	.+2      	; 0xdfe <app+0x2c8>
     dfc:	43 c0       	rjmp	.+134    	; 0xe84 <app+0x34e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dfe:	fe 01       	movw	r30, r28
     e00:	e1 5a       	subi	r30, 0xA1	; 161
     e02:	ff 4f       	sbci	r31, 0xFF	; 255
     e04:	60 81       	ld	r22, Z
     e06:	71 81       	ldd	r23, Z+1	; 0x01
     e08:	82 81       	ldd	r24, Z+2	; 0x02
     e0a:	93 81       	ldd	r25, Z+3	; 0x03
     e0c:	20 e0       	ldi	r18, 0x00	; 0
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	40 e2       	ldi	r20, 0x20	; 32
     e12:	51 e4       	ldi	r21, 0x41	; 65
     e14:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e18:	dc 01       	movw	r26, r24
     e1a:	cb 01       	movw	r24, r22
     e1c:	8e 01       	movw	r16, r28
     e1e:	07 5a       	subi	r16, 0xA7	; 167
     e20:	1f 4f       	sbci	r17, 0xFF	; 255
     e22:	bc 01       	movw	r22, r24
     e24:	cd 01       	movw	r24, r26
     e26:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e2a:	dc 01       	movw	r26, r24
     e2c:	cb 01       	movw	r24, r22
     e2e:	f8 01       	movw	r30, r16
     e30:	91 83       	std	Z+1, r25	; 0x01
     e32:	80 83       	st	Z, r24
     e34:	1f c0       	rjmp	.+62     	; 0xe74 <app+0x33e>
     e36:	fe 01       	movw	r30, r28
     e38:	e9 5a       	subi	r30, 0xA9	; 169
     e3a:	ff 4f       	sbci	r31, 0xFF	; 255
     e3c:	89 e1       	ldi	r24, 0x19	; 25
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	91 83       	std	Z+1, r25	; 0x01
     e42:	80 83       	st	Z, r24
     e44:	fe 01       	movw	r30, r28
     e46:	e9 5a       	subi	r30, 0xA9	; 169
     e48:	ff 4f       	sbci	r31, 0xFF	; 255
     e4a:	80 81       	ld	r24, Z
     e4c:	91 81       	ldd	r25, Z+1	; 0x01
     e4e:	01 97       	sbiw	r24, 0x01	; 1
     e50:	f1 f7       	brne	.-4      	; 0xe4e <app+0x318>
     e52:	fe 01       	movw	r30, r28
     e54:	e9 5a       	subi	r30, 0xA9	; 169
     e56:	ff 4f       	sbci	r31, 0xFF	; 255
     e58:	91 83       	std	Z+1, r25	; 0x01
     e5a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e5c:	de 01       	movw	r26, r28
     e5e:	a7 5a       	subi	r26, 0xA7	; 167
     e60:	bf 4f       	sbci	r27, 0xFF	; 255
     e62:	fe 01       	movw	r30, r28
     e64:	e7 5a       	subi	r30, 0xA7	; 167
     e66:	ff 4f       	sbci	r31, 0xFF	; 255
     e68:	80 81       	ld	r24, Z
     e6a:	91 81       	ldd	r25, Z+1	; 0x01
     e6c:	01 97       	sbiw	r24, 0x01	; 1
     e6e:	11 96       	adiw	r26, 0x01	; 1
     e70:	9c 93       	st	X, r25
     e72:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e74:	fe 01       	movw	r30, r28
     e76:	e7 5a       	subi	r30, 0xA7	; 167
     e78:	ff 4f       	sbci	r31, 0xFF	; 255
     e7a:	80 81       	ld	r24, Z
     e7c:	91 81       	ldd	r25, Z+1	; 0x01
     e7e:	00 97       	sbiw	r24, 0x00	; 0
     e80:	d1 f6       	brne	.-76     	; 0xe36 <app+0x300>
     e82:	7b ce       	rjmp	.-778    	; 0xb7a <app+0x44>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e84:	8e 01       	movw	r16, r28
     e86:	07 5a       	subi	r16, 0xA7	; 167
     e88:	1f 4f       	sbci	r17, 0xFF	; 255
     e8a:	fe 01       	movw	r30, r28
     e8c:	e5 5a       	subi	r30, 0xA5	; 165
     e8e:	ff 4f       	sbci	r31, 0xFF	; 255
     e90:	60 81       	ld	r22, Z
     e92:	71 81       	ldd	r23, Z+1	; 0x01
     e94:	82 81       	ldd	r24, Z+2	; 0x02
     e96:	93 81       	ldd	r25, Z+3	; 0x03
     e98:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e9c:	dc 01       	movw	r26, r24
     e9e:	cb 01       	movw	r24, r22
     ea0:	f8 01       	movw	r30, r16
     ea2:	91 83       	std	Z+1, r25	; 0x01
     ea4:	80 83       	st	Z, r24
     ea6:	de 01       	movw	r26, r28
     ea8:	ab 5a       	subi	r26, 0xAB	; 171
     eaa:	bf 4f       	sbci	r27, 0xFF	; 255
     eac:	fe 01       	movw	r30, r28
     eae:	e7 5a       	subi	r30, 0xA7	; 167
     eb0:	ff 4f       	sbci	r31, 0xFF	; 255
     eb2:	80 81       	ld	r24, Z
     eb4:	91 81       	ldd	r25, Z+1	; 0x01
     eb6:	11 96       	adiw	r26, 0x01	; 1
     eb8:	9c 93       	st	X, r25
     eba:	8e 93       	st	-X, r24
     ebc:	fe 01       	movw	r30, r28
     ebe:	eb 5a       	subi	r30, 0xAB	; 171
     ec0:	ff 4f       	sbci	r31, 0xFF	; 255
     ec2:	80 81       	ld	r24, Z
     ec4:	91 81       	ldd	r25, Z+1	; 0x01
     ec6:	01 97       	sbiw	r24, 0x01	; 1
     ec8:	f1 f7       	brne	.-4      	; 0xec6 <app+0x390>
     eca:	fe 01       	movw	r30, r28
     ecc:	eb 5a       	subi	r30, 0xAB	; 171
     ece:	ff 4f       	sbci	r31, 0xFF	; 255
     ed0:	91 83       	std	Z+1, r25	; 0x01
     ed2:	80 83       	st	Z, r24
     ed4:	52 ce       	rjmp	.-860    	; 0xb7a <app+0x44>
_delay_ms(100);

}
LCD_enuClear();
     ed6:	0e 94 46 19 	call	0x328c	; 0x328c <LCD_enuClear>
//take password again to check
u8 count=0;
     eda:	fe 01       	movw	r30, r28
     edc:	eb 57       	subi	r30, 0x7B	; 123
     ede:	ff 4f       	sbci	r31, 0xFF	; 255
     ee0:	10 82       	st	Z, r1
LCD_enuDisplayStringPOS("ensure password",1,2);
     ee2:	8f e6       	ldi	r24, 0x6F	; 111
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	61 e0       	ldi	r22, 0x01	; 1
     ee8:	42 e0       	ldi	r20, 0x02	; 2
     eea:	0e 94 6f 19 	call	0x32de	; 0x32de <LCD_enuDisplayStringPOS>

while(1){
do{
	 kp_pass=KEYPAD_enuGetpressedKey();
     eee:	0e 94 a5 12 	call	0x254a	; 0x254a <KEYPAD_enuGetpressedKey>
     ef2:	fe 01       	movw	r30, r28
     ef4:	e9 57       	subi	r30, 0x79	; 121
     ef6:	ff 4f       	sbci	r31, 0xFF	; 255
     ef8:	80 83       	st	Z, r24
}while(kp_pass== KP_NO_PRESSED_KEY);
     efa:	fe 01       	movw	r30, r28
     efc:	e9 57       	subi	r30, 0x79	; 121
     efe:	ff 4f       	sbci	r31, 0xFF	; 255
     f00:	80 81       	ld	r24, Z
     f02:	83 34       	cpi	r24, 0x43	; 67
     f04:	a1 f3       	breq	.-24     	; 0xeee <app+0x3b8>
if(kp_pass=='$') break;
     f06:	fe 01       	movw	r30, r28
     f08:	e9 57       	subi	r30, 0x79	; 121
     f0a:	ff 4f       	sbci	r31, 0xFF	; 255
     f0c:	80 81       	ld	r24, Z
     f0e:	84 32       	cpi	r24, 0x24	; 36
     f10:	09 f4       	brne	.+2      	; 0xf14 <app+0x3de>
     f12:	e7 c0       	rjmp	.+462    	; 0x10e2 <app+0x5ac>
pass_ch_nums_arr[count++]=kp_pass;
     f14:	fe 01       	movw	r30, r28
     f16:	eb 57       	subi	r30, 0x7B	; 123
     f18:	ff 4f       	sbci	r31, 0xFF	; 255
     f1a:	80 81       	ld	r24, Z
     f1c:	28 2f       	mov	r18, r24
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	ce 01       	movw	r24, r28
     f22:	88 56       	subi	r24, 0x68	; 104
     f24:	9f 4f       	sbci	r25, 0xFF	; 255
     f26:	dc 01       	movw	r26, r24
     f28:	a2 0f       	add	r26, r18
     f2a:	b3 1f       	adc	r27, r19
     f2c:	fe 01       	movw	r30, r28
     f2e:	e9 57       	subi	r30, 0x79	; 121
     f30:	ff 4f       	sbci	r31, 0xFF	; 255
     f32:	80 81       	ld	r24, Z
     f34:	8c 93       	st	X, r24
     f36:	de 01       	movw	r26, r28
     f38:	ab 57       	subi	r26, 0x7B	; 123
     f3a:	bf 4f       	sbci	r27, 0xFF	; 255
     f3c:	fe 01       	movw	r30, r28
     f3e:	eb 57       	subi	r30, 0x7B	; 123
     f40:	ff 4f       	sbci	r31, 0xFF	; 255
     f42:	80 81       	ld	r24, Z
     f44:	8f 5f       	subi	r24, 0xFF	; 255
     f46:	8c 93       	st	X, r24
LCD_enuDisplayNumPOS(kp_pass,2,count);
     f48:	fe 01       	movw	r30, r28
     f4a:	e9 57       	subi	r30, 0x79	; 121
     f4c:	ff 4f       	sbci	r31, 0xFF	; 255
     f4e:	80 81       	ld	r24, Z
     f50:	88 2f       	mov	r24, r24
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	a0 e0       	ldi	r26, 0x00	; 0
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	fe 01       	movw	r30, r28
     f5a:	eb 57       	subi	r30, 0x7B	; 123
     f5c:	ff 4f       	sbci	r31, 0xFF	; 255
     f5e:	bc 01       	movw	r22, r24
     f60:	cd 01       	movw	r24, r26
     f62:	42 e0       	ldi	r20, 0x02	; 2
     f64:	20 81       	ld	r18, Z
     f66:	0e 94 89 19 	call	0x3312	; 0x3312 <LCD_enuDisplayNumPOS>
     f6a:	fe 01       	movw	r30, r28
     f6c:	ef 5a       	subi	r30, 0xAF	; 175
     f6e:	ff 4f       	sbci	r31, 0xFF	; 255
     f70:	80 e0       	ldi	r24, 0x00	; 0
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	a8 ec       	ldi	r26, 0xC8	; 200
     f76:	b2 e4       	ldi	r27, 0x42	; 66
     f78:	80 83       	st	Z, r24
     f7a:	91 83       	std	Z+1, r25	; 0x01
     f7c:	a2 83       	std	Z+2, r26	; 0x02
     f7e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f80:	8e 01       	movw	r16, r28
     f82:	03 5b       	subi	r16, 0xB3	; 179
     f84:	1f 4f       	sbci	r17, 0xFF	; 255
     f86:	fe 01       	movw	r30, r28
     f88:	ef 5a       	subi	r30, 0xAF	; 175
     f8a:	ff 4f       	sbci	r31, 0xFF	; 255
     f8c:	60 81       	ld	r22, Z
     f8e:	71 81       	ldd	r23, Z+1	; 0x01
     f90:	82 81       	ldd	r24, Z+2	; 0x02
     f92:	93 81       	ldd	r25, Z+3	; 0x03
     f94:	20 e0       	ldi	r18, 0x00	; 0
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	4a e7       	ldi	r20, 0x7A	; 122
     f9a:	53 e4       	ldi	r21, 0x43	; 67
     f9c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fa0:	dc 01       	movw	r26, r24
     fa2:	cb 01       	movw	r24, r22
     fa4:	f8 01       	movw	r30, r16
     fa6:	80 83       	st	Z, r24
     fa8:	91 83       	std	Z+1, r25	; 0x01
     faa:	a2 83       	std	Z+2, r26	; 0x02
     fac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     fae:	fe 01       	movw	r30, r28
     fb0:	e3 5b       	subi	r30, 0xB3	; 179
     fb2:	ff 4f       	sbci	r31, 0xFF	; 255
     fb4:	60 81       	ld	r22, Z
     fb6:	71 81       	ldd	r23, Z+1	; 0x01
     fb8:	82 81       	ldd	r24, Z+2	; 0x02
     fba:	93 81       	ldd	r25, Z+3	; 0x03
     fbc:	20 e0       	ldi	r18, 0x00	; 0
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	40 e8       	ldi	r20, 0x80	; 128
     fc2:	5f e3       	ldi	r21, 0x3F	; 63
     fc4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     fc8:	88 23       	and	r24, r24
     fca:	44 f4       	brge	.+16     	; 0xfdc <app+0x4a6>
		__ticks = 1;
     fcc:	fe 01       	movw	r30, r28
     fce:	e5 5b       	subi	r30, 0xB5	; 181
     fd0:	ff 4f       	sbci	r31, 0xFF	; 255
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	91 83       	std	Z+1, r25	; 0x01
     fd8:	80 83       	st	Z, r24
     fda:	64 c0       	rjmp	.+200    	; 0x10a4 <app+0x56e>
	else if (__tmp > 65535)
     fdc:	fe 01       	movw	r30, r28
     fde:	e3 5b       	subi	r30, 0xB3	; 179
     fe0:	ff 4f       	sbci	r31, 0xFF	; 255
     fe2:	60 81       	ld	r22, Z
     fe4:	71 81       	ldd	r23, Z+1	; 0x01
     fe6:	82 81       	ldd	r24, Z+2	; 0x02
     fe8:	93 81       	ldd	r25, Z+3	; 0x03
     fea:	20 e0       	ldi	r18, 0x00	; 0
     fec:	3f ef       	ldi	r19, 0xFF	; 255
     fee:	4f e7       	ldi	r20, 0x7F	; 127
     ff0:	57 e4       	ldi	r21, 0x47	; 71
     ff2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     ff6:	18 16       	cp	r1, r24
     ff8:	0c f0       	brlt	.+2      	; 0xffc <app+0x4c6>
     ffa:	43 c0       	rjmp	.+134    	; 0x1082 <app+0x54c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ffc:	fe 01       	movw	r30, r28
     ffe:	ef 5a       	subi	r30, 0xAF	; 175
    1000:	ff 4f       	sbci	r31, 0xFF	; 255
    1002:	60 81       	ld	r22, Z
    1004:	71 81       	ldd	r23, Z+1	; 0x01
    1006:	82 81       	ldd	r24, Z+2	; 0x02
    1008:	93 81       	ldd	r25, Z+3	; 0x03
    100a:	20 e0       	ldi	r18, 0x00	; 0
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	40 e2       	ldi	r20, 0x20	; 32
    1010:	51 e4       	ldi	r21, 0x41	; 65
    1012:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1016:	dc 01       	movw	r26, r24
    1018:	cb 01       	movw	r24, r22
    101a:	8e 01       	movw	r16, r28
    101c:	05 5b       	subi	r16, 0xB5	; 181
    101e:	1f 4f       	sbci	r17, 0xFF	; 255
    1020:	bc 01       	movw	r22, r24
    1022:	cd 01       	movw	r24, r26
    1024:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1028:	dc 01       	movw	r26, r24
    102a:	cb 01       	movw	r24, r22
    102c:	f8 01       	movw	r30, r16
    102e:	91 83       	std	Z+1, r25	; 0x01
    1030:	80 83       	st	Z, r24
    1032:	1f c0       	rjmp	.+62     	; 0x1072 <app+0x53c>
    1034:	fe 01       	movw	r30, r28
    1036:	e7 5b       	subi	r30, 0xB7	; 183
    1038:	ff 4f       	sbci	r31, 0xFF	; 255
    103a:	89 e1       	ldi	r24, 0x19	; 25
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	91 83       	std	Z+1, r25	; 0x01
    1040:	80 83       	st	Z, r24
    1042:	fe 01       	movw	r30, r28
    1044:	e7 5b       	subi	r30, 0xB7	; 183
    1046:	ff 4f       	sbci	r31, 0xFF	; 255
    1048:	80 81       	ld	r24, Z
    104a:	91 81       	ldd	r25, Z+1	; 0x01
    104c:	01 97       	sbiw	r24, 0x01	; 1
    104e:	f1 f7       	brne	.-4      	; 0x104c <app+0x516>
    1050:	fe 01       	movw	r30, r28
    1052:	e7 5b       	subi	r30, 0xB7	; 183
    1054:	ff 4f       	sbci	r31, 0xFF	; 255
    1056:	91 83       	std	Z+1, r25	; 0x01
    1058:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    105a:	de 01       	movw	r26, r28
    105c:	a5 5b       	subi	r26, 0xB5	; 181
    105e:	bf 4f       	sbci	r27, 0xFF	; 255
    1060:	fe 01       	movw	r30, r28
    1062:	e5 5b       	subi	r30, 0xB5	; 181
    1064:	ff 4f       	sbci	r31, 0xFF	; 255
    1066:	80 81       	ld	r24, Z
    1068:	91 81       	ldd	r25, Z+1	; 0x01
    106a:	01 97       	sbiw	r24, 0x01	; 1
    106c:	11 96       	adiw	r26, 0x01	; 1
    106e:	9c 93       	st	X, r25
    1070:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1072:	fe 01       	movw	r30, r28
    1074:	e5 5b       	subi	r30, 0xB5	; 181
    1076:	ff 4f       	sbci	r31, 0xFF	; 255
    1078:	80 81       	ld	r24, Z
    107a:	91 81       	ldd	r25, Z+1	; 0x01
    107c:	00 97       	sbiw	r24, 0x00	; 0
    107e:	d1 f6       	brne	.-76     	; 0x1034 <app+0x4fe>
    1080:	27 c0       	rjmp	.+78     	; 0x10d0 <app+0x59a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1082:	8e 01       	movw	r16, r28
    1084:	05 5b       	subi	r16, 0xB5	; 181
    1086:	1f 4f       	sbci	r17, 0xFF	; 255
    1088:	fe 01       	movw	r30, r28
    108a:	e3 5b       	subi	r30, 0xB3	; 179
    108c:	ff 4f       	sbci	r31, 0xFF	; 255
    108e:	60 81       	ld	r22, Z
    1090:	71 81       	ldd	r23, Z+1	; 0x01
    1092:	82 81       	ldd	r24, Z+2	; 0x02
    1094:	93 81       	ldd	r25, Z+3	; 0x03
    1096:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    109a:	dc 01       	movw	r26, r24
    109c:	cb 01       	movw	r24, r22
    109e:	f8 01       	movw	r30, r16
    10a0:	91 83       	std	Z+1, r25	; 0x01
    10a2:	80 83       	st	Z, r24
    10a4:	de 01       	movw	r26, r28
    10a6:	a9 5b       	subi	r26, 0xB9	; 185
    10a8:	bf 4f       	sbci	r27, 0xFF	; 255
    10aa:	fe 01       	movw	r30, r28
    10ac:	e5 5b       	subi	r30, 0xB5	; 181
    10ae:	ff 4f       	sbci	r31, 0xFF	; 255
    10b0:	80 81       	ld	r24, Z
    10b2:	91 81       	ldd	r25, Z+1	; 0x01
    10b4:	8d 93       	st	X+, r24
    10b6:	9c 93       	st	X, r25
    10b8:	fe 01       	movw	r30, r28
    10ba:	e9 5b       	subi	r30, 0xB9	; 185
    10bc:	ff 4f       	sbci	r31, 0xFF	; 255
    10be:	80 81       	ld	r24, Z
    10c0:	91 81       	ldd	r25, Z+1	; 0x01
    10c2:	01 97       	sbiw	r24, 0x01	; 1
    10c4:	f1 f7       	brne	.-4      	; 0x10c2 <app+0x58c>
    10c6:	fe 01       	movw	r30, r28
    10c8:	e9 5b       	subi	r30, 0xB9	; 185
    10ca:	ff 4f       	sbci	r31, 0xFF	; 255
    10cc:	91 83       	std	Z+1, r25	; 0x01
    10ce:	80 83       	st	Z, r24
_delay_ms(100);
LCD_enuDisplayCharPOS('*',2,count);
    10d0:	fe 01       	movw	r30, r28
    10d2:	eb 57       	subi	r30, 0x7B	; 123
    10d4:	ff 4f       	sbci	r31, 0xFF	; 255
    10d6:	8a e2       	ldi	r24, 0x2A	; 42
    10d8:	62 e0       	ldi	r22, 0x02	; 2
    10da:	40 81       	ld	r20, Z
    10dc:	0e 94 58 19 	call	0x32b0	; 0x32b0 <LCD_enuDisplayCharPOS>
    10e0:	06 cf       	rjmp	.-500    	; 0xeee <app+0x3b8>
}
    10e2:	fe 01       	movw	r30, r28
    10e4:	ed 5b       	subi	r30, 0xBD	; 189
    10e6:	ff 4f       	sbci	r31, 0xFF	; 255
    10e8:	80 e0       	ldi	r24, 0x00	; 0
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	a8 ec       	ldi	r26, 0xC8	; 200
    10ee:	b2 e4       	ldi	r27, 0x42	; 66
    10f0:	80 83       	st	Z, r24
    10f2:	91 83       	std	Z+1, r25	; 0x01
    10f4:	a2 83       	std	Z+2, r26	; 0x02
    10f6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10f8:	8e 01       	movw	r16, r28
    10fa:	01 5c       	subi	r16, 0xC1	; 193
    10fc:	1f 4f       	sbci	r17, 0xFF	; 255
    10fe:	fe 01       	movw	r30, r28
    1100:	ed 5b       	subi	r30, 0xBD	; 189
    1102:	ff 4f       	sbci	r31, 0xFF	; 255
    1104:	60 81       	ld	r22, Z
    1106:	71 81       	ldd	r23, Z+1	; 0x01
    1108:	82 81       	ldd	r24, Z+2	; 0x02
    110a:	93 81       	ldd	r25, Z+3	; 0x03
    110c:	20 e0       	ldi	r18, 0x00	; 0
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	4a e7       	ldi	r20, 0x7A	; 122
    1112:	53 e4       	ldi	r21, 0x43	; 67
    1114:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1118:	dc 01       	movw	r26, r24
    111a:	cb 01       	movw	r24, r22
    111c:	f8 01       	movw	r30, r16
    111e:	80 83       	st	Z, r24
    1120:	91 83       	std	Z+1, r25	; 0x01
    1122:	a2 83       	std	Z+2, r26	; 0x02
    1124:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1126:	fe 01       	movw	r30, r28
    1128:	ff 96       	adiw	r30, 0x3f	; 63
    112a:	60 81       	ld	r22, Z
    112c:	71 81       	ldd	r23, Z+1	; 0x01
    112e:	82 81       	ldd	r24, Z+2	; 0x02
    1130:	93 81       	ldd	r25, Z+3	; 0x03
    1132:	20 e0       	ldi	r18, 0x00	; 0
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	40 e8       	ldi	r20, 0x80	; 128
    1138:	5f e3       	ldi	r21, 0x3F	; 63
    113a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    113e:	88 23       	and	r24, r24
    1140:	2c f4       	brge	.+10     	; 0x114c <app+0x616>
		__ticks = 1;
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	9e af       	std	Y+62, r25	; 0x3e
    1148:	8d af       	std	Y+61, r24	; 0x3d
    114a:	46 c0       	rjmp	.+140    	; 0x11d8 <app+0x6a2>
	else if (__tmp > 65535)
    114c:	fe 01       	movw	r30, r28
    114e:	ff 96       	adiw	r30, 0x3f	; 63
    1150:	60 81       	ld	r22, Z
    1152:	71 81       	ldd	r23, Z+1	; 0x01
    1154:	82 81       	ldd	r24, Z+2	; 0x02
    1156:	93 81       	ldd	r25, Z+3	; 0x03
    1158:	20 e0       	ldi	r18, 0x00	; 0
    115a:	3f ef       	ldi	r19, 0xFF	; 255
    115c:	4f e7       	ldi	r20, 0x7F	; 127
    115e:	57 e4       	ldi	r21, 0x47	; 71
    1160:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1164:	18 16       	cp	r1, r24
    1166:	64 f5       	brge	.+88     	; 0x11c0 <app+0x68a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1168:	fe 01       	movw	r30, r28
    116a:	ed 5b       	subi	r30, 0xBD	; 189
    116c:	ff 4f       	sbci	r31, 0xFF	; 255
    116e:	60 81       	ld	r22, Z
    1170:	71 81       	ldd	r23, Z+1	; 0x01
    1172:	82 81       	ldd	r24, Z+2	; 0x02
    1174:	93 81       	ldd	r25, Z+3	; 0x03
    1176:	20 e0       	ldi	r18, 0x00	; 0
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	40 e2       	ldi	r20, 0x20	; 32
    117c:	51 e4       	ldi	r21, 0x41	; 65
    117e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1182:	dc 01       	movw	r26, r24
    1184:	cb 01       	movw	r24, r22
    1186:	bc 01       	movw	r22, r24
    1188:	cd 01       	movw	r24, r26
    118a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    118e:	dc 01       	movw	r26, r24
    1190:	cb 01       	movw	r24, r22
    1192:	9e af       	std	Y+62, r25	; 0x3e
    1194:	8d af       	std	Y+61, r24	; 0x3d
    1196:	0f c0       	rjmp	.+30     	; 0x11b6 <app+0x680>
    1198:	89 e1       	ldi	r24, 0x19	; 25
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	9c af       	std	Y+60, r25	; 0x3c
    119e:	8b af       	std	Y+59, r24	; 0x3b
    11a0:	8b ad       	ldd	r24, Y+59	; 0x3b
    11a2:	9c ad       	ldd	r25, Y+60	; 0x3c
    11a4:	01 97       	sbiw	r24, 0x01	; 1
    11a6:	f1 f7       	brne	.-4      	; 0x11a4 <app+0x66e>
    11a8:	9c af       	std	Y+60, r25	; 0x3c
    11aa:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11ac:	8d ad       	ldd	r24, Y+61	; 0x3d
    11ae:	9e ad       	ldd	r25, Y+62	; 0x3e
    11b0:	01 97       	sbiw	r24, 0x01	; 1
    11b2:	9e af       	std	Y+62, r25	; 0x3e
    11b4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11b6:	8d ad       	ldd	r24, Y+61	; 0x3d
    11b8:	9e ad       	ldd	r25, Y+62	; 0x3e
    11ba:	00 97       	sbiw	r24, 0x00	; 0
    11bc:	69 f7       	brne	.-38     	; 0x1198 <app+0x662>
    11be:	16 c0       	rjmp	.+44     	; 0x11ec <app+0x6b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11c0:	fe 01       	movw	r30, r28
    11c2:	ff 96       	adiw	r30, 0x3f	; 63
    11c4:	60 81       	ld	r22, Z
    11c6:	71 81       	ldd	r23, Z+1	; 0x01
    11c8:	82 81       	ldd	r24, Z+2	; 0x02
    11ca:	93 81       	ldd	r25, Z+3	; 0x03
    11cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11d0:	dc 01       	movw	r26, r24
    11d2:	cb 01       	movw	r24, r22
    11d4:	9e af       	std	Y+62, r25	; 0x3e
    11d6:	8d af       	std	Y+61, r24	; 0x3d
    11d8:	8d ad       	ldd	r24, Y+61	; 0x3d
    11da:	9e ad       	ldd	r25, Y+62	; 0x3e
    11dc:	9a af       	std	Y+58, r25	; 0x3a
    11de:	89 af       	std	Y+57, r24	; 0x39
    11e0:	89 ad       	ldd	r24, Y+57	; 0x39
    11e2:	9a ad       	ldd	r25, Y+58	; 0x3a
    11e4:	01 97       	sbiw	r24, 0x01	; 1
    11e6:	f1 f7       	brne	.-4      	; 0x11e4 <app+0x6ae>
    11e8:	9a af       	std	Y+58, r25	; 0x3a
    11ea:	89 af       	std	Y+57, r24	; 0x39
_delay_ms(100);
LCD_enuClear();
    11ec:	0e 94 46 19 	call	0x328c	; 0x328c <LCD_enuClear>
 //check if pass is correct

int flag=1;
    11f0:	fe 01       	movw	r30, r28
    11f2:	ed 57       	subi	r30, 0x7D	; 125
    11f4:	ff 4f       	sbci	r31, 0xFF	; 255
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	91 83       	std	Z+1, r25	; 0x01
    11fc:	80 83       	st	Z, r24
for(u8 i=0;i<pass_nums;i++){
    11fe:	fe 01       	movw	r30, r28
    1200:	ee 57       	subi	r30, 0x7E	; 126
    1202:	ff 4f       	sbci	r31, 0xFF	; 255
    1204:	10 82       	st	Z, r1
    1206:	2a c0       	rjmp	.+84     	; 0x125c <app+0x726>
	if(pass_ch_nums_arr[i]!=pass_nums_arr[i])
    1208:	fe 01       	movw	r30, r28
    120a:	ee 57       	subi	r30, 0x7E	; 126
    120c:	ff 4f       	sbci	r31, 0xFF	; 255
    120e:	80 81       	ld	r24, Z
    1210:	28 2f       	mov	r18, r24
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	ce 01       	movw	r24, r28
    1216:	88 56       	subi	r24, 0x68	; 104
    1218:	9f 4f       	sbci	r25, 0xFF	; 255
    121a:	fc 01       	movw	r30, r24
    121c:	e2 0f       	add	r30, r18
    121e:	f3 1f       	adc	r31, r19
    1220:	40 81       	ld	r20, Z
    1222:	fe 01       	movw	r30, r28
    1224:	ee 57       	subi	r30, 0x7E	; 126
    1226:	ff 4f       	sbci	r31, 0xFF	; 255
    1228:	80 81       	ld	r24, Z
    122a:	28 2f       	mov	r18, r24
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	ce 01       	movw	r24, r28
    1230:	88 57       	subi	r24, 0x78	; 120
    1232:	9f 4f       	sbci	r25, 0xFF	; 255
    1234:	fc 01       	movw	r30, r24
    1236:	e2 0f       	add	r30, r18
    1238:	f3 1f       	adc	r31, r19
    123a:	80 81       	ld	r24, Z
    123c:	48 17       	cp	r20, r24
    123e:	c1 f0       	breq	.+48     	; 0x1270 <app+0x73a>
		flag=0;
    1240:	fe 01       	movw	r30, r28
    1242:	ed 57       	subi	r30, 0x7D	; 125
    1244:	ff 4f       	sbci	r31, 0xFF	; 255
    1246:	11 82       	std	Z+1, r1	; 0x01
    1248:	10 82       	st	Z, r1
_delay_ms(100);
LCD_enuClear();
 //check if pass is correct

int flag=1;
for(u8 i=0;i<pass_nums;i++){
    124a:	de 01       	movw	r26, r28
    124c:	ae 57       	subi	r26, 0x7E	; 126
    124e:	bf 4f       	sbci	r27, 0xFF	; 255
    1250:	fe 01       	movw	r30, r28
    1252:	ee 57       	subi	r30, 0x7E	; 126
    1254:	ff 4f       	sbci	r31, 0xFF	; 255
    1256:	80 81       	ld	r24, Z
    1258:	8f 5f       	subi	r24, 0xFF	; 255
    125a:	8c 93       	st	X, r24
    125c:	fe 01       	movw	r30, r28
    125e:	ee 57       	subi	r30, 0x7E	; 126
    1260:	ff 4f       	sbci	r31, 0xFF	; 255
    1262:	de 01       	movw	r26, r28
    1264:	aa 57       	subi	r26, 0x7A	; 122
    1266:	bf 4f       	sbci	r27, 0xFF	; 255
    1268:	90 81       	ld	r25, Z
    126a:	8c 91       	ld	r24, X
    126c:	98 17       	cp	r25, r24
    126e:	60 f2       	brcs	.-104    	; 0x1208 <app+0x6d2>
		break;
}

//display loading

	LCD_enuDisplayStringPOS("loading",1,2);
    1270:	8f e7       	ldi	r24, 0x7F	; 127
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	61 e0       	ldi	r22, 0x01	; 1
    1276:	42 e0       	ldi	r20, 0x02	; 2
    1278:	0e 94 6f 19 	call	0x32de	; 0x32de <LCD_enuDisplayStringPOS>
for(int i=0;i<3;i++){
    127c:	fe 01       	movw	r30, r28
    127e:	e0 58       	subi	r30, 0x80	; 128
    1280:	ff 4f       	sbci	r31, 0xFF	; 255
    1282:	11 82       	std	Z+1, r1	; 0x01
    1284:	10 82       	st	Z, r1
    1286:	89 c0       	rjmp	.+274    	; 0x139a <app+0x864>
    1288:	80 e0       	ldi	r24, 0x00	; 0
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	af ea       	ldi	r26, 0xAF	; 175
    128e:	b3 e4       	ldi	r27, 0x43	; 67
    1290:	8d ab       	std	Y+53, r24	; 0x35
    1292:	9e ab       	std	Y+54, r25	; 0x36
    1294:	af ab       	std	Y+55, r26	; 0x37
    1296:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1298:	6d a9       	ldd	r22, Y+53	; 0x35
    129a:	7e a9       	ldd	r23, Y+54	; 0x36
    129c:	8f a9       	ldd	r24, Y+55	; 0x37
    129e:	98 ad       	ldd	r25, Y+56	; 0x38
    12a0:	20 e0       	ldi	r18, 0x00	; 0
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	4a e7       	ldi	r20, 0x7A	; 122
    12a6:	53 e4       	ldi	r21, 0x43	; 67
    12a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12ac:	dc 01       	movw	r26, r24
    12ae:	cb 01       	movw	r24, r22
    12b0:	89 ab       	std	Y+49, r24	; 0x31
    12b2:	9a ab       	std	Y+50, r25	; 0x32
    12b4:	ab ab       	std	Y+51, r26	; 0x33
    12b6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    12b8:	69 a9       	ldd	r22, Y+49	; 0x31
    12ba:	7a a9       	ldd	r23, Y+50	; 0x32
    12bc:	8b a9       	ldd	r24, Y+51	; 0x33
    12be:	9c a9       	ldd	r25, Y+52	; 0x34
    12c0:	20 e0       	ldi	r18, 0x00	; 0
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	40 e8       	ldi	r20, 0x80	; 128
    12c6:	5f e3       	ldi	r21, 0x3F	; 63
    12c8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    12cc:	88 23       	and	r24, r24
    12ce:	2c f4       	brge	.+10     	; 0x12da <app+0x7a4>
		__ticks = 1;
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	98 ab       	std	Y+48, r25	; 0x30
    12d6:	8f a7       	std	Y+47, r24	; 0x2f
    12d8:	3f c0       	rjmp	.+126    	; 0x1358 <app+0x822>
	else if (__tmp > 65535)
    12da:	69 a9       	ldd	r22, Y+49	; 0x31
    12dc:	7a a9       	ldd	r23, Y+50	; 0x32
    12de:	8b a9       	ldd	r24, Y+51	; 0x33
    12e0:	9c a9       	ldd	r25, Y+52	; 0x34
    12e2:	20 e0       	ldi	r18, 0x00	; 0
    12e4:	3f ef       	ldi	r19, 0xFF	; 255
    12e6:	4f e7       	ldi	r20, 0x7F	; 127
    12e8:	57 e4       	ldi	r21, 0x47	; 71
    12ea:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    12ee:	18 16       	cp	r1, r24
    12f0:	4c f5       	brge	.+82     	; 0x1344 <app+0x80e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12f2:	6d a9       	ldd	r22, Y+53	; 0x35
    12f4:	7e a9       	ldd	r23, Y+54	; 0x36
    12f6:	8f a9       	ldd	r24, Y+55	; 0x37
    12f8:	98 ad       	ldd	r25, Y+56	; 0x38
    12fa:	20 e0       	ldi	r18, 0x00	; 0
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	40 e2       	ldi	r20, 0x20	; 32
    1300:	51 e4       	ldi	r21, 0x41	; 65
    1302:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1306:	dc 01       	movw	r26, r24
    1308:	cb 01       	movw	r24, r22
    130a:	bc 01       	movw	r22, r24
    130c:	cd 01       	movw	r24, r26
    130e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1312:	dc 01       	movw	r26, r24
    1314:	cb 01       	movw	r24, r22
    1316:	98 ab       	std	Y+48, r25	; 0x30
    1318:	8f a7       	std	Y+47, r24	; 0x2f
    131a:	0f c0       	rjmp	.+30     	; 0x133a <app+0x804>
    131c:	89 e1       	ldi	r24, 0x19	; 25
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	9e a7       	std	Y+46, r25	; 0x2e
    1322:	8d a7       	std	Y+45, r24	; 0x2d
    1324:	8d a5       	ldd	r24, Y+45	; 0x2d
    1326:	9e a5       	ldd	r25, Y+46	; 0x2e
    1328:	01 97       	sbiw	r24, 0x01	; 1
    132a:	f1 f7       	brne	.-4      	; 0x1328 <app+0x7f2>
    132c:	9e a7       	std	Y+46, r25	; 0x2e
    132e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1330:	8f a5       	ldd	r24, Y+47	; 0x2f
    1332:	98 a9       	ldd	r25, Y+48	; 0x30
    1334:	01 97       	sbiw	r24, 0x01	; 1
    1336:	98 ab       	std	Y+48, r25	; 0x30
    1338:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    133a:	8f a5       	ldd	r24, Y+47	; 0x2f
    133c:	98 a9       	ldd	r25, Y+48	; 0x30
    133e:	00 97       	sbiw	r24, 0x00	; 0
    1340:	69 f7       	brne	.-38     	; 0x131c <app+0x7e6>
    1342:	14 c0       	rjmp	.+40     	; 0x136c <app+0x836>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1344:	69 a9       	ldd	r22, Y+49	; 0x31
    1346:	7a a9       	ldd	r23, Y+50	; 0x32
    1348:	8b a9       	ldd	r24, Y+51	; 0x33
    134a:	9c a9       	ldd	r25, Y+52	; 0x34
    134c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1350:	dc 01       	movw	r26, r24
    1352:	cb 01       	movw	r24, r22
    1354:	98 ab       	std	Y+48, r25	; 0x30
    1356:	8f a7       	std	Y+47, r24	; 0x2f
    1358:	8f a5       	ldd	r24, Y+47	; 0x2f
    135a:	98 a9       	ldd	r25, Y+48	; 0x30
    135c:	9c a7       	std	Y+44, r25	; 0x2c
    135e:	8b a7       	std	Y+43, r24	; 0x2b
    1360:	8b a5       	ldd	r24, Y+43	; 0x2b
    1362:	9c a5       	ldd	r25, Y+44	; 0x2c
    1364:	01 97       	sbiw	r24, 0x01	; 1
    1366:	f1 f7       	brne	.-4      	; 0x1364 <app+0x82e>
    1368:	9c a7       	std	Y+44, r25	; 0x2c
    136a:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(350);
	LCD_enuDisplayCharPOS('.',1,(i+9));
    136c:	fe 01       	movw	r30, r28
    136e:	e0 58       	subi	r30, 0x80	; 128
    1370:	ff 4f       	sbci	r31, 0xFF	; 255
    1372:	80 81       	ld	r24, Z
    1374:	98 2f       	mov	r25, r24
    1376:	97 5f       	subi	r25, 0xF7	; 247
    1378:	8e e2       	ldi	r24, 0x2E	; 46
    137a:	61 e0       	ldi	r22, 0x01	; 1
    137c:	49 2f       	mov	r20, r25
    137e:	0e 94 58 19 	call	0x32b0	; 0x32b0 <LCD_enuDisplayCharPOS>
}

//display loading

	LCD_enuDisplayStringPOS("loading",1,2);
for(int i=0;i<3;i++){
    1382:	de 01       	movw	r26, r28
    1384:	a0 58       	subi	r26, 0x80	; 128
    1386:	bf 4f       	sbci	r27, 0xFF	; 255
    1388:	fe 01       	movw	r30, r28
    138a:	e0 58       	subi	r30, 0x80	; 128
    138c:	ff 4f       	sbci	r31, 0xFF	; 255
    138e:	80 81       	ld	r24, Z
    1390:	91 81       	ldd	r25, Z+1	; 0x01
    1392:	01 96       	adiw	r24, 0x01	; 1
    1394:	11 96       	adiw	r26, 0x01	; 1
    1396:	9c 93       	st	X, r25
    1398:	8e 93       	st	-X, r24
    139a:	fe 01       	movw	r30, r28
    139c:	e0 58       	subi	r30, 0x80	; 128
    139e:	ff 4f       	sbci	r31, 0xFF	; 255
    13a0:	80 81       	ld	r24, Z
    13a2:	91 81       	ldd	r25, Z+1	; 0x01
    13a4:	83 30       	cpi	r24, 0x03	; 3
    13a6:	91 05       	cpc	r25, r1
    13a8:	0c f4       	brge	.+2      	; 0x13ac <app+0x876>
    13aa:	6e cf       	rjmp	.-292    	; 0x1288 <app+0x752>
	LCD_enuDisplayCharPOS('.',1,(i+9));
}

//PASS correct  enter calculator

if(flag){
    13ac:	fe 01       	movw	r30, r28
    13ae:	ed 57       	subi	r30, 0x7D	; 125
    13b0:	ff 4f       	sbci	r31, 0xFF	; 255
    13b2:	80 81       	ld	r24, Z
    13b4:	91 81       	ldd	r25, Z+1	; 0x01
    13b6:	00 97       	sbiw	r24, 0x00	; 0
    13b8:	09 f4       	brne	.+2      	; 0x13bc <app+0x886>
    13ba:	ac c2       	rjmp	.+1368   	; 0x1914 <app+0xdde>
    13bc:	80 e0       	ldi	r24, 0x00	; 0
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	aa ef       	ldi	r26, 0xFA	; 250
    13c2:	b3 e4       	ldi	r27, 0x43	; 67
    13c4:	8f a3       	std	Y+39, r24	; 0x27
    13c6:	98 a7       	std	Y+40, r25	; 0x28
    13c8:	a9 a7       	std	Y+41, r26	; 0x29
    13ca:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13cc:	6f a1       	ldd	r22, Y+39	; 0x27
    13ce:	78 a5       	ldd	r23, Y+40	; 0x28
    13d0:	89 a5       	ldd	r24, Y+41	; 0x29
    13d2:	9a a5       	ldd	r25, Y+42	; 0x2a
    13d4:	20 e0       	ldi	r18, 0x00	; 0
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	4a e7       	ldi	r20, 0x7A	; 122
    13da:	53 e4       	ldi	r21, 0x43	; 67
    13dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13e0:	dc 01       	movw	r26, r24
    13e2:	cb 01       	movw	r24, r22
    13e4:	8b a3       	std	Y+35, r24	; 0x23
    13e6:	9c a3       	std	Y+36, r25	; 0x24
    13e8:	ad a3       	std	Y+37, r26	; 0x25
    13ea:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    13ec:	6b a1       	ldd	r22, Y+35	; 0x23
    13ee:	7c a1       	ldd	r23, Y+36	; 0x24
    13f0:	8d a1       	ldd	r24, Y+37	; 0x25
    13f2:	9e a1       	ldd	r25, Y+38	; 0x26
    13f4:	20 e0       	ldi	r18, 0x00	; 0
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	40 e8       	ldi	r20, 0x80	; 128
    13fa:	5f e3       	ldi	r21, 0x3F	; 63
    13fc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1400:	88 23       	and	r24, r24
    1402:	2c f4       	brge	.+10     	; 0x140e <app+0x8d8>
		__ticks = 1;
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	9a a3       	std	Y+34, r25	; 0x22
    140a:	89 a3       	std	Y+33, r24	; 0x21
    140c:	3f c0       	rjmp	.+126    	; 0x148c <app+0x956>
	else if (__tmp > 65535)
    140e:	6b a1       	ldd	r22, Y+35	; 0x23
    1410:	7c a1       	ldd	r23, Y+36	; 0x24
    1412:	8d a1       	ldd	r24, Y+37	; 0x25
    1414:	9e a1       	ldd	r25, Y+38	; 0x26
    1416:	20 e0       	ldi	r18, 0x00	; 0
    1418:	3f ef       	ldi	r19, 0xFF	; 255
    141a:	4f e7       	ldi	r20, 0x7F	; 127
    141c:	57 e4       	ldi	r21, 0x47	; 71
    141e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1422:	18 16       	cp	r1, r24
    1424:	4c f5       	brge	.+82     	; 0x1478 <app+0x942>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1426:	6f a1       	ldd	r22, Y+39	; 0x27
    1428:	78 a5       	ldd	r23, Y+40	; 0x28
    142a:	89 a5       	ldd	r24, Y+41	; 0x29
    142c:	9a a5       	ldd	r25, Y+42	; 0x2a
    142e:	20 e0       	ldi	r18, 0x00	; 0
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	40 e2       	ldi	r20, 0x20	; 32
    1434:	51 e4       	ldi	r21, 0x41	; 65
    1436:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    143a:	dc 01       	movw	r26, r24
    143c:	cb 01       	movw	r24, r22
    143e:	bc 01       	movw	r22, r24
    1440:	cd 01       	movw	r24, r26
    1442:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1446:	dc 01       	movw	r26, r24
    1448:	cb 01       	movw	r24, r22
    144a:	9a a3       	std	Y+34, r25	; 0x22
    144c:	89 a3       	std	Y+33, r24	; 0x21
    144e:	0f c0       	rjmp	.+30     	; 0x146e <app+0x938>
    1450:	89 e1       	ldi	r24, 0x19	; 25
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	98 a3       	std	Y+32, r25	; 0x20
    1456:	8f 8f       	std	Y+31, r24	; 0x1f
    1458:	8f 8d       	ldd	r24, Y+31	; 0x1f
    145a:	98 a1       	ldd	r25, Y+32	; 0x20
    145c:	01 97       	sbiw	r24, 0x01	; 1
    145e:	f1 f7       	brne	.-4      	; 0x145c <app+0x926>
    1460:	98 a3       	std	Y+32, r25	; 0x20
    1462:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1464:	89 a1       	ldd	r24, Y+33	; 0x21
    1466:	9a a1       	ldd	r25, Y+34	; 0x22
    1468:	01 97       	sbiw	r24, 0x01	; 1
    146a:	9a a3       	std	Y+34, r25	; 0x22
    146c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    146e:	89 a1       	ldd	r24, Y+33	; 0x21
    1470:	9a a1       	ldd	r25, Y+34	; 0x22
    1472:	00 97       	sbiw	r24, 0x00	; 0
    1474:	69 f7       	brne	.-38     	; 0x1450 <app+0x91a>
    1476:	14 c0       	rjmp	.+40     	; 0x14a0 <app+0x96a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1478:	6b a1       	ldd	r22, Y+35	; 0x23
    147a:	7c a1       	ldd	r23, Y+36	; 0x24
    147c:	8d a1       	ldd	r24, Y+37	; 0x25
    147e:	9e a1       	ldd	r25, Y+38	; 0x26
    1480:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1484:	dc 01       	movw	r26, r24
    1486:	cb 01       	movw	r24, r22
    1488:	9a a3       	std	Y+34, r25	; 0x22
    148a:	89 a3       	std	Y+33, r24	; 0x21
    148c:	89 a1       	ldd	r24, Y+33	; 0x21
    148e:	9a a1       	ldd	r25, Y+34	; 0x22
    1490:	9e 8f       	std	Y+30, r25	; 0x1e
    1492:	8d 8f       	std	Y+29, r24	; 0x1d
    1494:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1496:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1498:	01 97       	sbiw	r24, 0x01	; 1
    149a:	f1 f7       	brne	.-4      	; 0x1498 <app+0x962>
    149c:	9e 8f       	std	Y+30, r25	; 0x1e
    149e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(500);
	LCD_enuClear();
    14a0:	0e 94 46 19 	call	0x328c	; 0x328c <LCD_enuClear>
    14a4:	80 e0       	ldi	r24, 0x00	; 0
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	aa ef       	ldi	r26, 0xFA	; 250
    14aa:	b3 e4       	ldi	r27, 0x43	; 67
    14ac:	89 8f       	std	Y+25, r24	; 0x19
    14ae:	9a 8f       	std	Y+26, r25	; 0x1a
    14b0:	ab 8f       	std	Y+27, r26	; 0x1b
    14b2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14b4:	69 8d       	ldd	r22, Y+25	; 0x19
    14b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14bc:	20 e0       	ldi	r18, 0x00	; 0
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	4a e7       	ldi	r20, 0x7A	; 122
    14c2:	53 e4       	ldi	r21, 0x43	; 67
    14c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14c8:	dc 01       	movw	r26, r24
    14ca:	cb 01       	movw	r24, r22
    14cc:	8d 8b       	std	Y+21, r24	; 0x15
    14ce:	9e 8b       	std	Y+22, r25	; 0x16
    14d0:	af 8b       	std	Y+23, r26	; 0x17
    14d2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    14d4:	6d 89       	ldd	r22, Y+21	; 0x15
    14d6:	7e 89       	ldd	r23, Y+22	; 0x16
    14d8:	8f 89       	ldd	r24, Y+23	; 0x17
    14da:	98 8d       	ldd	r25, Y+24	; 0x18
    14dc:	20 e0       	ldi	r18, 0x00	; 0
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	40 e8       	ldi	r20, 0x80	; 128
    14e2:	5f e3       	ldi	r21, 0x3F	; 63
    14e4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    14e8:	88 23       	and	r24, r24
    14ea:	2c f4       	brge	.+10     	; 0x14f6 <app+0x9c0>
		__ticks = 1;
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	9c 8b       	std	Y+20, r25	; 0x14
    14f2:	8b 8b       	std	Y+19, r24	; 0x13
    14f4:	3f c0       	rjmp	.+126    	; 0x1574 <app+0xa3e>
	else if (__tmp > 65535)
    14f6:	6d 89       	ldd	r22, Y+21	; 0x15
    14f8:	7e 89       	ldd	r23, Y+22	; 0x16
    14fa:	8f 89       	ldd	r24, Y+23	; 0x17
    14fc:	98 8d       	ldd	r25, Y+24	; 0x18
    14fe:	20 e0       	ldi	r18, 0x00	; 0
    1500:	3f ef       	ldi	r19, 0xFF	; 255
    1502:	4f e7       	ldi	r20, 0x7F	; 127
    1504:	57 e4       	ldi	r21, 0x47	; 71
    1506:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    150a:	18 16       	cp	r1, r24
    150c:	4c f5       	brge	.+82     	; 0x1560 <app+0xa2a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    150e:	69 8d       	ldd	r22, Y+25	; 0x19
    1510:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1512:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1514:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1516:	20 e0       	ldi	r18, 0x00	; 0
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	40 e2       	ldi	r20, 0x20	; 32
    151c:	51 e4       	ldi	r21, 0x41	; 65
    151e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1522:	dc 01       	movw	r26, r24
    1524:	cb 01       	movw	r24, r22
    1526:	bc 01       	movw	r22, r24
    1528:	cd 01       	movw	r24, r26
    152a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    152e:	dc 01       	movw	r26, r24
    1530:	cb 01       	movw	r24, r22
    1532:	9c 8b       	std	Y+20, r25	; 0x14
    1534:	8b 8b       	std	Y+19, r24	; 0x13
    1536:	0f c0       	rjmp	.+30     	; 0x1556 <app+0xa20>
    1538:	89 e1       	ldi	r24, 0x19	; 25
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	9a 8b       	std	Y+18, r25	; 0x12
    153e:	89 8b       	std	Y+17, r24	; 0x11
    1540:	89 89       	ldd	r24, Y+17	; 0x11
    1542:	9a 89       	ldd	r25, Y+18	; 0x12
    1544:	01 97       	sbiw	r24, 0x01	; 1
    1546:	f1 f7       	brne	.-4      	; 0x1544 <app+0xa0e>
    1548:	9a 8b       	std	Y+18, r25	; 0x12
    154a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    154c:	8b 89       	ldd	r24, Y+19	; 0x13
    154e:	9c 89       	ldd	r25, Y+20	; 0x14
    1550:	01 97       	sbiw	r24, 0x01	; 1
    1552:	9c 8b       	std	Y+20, r25	; 0x14
    1554:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1556:	8b 89       	ldd	r24, Y+19	; 0x13
    1558:	9c 89       	ldd	r25, Y+20	; 0x14
    155a:	00 97       	sbiw	r24, 0x00	; 0
    155c:	69 f7       	brne	.-38     	; 0x1538 <app+0xa02>
    155e:	14 c0       	rjmp	.+40     	; 0x1588 <app+0xa52>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1560:	6d 89       	ldd	r22, Y+21	; 0x15
    1562:	7e 89       	ldd	r23, Y+22	; 0x16
    1564:	8f 89       	ldd	r24, Y+23	; 0x17
    1566:	98 8d       	ldd	r25, Y+24	; 0x18
    1568:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    156c:	dc 01       	movw	r26, r24
    156e:	cb 01       	movw	r24, r22
    1570:	9c 8b       	std	Y+20, r25	; 0x14
    1572:	8b 8b       	std	Y+19, r24	; 0x13
    1574:	8b 89       	ldd	r24, Y+19	; 0x13
    1576:	9c 89       	ldd	r25, Y+20	; 0x14
    1578:	98 8b       	std	Y+16, r25	; 0x10
    157a:	8f 87       	std	Y+15, r24	; 0x0f
    157c:	8f 85       	ldd	r24, Y+15	; 0x0f
    157e:	98 89       	ldd	r25, Y+16	; 0x10
    1580:	01 97       	sbiw	r24, 0x01	; 1
    1582:	f1 f7       	brne	.-4      	; 0x1580 <app+0xa4a>
    1584:	98 8b       	std	Y+16, r25	; 0x10
    1586:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);
	LCD_enuDisplayStringPOS("WELCOME",1,5);
    1588:	87 e8       	ldi	r24, 0x87	; 135
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	61 e0       	ldi	r22, 0x01	; 1
    158e:	45 e0       	ldi	r20, 0x05	; 5
    1590:	0e 94 6f 19 	call	0x32de	; 0x32de <LCD_enuDisplayStringPOS>
    1594:	80 e0       	ldi	r24, 0x00	; 0
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	a6 e1       	ldi	r26, 0x16	; 22
    159a:	b4 e4       	ldi	r27, 0x44	; 68
    159c:	8b 87       	std	Y+11, r24	; 0x0b
    159e:	9c 87       	std	Y+12, r25	; 0x0c
    15a0:	ad 87       	std	Y+13, r26	; 0x0d
    15a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    15a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    15a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    15aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    15ac:	20 e0       	ldi	r18, 0x00	; 0
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	4a e7       	ldi	r20, 0x7A	; 122
    15b2:	53 e4       	ldi	r21, 0x43	; 67
    15b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15b8:	dc 01       	movw	r26, r24
    15ba:	cb 01       	movw	r24, r22
    15bc:	8f 83       	std	Y+7, r24	; 0x07
    15be:	98 87       	std	Y+8, r25	; 0x08
    15c0:	a9 87       	std	Y+9, r26	; 0x09
    15c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15c4:	6f 81       	ldd	r22, Y+7	; 0x07
    15c6:	78 85       	ldd	r23, Y+8	; 0x08
    15c8:	89 85       	ldd	r24, Y+9	; 0x09
    15ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    15cc:	20 e0       	ldi	r18, 0x00	; 0
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	40 e8       	ldi	r20, 0x80	; 128
    15d2:	5f e3       	ldi	r21, 0x3F	; 63
    15d4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    15d8:	88 23       	and	r24, r24
    15da:	2c f4       	brge	.+10     	; 0x15e6 <app+0xab0>
		__ticks = 1;
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	9e 83       	std	Y+6, r25	; 0x06
    15e2:	8d 83       	std	Y+5, r24	; 0x05
    15e4:	3f c0       	rjmp	.+126    	; 0x1664 <app+0xb2e>
	else if (__tmp > 65535)
    15e6:	6f 81       	ldd	r22, Y+7	; 0x07
    15e8:	78 85       	ldd	r23, Y+8	; 0x08
    15ea:	89 85       	ldd	r24, Y+9	; 0x09
    15ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ee:	20 e0       	ldi	r18, 0x00	; 0
    15f0:	3f ef       	ldi	r19, 0xFF	; 255
    15f2:	4f e7       	ldi	r20, 0x7F	; 127
    15f4:	57 e4       	ldi	r21, 0x47	; 71
    15f6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    15fa:	18 16       	cp	r1, r24
    15fc:	4c f5       	brge	.+82     	; 0x1650 <app+0xb1a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1600:	7c 85       	ldd	r23, Y+12	; 0x0c
    1602:	8d 85       	ldd	r24, Y+13	; 0x0d
    1604:	9e 85       	ldd	r25, Y+14	; 0x0e
    1606:	20 e0       	ldi	r18, 0x00	; 0
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	40 e2       	ldi	r20, 0x20	; 32
    160c:	51 e4       	ldi	r21, 0x41	; 65
    160e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1612:	dc 01       	movw	r26, r24
    1614:	cb 01       	movw	r24, r22
    1616:	bc 01       	movw	r22, r24
    1618:	cd 01       	movw	r24, r26
    161a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    161e:	dc 01       	movw	r26, r24
    1620:	cb 01       	movw	r24, r22
    1622:	9e 83       	std	Y+6, r25	; 0x06
    1624:	8d 83       	std	Y+5, r24	; 0x05
    1626:	0f c0       	rjmp	.+30     	; 0x1646 <app+0xb10>
    1628:	89 e1       	ldi	r24, 0x19	; 25
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	9c 83       	std	Y+4, r25	; 0x04
    162e:	8b 83       	std	Y+3, r24	; 0x03
    1630:	8b 81       	ldd	r24, Y+3	; 0x03
    1632:	9c 81       	ldd	r25, Y+4	; 0x04
    1634:	01 97       	sbiw	r24, 0x01	; 1
    1636:	f1 f7       	brne	.-4      	; 0x1634 <app+0xafe>
    1638:	9c 83       	std	Y+4, r25	; 0x04
    163a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    163c:	8d 81       	ldd	r24, Y+5	; 0x05
    163e:	9e 81       	ldd	r25, Y+6	; 0x06
    1640:	01 97       	sbiw	r24, 0x01	; 1
    1642:	9e 83       	std	Y+6, r25	; 0x06
    1644:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1646:	8d 81       	ldd	r24, Y+5	; 0x05
    1648:	9e 81       	ldd	r25, Y+6	; 0x06
    164a:	00 97       	sbiw	r24, 0x00	; 0
    164c:	69 f7       	brne	.-38     	; 0x1628 <app+0xaf2>
    164e:	14 c0       	rjmp	.+40     	; 0x1678 <app+0xb42>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1650:	6f 81       	ldd	r22, Y+7	; 0x07
    1652:	78 85       	ldd	r23, Y+8	; 0x08
    1654:	89 85       	ldd	r24, Y+9	; 0x09
    1656:	9a 85       	ldd	r25, Y+10	; 0x0a
    1658:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    165c:	dc 01       	movw	r26, r24
    165e:	cb 01       	movw	r24, r22
    1660:	9e 83       	std	Y+6, r25	; 0x06
    1662:	8d 83       	std	Y+5, r24	; 0x05
    1664:	8d 81       	ldd	r24, Y+5	; 0x05
    1666:	9e 81       	ldd	r25, Y+6	; 0x06
    1668:	9a 83       	std	Y+2, r25	; 0x02
    166a:	89 83       	std	Y+1, r24	; 0x01
    166c:	89 81       	ldd	r24, Y+1	; 0x01
    166e:	9a 81       	ldd	r25, Y+2	; 0x02
    1670:	01 97       	sbiw	r24, 0x01	; 1
    1672:	f1 f7       	brne	.-4      	; 0x1670 <app+0xb3a>
    1674:	9a 83       	std	Y+2, r25	; 0x02
    1676:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(600);
	LCD_enuClear();
    1678:	0e 94 46 19 	call	0x328c	; 0x328c <LCD_enuClear>

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int operation=0;
    167c:	fe 01       	movw	r30, r28
    167e:	e2 58       	subi	r30, 0x82	; 130
    1680:	ff 4f       	sbci	r31, 0xFF	; 255
    1682:	11 82       	std	Z+1, r1	; 0x01
    1684:	10 82       	st	Z, r1
u8 kpVal;
u8 first_num_arr[8];
u8 second_num_arr[8];
u8 count1=0;
    1686:	fe 01       	movw	r30, r28
    1688:	e4 58       	subi	r30, 0x84	; 132
    168a:	ff 4f       	sbci	r31, 0xFF	; 255
    168c:	10 82       	st	Z, r1
u8 count2=0;
    168e:	fe 01       	movw	r30, r28
    1690:	e5 58       	subi	r30, 0x85	; 133
    1692:	ff 4f       	sbci	r31, 0xFF	; 255
    1694:	10 82       	st	Z, r1
u8 ONflage=0;
    1696:	fe 01       	movw	r30, r28
    1698:	e6 58       	subi	r30, 0x86	; 134
    169a:	ff 4f       	sbci	r31, 0xFF	; 255
    169c:	10 82       	st	Z, r1
    169e:	31 c1       	rjmp	.+610    	; 0x1902 <app+0xdcc>
//working
while(flag){
	int operation=0;
    16a0:	fe 01       	movw	r30, r28
    16a2:	e8 58       	subi	r30, 0x88	; 136
    16a4:	ff 4f       	sbci	r31, 0xFF	; 255
    16a6:	11 82       	std	Z+1, r1	; 0x01
    16a8:	10 82       	st	Z, r1
	u8 kpVal;
	u8 first_num_arr[8];
	u8 second_num_arr[8];
	u8 count1=0;
    16aa:	fe 01       	movw	r30, r28
    16ac:	ea 58       	subi	r30, 0x8A	; 138
    16ae:	ff 4f       	sbci	r31, 0xFF	; 255
    16b0:	10 82       	st	Z, r1
	u8 count2=0;
    16b2:	fe 01       	movw	r30, r28
    16b4:	eb 58       	subi	r30, 0x8B	; 139
    16b6:	ff 4f       	sbci	r31, 0xFF	; 255
    16b8:	10 82       	st	Z, r1
	u8 ONflage=0;
    16ba:	fe 01       	movw	r30, r28
    16bc:	ec 58       	subi	r30, 0x8C	; 140
    16be:	ff 4f       	sbci	r31, 0xFF	; 255
    16c0:	10 82       	st	Z, r1
	u8 n1eql=0;
    16c2:	fe 01       	movw	r30, r28
    16c4:	ed 58       	subi	r30, 0x8D	; 141
    16c6:	ff 4f       	sbci	r31, 0xFF	; 255
    16c8:	10 82       	st	Z, r1
	// taking the first number
while(1){
do{
	kpVal=KEYPAD_enuGetpressedKey();
    16ca:	0e 94 a5 12 	call	0x254a	; 0x254a <KEYPAD_enuGetpressedKey>
    16ce:	fe 01       	movw	r30, r28
    16d0:	e9 58       	subi	r30, 0x89	; 137
    16d2:	ff 4f       	sbci	r31, 0xFF	; 255
    16d4:	80 83       	st	Z, r24
}while(kpVal== KP_NO_PRESSED_KEY);
    16d6:	fe 01       	movw	r30, r28
    16d8:	e9 58       	subi	r30, 0x89	; 137
    16da:	ff 4f       	sbci	r31, 0xFF	; 255
    16dc:	80 81       	ld	r24, Z
    16de:	83 34       	cpi	r24, 0x43	; 67
    16e0:	a1 f3       	breq	.-24     	; 0x16ca <app+0xb94>

if((kpVal=='-')|| (kpVal=='+')|| (kpVal=='%')||( kpVal=='x'))
    16e2:	fe 01       	movw	r30, r28
    16e4:	e9 58       	subi	r30, 0x89	; 137
    16e6:	ff 4f       	sbci	r31, 0xFF	; 255
    16e8:	80 81       	ld	r24, Z
    16ea:	8d 32       	cpi	r24, 0x2D	; 45
    16ec:	91 f0       	breq	.+36     	; 0x1712 <app+0xbdc>
    16ee:	fe 01       	movw	r30, r28
    16f0:	e9 58       	subi	r30, 0x89	; 137
    16f2:	ff 4f       	sbci	r31, 0xFF	; 255
    16f4:	80 81       	ld	r24, Z
    16f6:	8b 32       	cpi	r24, 0x2B	; 43
    16f8:	61 f0       	breq	.+24     	; 0x1712 <app+0xbdc>
    16fa:	fe 01       	movw	r30, r28
    16fc:	e9 58       	subi	r30, 0x89	; 137
    16fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1700:	80 81       	ld	r24, Z
    1702:	85 32       	cpi	r24, 0x25	; 37
    1704:	31 f0       	breq	.+12     	; 0x1712 <app+0xbdc>
    1706:	fe 01       	movw	r30, r28
    1708:	e9 58       	subi	r30, 0x89	; 137
    170a:	ff 4f       	sbci	r31, 0xFF	; 255
    170c:	80 81       	ld	r24, Z
    170e:	88 37       	cpi	r24, 0x78	; 120
    1710:	91 f4       	brne	.+36     	; 0x1736 <app+0xc00>
{
	operation=kpVal;
    1712:	de 01       	movw	r26, r28
    1714:	a8 58       	subi	r26, 0x88	; 136
    1716:	bf 4f       	sbci	r27, 0xFF	; 255
    1718:	fe 01       	movw	r30, r28
    171a:	e9 58       	subi	r30, 0x89	; 137
    171c:	ff 4f       	sbci	r31, 0xFF	; 255
    171e:	80 81       	ld	r24, Z
    1720:	88 2f       	mov	r24, r24
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	8d 93       	st	X+, r24
    1726:	9c 93       	st	X, r25
	LCD_enuDisplayChar(kpVal);
    1728:	fe 01       	movw	r30, r28
    172a:	e9 58       	subi	r30, 0x89	; 137
    172c:	ff 4f       	sbci	r31, 0xFF	; 255
    172e:	80 81       	ld	r24, Z
    1730:	0e 94 7d 15 	call	0x2afa	; 0x2afa <LCD_enuDisplayChar>
    1734:	d9 c0       	rjmp	.+434    	; 0x18e8 <app+0xdb2>
	break;
}
else if(kpVal=='=')
    1736:	fe 01       	movw	r30, r28
    1738:	e9 58       	subi	r30, 0x89	; 137
    173a:	ff 4f       	sbci	r31, 0xFF	; 255
    173c:	80 81       	ld	r24, Z
    173e:	8d 33       	cpi	r24, 0x3D	; 61
    1740:	09 f0       	breq	.+2      	; 0x1744 <app+0xc0e>
    1742:	40 c0       	rjmp	.+128    	; 0x17c4 <app+0xc8e>
{
	for(int i=0;i<count1;i++)
    1744:	fe 01       	movw	r30, r28
    1746:	ef 58       	subi	r30, 0x8F	; 143
    1748:	ff 4f       	sbci	r31, 0xFF	; 255
    174a:	11 82       	std	Z+1, r1	; 0x01
    174c:	10 82       	st	Z, r1
    174e:	26 c0       	rjmp	.+76     	; 0x179c <app+0xc66>
	{
		LCD_enuDisplayNumPOS(first_num_arr[i],2,8+i);
    1750:	fe 01       	movw	r30, r28
    1752:	ef 58       	subi	r30, 0x8F	; 143
    1754:	ff 4f       	sbci	r31, 0xFF	; 255
    1756:	20 81       	ld	r18, Z
    1758:	31 81       	ldd	r19, Z+1	; 0x01
    175a:	ce 01       	movw	r24, r28
    175c:	88 54       	subi	r24, 0x48	; 72
    175e:	9f 4f       	sbci	r25, 0xFF	; 255
    1760:	fc 01       	movw	r30, r24
    1762:	e2 0f       	add	r30, r18
    1764:	f3 1f       	adc	r31, r19
    1766:	80 81       	ld	r24, Z
    1768:	88 2f       	mov	r24, r24
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	a0 e0       	ldi	r26, 0x00	; 0
    176e:	b0 e0       	ldi	r27, 0x00	; 0
    1770:	fe 01       	movw	r30, r28
    1772:	ef 58       	subi	r30, 0x8F	; 143
    1774:	ff 4f       	sbci	r31, 0xFF	; 255
    1776:	20 81       	ld	r18, Z
    1778:	28 5f       	subi	r18, 0xF8	; 248
    177a:	bc 01       	movw	r22, r24
    177c:	cd 01       	movw	r24, r26
    177e:	42 e0       	ldi	r20, 0x02	; 2
    1780:	0e 94 89 19 	call	0x3312	; 0x3312 <LCD_enuDisplayNumPOS>
	LCD_enuDisplayChar(kpVal);
	break;
}
else if(kpVal=='=')
{
	for(int i=0;i<count1;i++)
    1784:	de 01       	movw	r26, r28
    1786:	af 58       	subi	r26, 0x8F	; 143
    1788:	bf 4f       	sbci	r27, 0xFF	; 255
    178a:	fe 01       	movw	r30, r28
    178c:	ef 58       	subi	r30, 0x8F	; 143
    178e:	ff 4f       	sbci	r31, 0xFF	; 255
    1790:	80 81       	ld	r24, Z
    1792:	91 81       	ldd	r25, Z+1	; 0x01
    1794:	01 96       	adiw	r24, 0x01	; 1
    1796:	11 96       	adiw	r26, 0x01	; 1
    1798:	9c 93       	st	X, r25
    179a:	8e 93       	st	-X, r24
    179c:	fe 01       	movw	r30, r28
    179e:	ea 58       	subi	r30, 0x8A	; 138
    17a0:	ff 4f       	sbci	r31, 0xFF	; 255
    17a2:	80 81       	ld	r24, Z
    17a4:	28 2f       	mov	r18, r24
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	fe 01       	movw	r30, r28
    17aa:	ef 58       	subi	r30, 0x8F	; 143
    17ac:	ff 4f       	sbci	r31, 0xFF	; 255
    17ae:	80 81       	ld	r24, Z
    17b0:	91 81       	ldd	r25, Z+1	; 0x01
    17b2:	82 17       	cp	r24, r18
    17b4:	93 07       	cpc	r25, r19
    17b6:	64 f2       	brlt	.-104    	; 0x1750 <app+0xc1a>
	{
		LCD_enuDisplayNumPOS(first_num_arr[i],2,8+i);

	}
	n1eql=1;
    17b8:	fe 01       	movw	r30, r28
    17ba:	ed 58       	subi	r30, 0x8D	; 141
    17bc:	ff 4f       	sbci	r31, 0xFF	; 255
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	80 83       	st	Z, r24
    17c2:	92 c0       	rjmp	.+292    	; 0x18e8 <app+0xdb2>
	break;

}
else if(kpVal=='$')
    17c4:	fe 01       	movw	r30, r28
    17c6:	e9 58       	subi	r30, 0x89	; 137
    17c8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ca:	80 81       	ld	r24, Z
    17cc:	84 32       	cpi	r24, 0x24	; 36
    17ce:	41 f4       	brne	.+16     	; 0x17e0 <app+0xcaa>
{
     LCD_enuClear();
    17d0:	0e 94 46 19 	call	0x328c	; 0x328c <LCD_enuClear>
     ONflage=1;
    17d4:	fe 01       	movw	r30, r28
    17d6:	ec 58       	subi	r30, 0x8C	; 140
    17d8:	ff 4f       	sbci	r31, 0xFF	; 255
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	80 83       	st	Z, r24
    17de:	84 c0       	rjmp	.+264    	; 0x18e8 <app+0xdb2>
     break ;
}

first_num_arr[count1++]=kpVal;
    17e0:	fe 01       	movw	r30, r28
    17e2:	ea 58       	subi	r30, 0x8A	; 138
    17e4:	ff 4f       	sbci	r31, 0xFF	; 255
    17e6:	80 81       	ld	r24, Z
    17e8:	28 2f       	mov	r18, r24
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	ce 01       	movw	r24, r28
    17ee:	88 54       	subi	r24, 0x48	; 72
    17f0:	9f 4f       	sbci	r25, 0xFF	; 255
    17f2:	dc 01       	movw	r26, r24
    17f4:	a2 0f       	add	r26, r18
    17f6:	b3 1f       	adc	r27, r19
    17f8:	fe 01       	movw	r30, r28
    17fa:	e9 58       	subi	r30, 0x89	; 137
    17fc:	ff 4f       	sbci	r31, 0xFF	; 255
    17fe:	80 81       	ld	r24, Z
    1800:	8c 93       	st	X, r24
    1802:	de 01       	movw	r26, r28
    1804:	aa 58       	subi	r26, 0x8A	; 138
    1806:	bf 4f       	sbci	r27, 0xFF	; 255
    1808:	fe 01       	movw	r30, r28
    180a:	ea 58       	subi	r30, 0x8A	; 138
    180c:	ff 4f       	sbci	r31, 0xFF	; 255
    180e:	80 81       	ld	r24, Z
    1810:	8f 5f       	subi	r24, 0xFF	; 255
    1812:	8c 93       	st	X, r24
LCD_enuDisplayNum(kpVal);
    1814:	fe 01       	movw	r30, r28
    1816:	e9 58       	subi	r30, 0x89	; 137
    1818:	ff 4f       	sbci	r31, 0xFF	; 255
    181a:	80 81       	ld	r24, Z
    181c:	88 2f       	mov	r24, r24
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	a0 e0       	ldi	r26, 0x00	; 0
    1822:	b0 e0       	ldi	r27, 0x00	; 0
    1824:	bc 01       	movw	r22, r24
    1826:	cd 01       	movw	r24, r26
    1828:	0e 94 9c 18 	call	0x3138	; 0x3138 <LCD_enuDisplayNum>
    182c:	4e cf       	rjmp	.-356    	; 0x16ca <app+0xb94>

while(!ONflage&&!n1eql)
{

	do{
		kpVal=KEYPAD_enuGetpressedKey();
    182e:	0e 94 a5 12 	call	0x254a	; 0x254a <KEYPAD_enuGetpressedKey>
    1832:	fe 01       	movw	r30, r28
    1834:	e9 58       	subi	r30, 0x89	; 137
    1836:	ff 4f       	sbci	r31, 0xFF	; 255
    1838:	80 83       	st	Z, r24
	}while(kpVal== KP_NO_PRESSED_KEY);
    183a:	fe 01       	movw	r30, r28
    183c:	e9 58       	subi	r30, 0x89	; 137
    183e:	ff 4f       	sbci	r31, 0xFF	; 255
    1840:	80 81       	ld	r24, Z
    1842:	83 34       	cpi	r24, 0x43	; 67
    1844:	a1 f3       	breq	.-24     	; 0x182e <app+0xcf8>
	if(kpVal=='=')
    1846:	fe 01       	movw	r30, r28
    1848:	e9 58       	subi	r30, 0x89	; 137
    184a:	ff 4f       	sbci	r31, 0xFF	; 255
    184c:	80 81       	ld	r24, Z
    184e:	8d 33       	cpi	r24, 0x3D	; 61
    1850:	b9 f4       	brne	.+46     	; 0x1880 <app+0xd4a>
	{
		arrToNum(first_num_arr,second_num_arr,count1,count2,operation);
    1852:	fe 01       	movw	r30, r28
    1854:	e8 58       	subi	r30, 0x88	; 136
    1856:	ff 4f       	sbci	r31, 0xFF	; 255
    1858:	50 81       	ld	r21, Z
    185a:	ce 01       	movw	r24, r28
    185c:	88 54       	subi	r24, 0x48	; 72
    185e:	9f 4f       	sbci	r25, 0xFF	; 255
    1860:	9e 01       	movw	r18, r28
    1862:	20 54       	subi	r18, 0x40	; 64
    1864:	3f 4f       	sbci	r19, 0xFF	; 255
    1866:	fe 01       	movw	r30, r28
    1868:	ea 58       	subi	r30, 0x8A	; 138
    186a:	ff 4f       	sbci	r31, 0xFF	; 255
    186c:	de 01       	movw	r26, r28
    186e:	ab 58       	subi	r26, 0x8B	; 139
    1870:	bf 4f       	sbci	r27, 0xFF	; 255
    1872:	b9 01       	movw	r22, r18
    1874:	40 81       	ld	r20, Z
    1876:	2c 91       	ld	r18, X
    1878:	05 2f       	mov	r16, r21
    187a:	0e 94 9c 0c 	call	0x1938	; 0x1938 <arrToNum>
    187e:	41 c0       	rjmp	.+130    	; 0x1902 <app+0xdcc>
		break;
	}

	else if(kpVal=='$')
    1880:	fe 01       	movw	r30, r28
    1882:	e9 58       	subi	r30, 0x89	; 137
    1884:	ff 4f       	sbci	r31, 0xFF	; 255
    1886:	80 81       	ld	r24, Z
    1888:	84 32       	cpi	r24, 0x24	; 36
    188a:	41 f4       	brne	.+16     	; 0x189c <app+0xd66>
	{
	     LCD_enuClear();
    188c:	0e 94 46 19 	call	0x328c	; 0x328c <LCD_enuClear>
	     ONflage=1;
    1890:	fe 01       	movw	r30, r28
    1892:	ec 58       	subi	r30, 0x8C	; 140
    1894:	ff 4f       	sbci	r31, 0xFF	; 255
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	80 83       	st	Z, r24
    189a:	33 c0       	rjmp	.+102    	; 0x1902 <app+0xdcc>
	     break;
	}

	second_num_arr[count2++]=kpVal;
    189c:	fe 01       	movw	r30, r28
    189e:	eb 58       	subi	r30, 0x8B	; 139
    18a0:	ff 4f       	sbci	r31, 0xFF	; 255
    18a2:	80 81       	ld	r24, Z
    18a4:	28 2f       	mov	r18, r24
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	ce 01       	movw	r24, r28
    18aa:	80 54       	subi	r24, 0x40	; 64
    18ac:	9f 4f       	sbci	r25, 0xFF	; 255
    18ae:	dc 01       	movw	r26, r24
    18b0:	a2 0f       	add	r26, r18
    18b2:	b3 1f       	adc	r27, r19
    18b4:	fe 01       	movw	r30, r28
    18b6:	e9 58       	subi	r30, 0x89	; 137
    18b8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ba:	80 81       	ld	r24, Z
    18bc:	8c 93       	st	X, r24
    18be:	de 01       	movw	r26, r28
    18c0:	ab 58       	subi	r26, 0x8B	; 139
    18c2:	bf 4f       	sbci	r27, 0xFF	; 255
    18c4:	fe 01       	movw	r30, r28
    18c6:	eb 58       	subi	r30, 0x8B	; 139
    18c8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ca:	80 81       	ld	r24, Z
    18cc:	8f 5f       	subi	r24, 0xFF	; 255
    18ce:	8c 93       	st	X, r24
	LCD_enuDisplayNum(kpVal);
    18d0:	fe 01       	movw	r30, r28
    18d2:	e9 58       	subi	r30, 0x89	; 137
    18d4:	ff 4f       	sbci	r31, 0xFF	; 255
    18d6:	80 81       	ld	r24, Z
    18d8:	88 2f       	mov	r24, r24
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	a0 e0       	ldi	r26, 0x00	; 0
    18de:	b0 e0       	ldi	r27, 0x00	; 0
    18e0:	bc 01       	movw	r22, r24
    18e2:	cd 01       	movw	r24, r26
    18e4:	0e 94 9c 18 	call	0x3138	; 0x3138 <LCD_enuDisplayNum>

}

// taking the second number

while(!ONflage&&!n1eql)
    18e8:	fe 01       	movw	r30, r28
    18ea:	ec 58       	subi	r30, 0x8C	; 140
    18ec:	ff 4f       	sbci	r31, 0xFF	; 255
    18ee:	80 81       	ld	r24, Z
    18f0:	88 23       	and	r24, r24
    18f2:	39 f4       	brne	.+14     	; 0x1902 <app+0xdcc>
    18f4:	fe 01       	movw	r30, r28
    18f6:	ed 58       	subi	r30, 0x8D	; 141
    18f8:	ff 4f       	sbci	r31, 0xFF	; 255
    18fa:	80 81       	ld	r24, Z
    18fc:	88 23       	and	r24, r24
    18fe:	09 f4       	brne	.+2      	; 0x1902 <app+0xdcc>
    1900:	96 cf       	rjmp	.-212    	; 0x182e <app+0xcf8>
u8 second_num_arr[8];
u8 count1=0;
u8 count2=0;
u8 ONflage=0;
//working
while(flag){
    1902:	fe 01       	movw	r30, r28
    1904:	ed 57       	subi	r30, 0x7D	; 125
    1906:	ff 4f       	sbci	r31, 0xFF	; 255
    1908:	80 81       	ld	r24, Z
    190a:	91 81       	ldd	r25, Z+1	; 0x01
    190c:	00 97       	sbiw	r24, 0x00	; 0
    190e:	09 f0       	breq	.+2      	; 0x1912 <app+0xddc>
    1910:	c7 ce       	rjmp	.-626    	; 0x16a0 <app+0xb6a>
    1912:	06 c0       	rjmp	.+12     	; 0x1920 <app+0xdea>

}
}
else
{
	LCD_enuClear();
    1914:	0e 94 46 19 	call	0x328c	; 0x328c <LCD_enuClear>
	LCD_enuDisplayString("WRONG PASSWORD");
    1918:	8f e8       	ldi	r24, 0x8F	; 143
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <LCD_enuDisplayString>





}
    1920:	c9 53       	subi	r28, 0x39	; 57
    1922:	df 4f       	sbci	r29, 0xFF	; 255
    1924:	0f b6       	in	r0, 0x3f	; 63
    1926:	f8 94       	cli
    1928:	de bf       	out	0x3e, r29	; 62
    192a:	0f be       	out	0x3f, r0	; 63
    192c:	cd bf       	out	0x3d, r28	; 61
    192e:	cf 91       	pop	r28
    1930:	df 91       	pop	r29
    1932:	1f 91       	pop	r17
    1934:	0f 91       	pop	r16
    1936:	08 95       	ret

00001938 <arrToNum>:
void arrToNum(u8*ptr1,u8*ptr2,u8 n1,u8 n2,u8 operation)
{
    1938:	0f 93       	push	r16
    193a:	df 93       	push	r29
    193c:	cf 93       	push	r28
    193e:	cd b7       	in	r28, 0x3d	; 61
    1940:	de b7       	in	r29, 0x3e	; 62
    1942:	a1 97       	sbiw	r28, 0x21	; 33
    1944:	0f b6       	in	r0, 0x3f	; 63
    1946:	f8 94       	cli
    1948:	de bf       	out	0x3e, r29	; 62
    194a:	0f be       	out	0x3f, r0	; 63
    194c:	cd bf       	out	0x3d, r28	; 61
    194e:	9a 8f       	std	Y+26, r25	; 0x1a
    1950:	89 8f       	std	Y+25, r24	; 0x19
    1952:	7c 8f       	std	Y+28, r23	; 0x1c
    1954:	6b 8f       	std	Y+27, r22	; 0x1b
    1956:	4d 8f       	std	Y+29, r20	; 0x1d
    1958:	2e 8f       	std	Y+30, r18	; 0x1e
    195a:	0f 8f       	std	Y+31, r16	; 0x1f
	int num1=ptr1[0];
    195c:	e9 8d       	ldd	r30, Y+25	; 0x19
    195e:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1960:	80 81       	ld	r24, Z
    1962:	88 2f       	mov	r24, r24
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	98 8f       	std	Y+24, r25	; 0x18
    1968:	8f 8b       	std	Y+23, r24	; 0x17
    int num2=ptr2[0];
    196a:	eb 8d       	ldd	r30, Y+27	; 0x1b
    196c:	fc 8d       	ldd	r31, Y+28	; 0x1c
    196e:	80 81       	ld	r24, Z
    1970:	88 2f       	mov	r24, r24
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	9e 8b       	std	Y+22, r25	; 0x16
    1976:	8d 8b       	std	Y+21, r24	; 0x15

	for(int i=1;i<n1;i++)
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	9c 83       	std	Y+4, r25	; 0x04
    197e:	8b 83       	std	Y+3, r24	; 0x03
    1980:	20 c0       	rjmp	.+64     	; 0x19c2 <arrToNum+0x8a>
	{
		num1=num1 * 10 + ptr1[i];
    1982:	8f 89       	ldd	r24, Y+23	; 0x17
    1984:	98 8d       	ldd	r25, Y+24	; 0x18
    1986:	9c 01       	movw	r18, r24
    1988:	22 0f       	add	r18, r18
    198a:	33 1f       	adc	r19, r19
    198c:	c9 01       	movw	r24, r18
    198e:	88 0f       	add	r24, r24
    1990:	99 1f       	adc	r25, r25
    1992:	88 0f       	add	r24, r24
    1994:	99 1f       	adc	r25, r25
    1996:	a9 01       	movw	r20, r18
    1998:	48 0f       	add	r20, r24
    199a:	59 1f       	adc	r21, r25
    199c:	2b 81       	ldd	r18, Y+3	; 0x03
    199e:	3c 81       	ldd	r19, Y+4	; 0x04
    19a0:	89 8d       	ldd	r24, Y+25	; 0x19
    19a2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    19a4:	fc 01       	movw	r30, r24
    19a6:	e2 0f       	add	r30, r18
    19a8:	f3 1f       	adc	r31, r19
    19aa:	80 81       	ld	r24, Z
    19ac:	88 2f       	mov	r24, r24
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	84 0f       	add	r24, r20
    19b2:	95 1f       	adc	r25, r21
    19b4:	98 8f       	std	Y+24, r25	; 0x18
    19b6:	8f 8b       	std	Y+23, r24	; 0x17
void arrToNum(u8*ptr1,u8*ptr2,u8 n1,u8 n2,u8 operation)
{
	int num1=ptr1[0];
    int num2=ptr2[0];

	for(int i=1;i<n1;i++)
    19b8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ba:	9c 81       	ldd	r25, Y+4	; 0x04
    19bc:	01 96       	adiw	r24, 0x01	; 1
    19be:	9c 83       	std	Y+4, r25	; 0x04
    19c0:	8b 83       	std	Y+3, r24	; 0x03
    19c2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19c4:	28 2f       	mov	r18, r24
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ca:	9c 81       	ldd	r25, Y+4	; 0x04
    19cc:	82 17       	cp	r24, r18
    19ce:	93 07       	cpc	r25, r19
    19d0:	c4 f2       	brlt	.-80     	; 0x1982 <arrToNum+0x4a>
	{
		num1=num1 * 10 + ptr1[i];
	}


	for(int i=1;i<n2;i++)
    19d2:	81 e0       	ldi	r24, 0x01	; 1
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	9a 83       	std	Y+2, r25	; 0x02
    19d8:	89 83       	std	Y+1, r24	; 0x01
    19da:	20 c0       	rjmp	.+64     	; 0x1a1c <arrToNum+0xe4>
		{
			num2=num2 * 10 +ptr2[i];
    19dc:	8d 89       	ldd	r24, Y+21	; 0x15
    19de:	9e 89       	ldd	r25, Y+22	; 0x16
    19e0:	9c 01       	movw	r18, r24
    19e2:	22 0f       	add	r18, r18
    19e4:	33 1f       	adc	r19, r19
    19e6:	c9 01       	movw	r24, r18
    19e8:	88 0f       	add	r24, r24
    19ea:	99 1f       	adc	r25, r25
    19ec:	88 0f       	add	r24, r24
    19ee:	99 1f       	adc	r25, r25
    19f0:	a9 01       	movw	r20, r18
    19f2:	48 0f       	add	r20, r24
    19f4:	59 1f       	adc	r21, r25
    19f6:	29 81       	ldd	r18, Y+1	; 0x01
    19f8:	3a 81       	ldd	r19, Y+2	; 0x02
    19fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19fe:	fc 01       	movw	r30, r24
    1a00:	e2 0f       	add	r30, r18
    1a02:	f3 1f       	adc	r31, r19
    1a04:	80 81       	ld	r24, Z
    1a06:	88 2f       	mov	r24, r24
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	84 0f       	add	r24, r20
    1a0c:	95 1f       	adc	r25, r21
    1a0e:	9e 8b       	std	Y+22, r25	; 0x16
    1a10:	8d 8b       	std	Y+21, r24	; 0x15
	{
		num1=num1 * 10 + ptr1[i];
	}


	for(int i=1;i<n2;i++)
    1a12:	89 81       	ldd	r24, Y+1	; 0x01
    1a14:	9a 81       	ldd	r25, Y+2	; 0x02
    1a16:	01 96       	adiw	r24, 0x01	; 1
    1a18:	9a 83       	std	Y+2, r25	; 0x02
    1a1a:	89 83       	std	Y+1, r24	; 0x01
    1a1c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a1e:	28 2f       	mov	r18, r24
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	89 81       	ldd	r24, Y+1	; 0x01
    1a24:	9a 81       	ldd	r25, Y+2	; 0x02
    1a26:	82 17       	cp	r24, r18
    1a28:	93 07       	cpc	r25, r19
    1a2a:	c4 f2       	brlt	.-80     	; 0x19dc <arrToNum+0xa4>
	u32 sum , sub , mul , div ;

	//LCD_enuDisplayNumPOS(num1,2,2);
	//LCD_enuDisplayNumPOS(num2,2,6);

	switch(operation)
    1a2c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a2e:	28 2f       	mov	r18, r24
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	39 a3       	std	Y+33, r19	; 0x21
    1a34:	28 a3       	std	Y+32, r18	; 0x20
    1a36:	48 a1       	ldd	r20, Y+32	; 0x20
    1a38:	59 a1       	ldd	r21, Y+33	; 0x21
    1a3a:	4d 32       	cpi	r20, 0x2D	; 45
    1a3c:	51 05       	cpc	r21, r1
    1a3e:	89 f1       	breq	.+98     	; 0x1aa2 <arrToNum+0x16a>
    1a40:	88 a1       	ldd	r24, Y+32	; 0x20
    1a42:	99 a1       	ldd	r25, Y+33	; 0x21
    1a44:	8e 32       	cpi	r24, 0x2E	; 46
    1a46:	91 05       	cpc	r25, r1
    1a48:	64 f4       	brge	.+24     	; 0x1a62 <arrToNum+0x12a>
    1a4a:	28 a1       	ldd	r18, Y+32	; 0x20
    1a4c:	39 a1       	ldd	r19, Y+33	; 0x21
    1a4e:	25 32       	cpi	r18, 0x25	; 37
    1a50:	31 05       	cpc	r19, r1
    1a52:	09 f4       	brne	.+2      	; 0x1a56 <arrToNum+0x11e>
    1a54:	87 c0       	rjmp	.+270    	; 0x1b64 <arrToNum+0x22c>
    1a56:	48 a1       	ldd	r20, Y+32	; 0x20
    1a58:	59 a1       	ldd	r21, Y+33	; 0x21
    1a5a:	4b 32       	cpi	r20, 0x2B	; 43
    1a5c:	51 05       	cpc	r21, r1
    1a5e:	41 f0       	breq	.+16     	; 0x1a70 <arrToNum+0x138>
    1a60:	a8 c0       	rjmp	.+336    	; 0x1bb2 <arrToNum+0x27a>
    1a62:	88 a1       	ldd	r24, Y+32	; 0x20
    1a64:	99 a1       	ldd	r25, Y+33	; 0x21
    1a66:	88 37       	cpi	r24, 0x78	; 120
    1a68:	91 05       	cpc	r25, r1
    1a6a:	09 f4       	brne	.+2      	; 0x1a6e <arrToNum+0x136>
    1a6c:	5c c0       	rjmp	.+184    	; 0x1b26 <arrToNum+0x1ee>
    1a6e:	a1 c0       	rjmp	.+322    	; 0x1bb2 <arrToNum+0x27a>
	{
	    case '+':
	    	      {
	    	    	  sum=num1+num2;
    1a70:	2f 89       	ldd	r18, Y+23	; 0x17
    1a72:	38 8d       	ldd	r19, Y+24	; 0x18
    1a74:	8d 89       	ldd	r24, Y+21	; 0x15
    1a76:	9e 89       	ldd	r25, Y+22	; 0x16
    1a78:	82 0f       	add	r24, r18
    1a7a:	93 1f       	adc	r25, r19
    1a7c:	aa 27       	eor	r26, r26
    1a7e:	97 fd       	sbrc	r25, 7
    1a80:	a0 95       	com	r26
    1a82:	ba 2f       	mov	r27, r26
    1a84:	89 8b       	std	Y+17, r24	; 0x11
    1a86:	9a 8b       	std	Y+18, r25	; 0x12
    1a88:	ab 8b       	std	Y+19, r26	; 0x13
    1a8a:	bc 8b       	std	Y+20, r27	; 0x14
	    	    	  LCD_enuDisplayNumPOS(sum,2,12);
    1a8c:	89 89       	ldd	r24, Y+17	; 0x11
    1a8e:	9a 89       	ldd	r25, Y+18	; 0x12
    1a90:	ab 89       	ldd	r26, Y+19	; 0x13
    1a92:	bc 89       	ldd	r27, Y+20	; 0x14
    1a94:	bc 01       	movw	r22, r24
    1a96:	cd 01       	movw	r24, r26
    1a98:	42 e0       	ldi	r20, 0x02	; 2
    1a9a:	2c e0       	ldi	r18, 0x0C	; 12
    1a9c:	0e 94 89 19 	call	0x3312	; 0x3312 <LCD_enuDisplayNumPOS>
    1aa0:	88 c0       	rjmp	.+272    	; 0x1bb2 <arrToNum+0x27a>
	    	    	  break;
	    	      }
	    case '-':{   if(num1<num2){
    1aa2:	2f 89       	ldd	r18, Y+23	; 0x17
    1aa4:	38 8d       	ldd	r19, Y+24	; 0x18
    1aa6:	8d 89       	ldd	r24, Y+21	; 0x15
    1aa8:	9e 89       	ldd	r25, Y+22	; 0x16
    1aaa:	28 17       	cp	r18, r24
    1aac:	39 07       	cpc	r19, r25
    1aae:	04 f5       	brge	.+64     	; 0x1af0 <arrToNum+0x1b8>
                     sub=num2-num1;
    1ab0:	2d 89       	ldd	r18, Y+21	; 0x15
    1ab2:	3e 89       	ldd	r19, Y+22	; 0x16
    1ab4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ab6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ab8:	a9 01       	movw	r20, r18
    1aba:	48 1b       	sub	r20, r24
    1abc:	59 0b       	sbc	r21, r25
    1abe:	ca 01       	movw	r24, r20
    1ac0:	aa 27       	eor	r26, r26
    1ac2:	97 fd       	sbrc	r25, 7
    1ac4:	a0 95       	com	r26
    1ac6:	ba 2f       	mov	r27, r26
    1ac8:	8d 87       	std	Y+13, r24	; 0x0d
    1aca:	9e 87       	std	Y+14, r25	; 0x0e
    1acc:	af 87       	std	Y+15, r26	; 0x0f
    1ace:	b8 8b       	std	Y+16, r27	; 0x10
                     LCD_enuDisplayCharPOS('-',2,11);
    1ad0:	8d e2       	ldi	r24, 0x2D	; 45
    1ad2:	62 e0       	ldi	r22, 0x02	; 2
    1ad4:	4b e0       	ldi	r20, 0x0B	; 11
    1ad6:	0e 94 58 19 	call	0x32b0	; 0x32b0 <LCD_enuDisplayCharPOS>
                     LCD_enuDisplayNumPOS(sub,2,12);
    1ada:	8d 85       	ldd	r24, Y+13	; 0x0d
    1adc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ade:	af 85       	ldd	r26, Y+15	; 0x0f
    1ae0:	b8 89       	ldd	r27, Y+16	; 0x10
    1ae2:	bc 01       	movw	r22, r24
    1ae4:	cd 01       	movw	r24, r26
    1ae6:	42 e0       	ldi	r20, 0x02	; 2
    1ae8:	2c e0       	ldi	r18, 0x0C	; 12
    1aea:	0e 94 89 19 	call	0x3312	; 0x3312 <LCD_enuDisplayNumPOS>
    1aee:	61 c0       	rjmp	.+194    	; 0x1bb2 <arrToNum+0x27a>
                     break;
	                                  }
	             	sub=num1-num2;
    1af0:	2f 89       	ldd	r18, Y+23	; 0x17
    1af2:	38 8d       	ldd	r19, Y+24	; 0x18
    1af4:	8d 89       	ldd	r24, Y+21	; 0x15
    1af6:	9e 89       	ldd	r25, Y+22	; 0x16
    1af8:	a9 01       	movw	r20, r18
    1afa:	48 1b       	sub	r20, r24
    1afc:	59 0b       	sbc	r21, r25
    1afe:	ca 01       	movw	r24, r20
    1b00:	aa 27       	eor	r26, r26
    1b02:	97 fd       	sbrc	r25, 7
    1b04:	a0 95       	com	r26
    1b06:	ba 2f       	mov	r27, r26
    1b08:	8d 87       	std	Y+13, r24	; 0x0d
    1b0a:	9e 87       	std	Y+14, r25	; 0x0e
    1b0c:	af 87       	std	Y+15, r26	; 0x0f
    1b0e:	b8 8b       	std	Y+16, r27	; 0x10
	    	        LCD_enuDisplayNumPOS(sub,2,12);
    1b10:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b12:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b14:	af 85       	ldd	r26, Y+15	; 0x0f
    1b16:	b8 89       	ldd	r27, Y+16	; 0x10
    1b18:	bc 01       	movw	r22, r24
    1b1a:	cd 01       	movw	r24, r26
    1b1c:	42 e0       	ldi	r20, 0x02	; 2
    1b1e:	2c e0       	ldi	r18, 0x0C	; 12
    1b20:	0e 94 89 19 	call	0x3312	; 0x3312 <LCD_enuDisplayNumPOS>
    1b24:	46 c0       	rjmp	.+140    	; 0x1bb2 <arrToNum+0x27a>
	    	        break;
	    }
	    case 'x': {
	            	mul=num1*num2;
    1b26:	2f 89       	ldd	r18, Y+23	; 0x17
    1b28:	38 8d       	ldd	r19, Y+24	; 0x18
    1b2a:	8d 89       	ldd	r24, Y+21	; 0x15
    1b2c:	9e 89       	ldd	r25, Y+22	; 0x16
    1b2e:	ac 01       	movw	r20, r24
    1b30:	24 9f       	mul	r18, r20
    1b32:	c0 01       	movw	r24, r0
    1b34:	25 9f       	mul	r18, r21
    1b36:	90 0d       	add	r25, r0
    1b38:	34 9f       	mul	r19, r20
    1b3a:	90 0d       	add	r25, r0
    1b3c:	11 24       	eor	r1, r1
    1b3e:	aa 27       	eor	r26, r26
    1b40:	97 fd       	sbrc	r25, 7
    1b42:	a0 95       	com	r26
    1b44:	ba 2f       	mov	r27, r26
    1b46:	89 87       	std	Y+9, r24	; 0x09
    1b48:	9a 87       	std	Y+10, r25	; 0x0a
    1b4a:	ab 87       	std	Y+11, r26	; 0x0b
    1b4c:	bc 87       	std	Y+12, r27	; 0x0c
	    	        LCD_enuDisplayNumPOS(mul,2,10);
    1b4e:	89 85       	ldd	r24, Y+9	; 0x09
    1b50:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b52:	ab 85       	ldd	r26, Y+11	; 0x0b
    1b54:	bc 85       	ldd	r27, Y+12	; 0x0c
    1b56:	bc 01       	movw	r22, r24
    1b58:	cd 01       	movw	r24, r26
    1b5a:	42 e0       	ldi	r20, 0x02	; 2
    1b5c:	2a e0       	ldi	r18, 0x0A	; 10
    1b5e:	0e 94 89 19 	call	0x3312	; 0x3312 <LCD_enuDisplayNumPOS>
    1b62:	27 c0       	rjmp	.+78     	; 0x1bb2 <arrToNum+0x27a>
	    	        break;
	    }
	    case '%': { if(num2==0)
    1b64:	8d 89       	ldd	r24, Y+21	; 0x15
    1b66:	9e 89       	ldd	r25, Y+22	; 0x16
    1b68:	00 97       	sbiw	r24, 0x00	; 0
    1b6a:	49 f4       	brne	.+18     	; 0x1b7e <arrToNum+0x246>
	                   {
	    	                 LCD_enuClear();
    1b6c:	0e 94 46 19 	call	0x328c	; 0x328c <LCD_enuClear>
	    	                 LCD_enuDisplayStringPOS("ERROR1",1,3);
    1b70:	8e e9       	ldi	r24, 0x9E	; 158
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	61 e0       	ldi	r22, 0x01	; 1
    1b76:	43 e0       	ldi	r20, 0x03	; 3
    1b78:	0e 94 6f 19 	call	0x32de	; 0x32de <LCD_enuDisplayStringPOS>
    1b7c:	1a c0       	rjmp	.+52     	; 0x1bb2 <arrToNum+0x27a>
	    	                 break;
	                   }

	               div=num1/num2;
    1b7e:	8f 89       	ldd	r24, Y+23	; 0x17
    1b80:	98 8d       	ldd	r25, Y+24	; 0x18
    1b82:	2d 89       	ldd	r18, Y+21	; 0x15
    1b84:	3e 89       	ldd	r19, Y+22	; 0x16
    1b86:	b9 01       	movw	r22, r18
    1b88:	0e 94 b7 19 	call	0x336e	; 0x336e <__divmodhi4>
    1b8c:	cb 01       	movw	r24, r22
    1b8e:	aa 27       	eor	r26, r26
    1b90:	97 fd       	sbrc	r25, 7
    1b92:	a0 95       	com	r26
    1b94:	ba 2f       	mov	r27, r26
    1b96:	8d 83       	std	Y+5, r24	; 0x05
    1b98:	9e 83       	std	Y+6, r25	; 0x06
    1b9a:	af 83       	std	Y+7, r26	; 0x07
    1b9c:	b8 87       	std	Y+8, r27	; 0x08
	    	       LCD_enuDisplayNumPOS(div,2,10);
    1b9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ba2:	af 81       	ldd	r26, Y+7	; 0x07
    1ba4:	b8 85       	ldd	r27, Y+8	; 0x08
    1ba6:	bc 01       	movw	r22, r24
    1ba8:	cd 01       	movw	r24, r26
    1baa:	42 e0       	ldi	r20, 0x02	; 2
    1bac:	2a e0       	ldi	r18, 0x0A	; 10
    1bae:	0e 94 89 19 	call	0x3312	; 0x3312 <LCD_enuDisplayNumPOS>
	    	       break;
	    }
	}


}
    1bb2:	a1 96       	adiw	r28, 0x21	; 33
    1bb4:	0f b6       	in	r0, 0x3f	; 63
    1bb6:	f8 94       	cli
    1bb8:	de bf       	out	0x3e, r29	; 62
    1bba:	0f be       	out	0x3f, r0	; 63
    1bbc:	cd bf       	out	0x3d, r28	; 61
    1bbe:	cf 91       	pop	r28
    1bc0:	df 91       	pop	r29
    1bc2:	0f 91       	pop	r16
    1bc4:	08 95       	ret

00001bc6 <DIO_enuInit>:
#include"DIO_cofig.h"
#include"..\errorState.h"
#include "..\stdTypes.h"


ES_ERROR DIO_enuInit(void){
    1bc6:	df 93       	push	r29
    1bc8:	cf 93       	push	r28
    1bca:	0f 92       	push	r0
    1bcc:	cd b7       	in	r28, 0x3d	; 61
    1bce:	de b7       	in	r29, 0x3e	; 62
ES_ERROR local_enuerrorstate=ES_NOK;
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	89 83       	std	Y+1, r24	; 0x01

DDRA=conc(PA_PIN7_DIR,PA_PIN6_DIR,PA_PIN5_DIR,PA_PIN4_DIR,PA_PIN3_DIR,PA_PIN2_DIR,PA_PIN1_DIR,PA_PIN0_DIR);
    1bd4:	ea e3       	ldi	r30, 0x3A	; 58
    1bd6:	f0 e0       	ldi	r31, 0x00	; 0
    1bd8:	8f ef       	ldi	r24, 0xFF	; 255
    1bda:	80 83       	st	Z, r24
DDRB=conc(PB_PIN7_DIR,PB_PIN6_DIR,PB_PIN5_DIR,PB_PIN4_DIR,PB_PIN3_DIR,PB_PIN2_DIR,PB_PIN1_DIR,PB_PIN0_DIR);
    1bdc:	e7 e3       	ldi	r30, 0x37	; 55
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	8f ef       	ldi	r24, 0xFF	; 255
    1be2:	80 83       	st	Z, r24
DDRC=conc(PC_PIN7_DIR,PC_PIN6_DIR,PC_PIN5_DIR,PC_PIN4_DIR,PC_PIN3_DIR,PC_PIN2_DIR,PC_PIN1_DIR,PC_PIN0_DIR);
    1be4:	e4 e3       	ldi	r30, 0x34	; 52
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	8f e0       	ldi	r24, 0x0F	; 15
    1bea:	80 83       	st	Z, r24
DDRD=conc(PD_PIN7_DIR,PD_PIN6_DIR,PD_PIN5_DIR,PD_PIN4_DIR,PD_PIN3_DIR,PD_PIN2_DIR,PD_PIN1_DIR,PD_PIN0_DIR);
    1bec:	e1 e3       	ldi	r30, 0x31	; 49
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	85 ed       	ldi	r24, 0xD5	; 213
    1bf2:	80 83       	st	Z, r24

PORTA=conc(PA_PIN7_VAL,PA_PIN6_VAL,PA_PIN5_VAL,PA_PIN4_VAL,PA_PIN3_VAL,PA_PIN2_VAL,PA_PIN1_VAL,PA_PIN0_VAL);
    1bf4:	eb e3       	ldi	r30, 0x3B	; 59
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	10 82       	st	Z, r1
PORTB=conc(PB_PIN7_VAL,PB_PIN6_VAL,PB_PIN5_VAL,PB_PIN4_VAL,PB_PIN3_VAL,PB_PIN2_VAL,PB_PIN1_VAL,PB_PIN0_VAL);
    1bfa:	e8 e3       	ldi	r30, 0x38	; 56
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	10 82       	st	Z, r1
PORTC=conc(PC_PIN7_VAL,PC_PIN6_VAL,PC_PIN5_VAL,PC_PIN4_VAL,PC_PIN3_VAL,PC_PIN2_VAL,PC_PIN1_VAL,PC_PIN0_VAL);
    1c00:	e5 e3       	ldi	r30, 0x35	; 53
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	8f ef       	ldi	r24, 0xFF	; 255
    1c06:	80 83       	st	Z, r24
PORTD=conc(PD_PIN7_VAL,PD_PIN6_VAL,PD_PIN5_VAL,PD_PIN4_VAL,PD_PIN3_VAL,PD_PIN2_VAL,PD_PIN1_VAL,PD_PIN0_VAL);
    1c08:	e2 e3       	ldi	r30, 0x32	; 50
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	10 82       	st	Z, r1

    local_enuerrorstate=ES_OK;
    1c0e:	19 82       	std	Y+1, r1	; 0x01

return local_enuerrorstate;
    1c10:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c12:	0f 90       	pop	r0
    1c14:	cf 91       	pop	r28
    1c16:	df 91       	pop	r29
    1c18:	08 95       	ret

00001c1a <DIO_enuSetportdir>:

ES_ERROR DIO_enuSetportdir(u8 copy_u8portid,u8 copy_u8value){
    1c1a:	df 93       	push	r29
    1c1c:	cf 93       	push	r28
    1c1e:	00 d0       	rcall	.+0      	; 0x1c20 <DIO_enuSetportdir+0x6>
    1c20:	00 d0       	rcall	.+0      	; 0x1c22 <DIO_enuSetportdir+0x8>
    1c22:	0f 92       	push	r0
    1c24:	cd b7       	in	r28, 0x3d	; 61
    1c26:	de b7       	in	r29, 0x3e	; 62
    1c28:	8a 83       	std	Y+2, r24	; 0x02
    1c2a:	6b 83       	std	Y+3, r22	; 0x03
	ES_ERROR local_enuerrorstate=ES_NOK;
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	89 83       	std	Y+1, r24	; 0x01

	 if( copy_u8portid<=DIO_PORTD){
    1c30:	8a 81       	ldd	r24, Y+2	; 0x02
    1c32:	84 30       	cpi	r24, 0x04	; 4
    1c34:	a0 f5       	brcc	.+104    	; 0x1c9e <DIO_enuSetportdir+0x84>
		 switch(copy_u8portid){
    1c36:	8a 81       	ldd	r24, Y+2	; 0x02
    1c38:	28 2f       	mov	r18, r24
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	3d 83       	std	Y+5, r19	; 0x05
    1c3e:	2c 83       	std	Y+4, r18	; 0x04
    1c40:	8c 81       	ldd	r24, Y+4	; 0x04
    1c42:	9d 81       	ldd	r25, Y+5	; 0x05
    1c44:	81 30       	cpi	r24, 0x01	; 1
    1c46:	91 05       	cpc	r25, r1
    1c48:	d1 f0       	breq	.+52     	; 0x1c7e <DIO_enuSetportdir+0x64>
    1c4a:	2c 81       	ldd	r18, Y+4	; 0x04
    1c4c:	3d 81       	ldd	r19, Y+5	; 0x05
    1c4e:	22 30       	cpi	r18, 0x02	; 2
    1c50:	31 05       	cpc	r19, r1
    1c52:	2c f4       	brge	.+10     	; 0x1c5e <DIO_enuSetportdir+0x44>
    1c54:	8c 81       	ldd	r24, Y+4	; 0x04
    1c56:	9d 81       	ldd	r25, Y+5	; 0x05
    1c58:	00 97       	sbiw	r24, 0x00	; 0
    1c5a:	61 f0       	breq	.+24     	; 0x1c74 <DIO_enuSetportdir+0x5a>
    1c5c:	1e c0       	rjmp	.+60     	; 0x1c9a <DIO_enuSetportdir+0x80>
    1c5e:	2c 81       	ldd	r18, Y+4	; 0x04
    1c60:	3d 81       	ldd	r19, Y+5	; 0x05
    1c62:	22 30       	cpi	r18, 0x02	; 2
    1c64:	31 05       	cpc	r19, r1
    1c66:	81 f0       	breq	.+32     	; 0x1c88 <DIO_enuSetportdir+0x6e>
    1c68:	8c 81       	ldd	r24, Y+4	; 0x04
    1c6a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c6c:	83 30       	cpi	r24, 0x03	; 3
    1c6e:	91 05       	cpc	r25, r1
    1c70:	81 f0       	breq	.+32     	; 0x1c92 <DIO_enuSetportdir+0x78>
    1c72:	13 c0       	rjmp	.+38     	; 0x1c9a <DIO_enuSetportdir+0x80>
		 case DIO_PORTA :
			DDRA=copy_u8value;
    1c74:	ea e3       	ldi	r30, 0x3A	; 58
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7a:	80 83       	st	Z, r24
    1c7c:	0e c0       	rjmp	.+28     	; 0x1c9a <DIO_enuSetportdir+0x80>
		   break;
		 case DIO_PORTB :
			DDRB=copy_u8value;
    1c7e:	e7 e3       	ldi	r30, 0x37	; 55
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	8b 81       	ldd	r24, Y+3	; 0x03
    1c84:	80 83       	st	Z, r24
    1c86:	09 c0       	rjmp	.+18     	; 0x1c9a <DIO_enuSetportdir+0x80>
			   break;
		 case DIO_PORTC :
			DDRC=copy_u8value;
    1c88:	e4 e3       	ldi	r30, 0x34	; 52
    1c8a:	f0 e0       	ldi	r31, 0x00	; 0
    1c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8e:	80 83       	st	Z, r24
    1c90:	04 c0       	rjmp	.+8      	; 0x1c9a <DIO_enuSetportdir+0x80>
			   break;
		 case DIO_PORTD :
			DDRD=copy_u8value;
    1c92:	e1 e3       	ldi	r30, 0x31	; 49
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	8b 81       	ldd	r24, Y+3	; 0x03
    1c98:	80 83       	st	Z, r24
			   break;
		 }
		  local_enuerrorstate=ES_OK;
    1c9a:	19 82       	std	Y+1, r1	; 0x01
    1c9c:	02 c0       	rjmp	.+4      	; 0x1ca2 <DIO_enuSetportdir+0x88>
	 }
	 else{local_enuerrorstate=ES_OUT_OF_RANGE;}
    1c9e:	83 e0       	ldi	r24, 0x03	; 3
    1ca0:	89 83       	std	Y+1, r24	; 0x01

	return local_enuerrorstate;
    1ca2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ca4:	0f 90       	pop	r0
    1ca6:	0f 90       	pop	r0
    1ca8:	0f 90       	pop	r0
    1caa:	0f 90       	pop	r0
    1cac:	0f 90       	pop	r0
    1cae:	cf 91       	pop	r28
    1cb0:	df 91       	pop	r29
    1cb2:	08 95       	ret

00001cb4 <DIO_enuSetportval>:



ES_ERROR DIO_enuSetportval(u8 copy_u8portid,u8 copy_u8value){
    1cb4:	df 93       	push	r29
    1cb6:	cf 93       	push	r28
    1cb8:	00 d0       	rcall	.+0      	; 0x1cba <DIO_enuSetportval+0x6>
    1cba:	00 d0       	rcall	.+0      	; 0x1cbc <DIO_enuSetportval+0x8>
    1cbc:	0f 92       	push	r0
    1cbe:	cd b7       	in	r28, 0x3d	; 61
    1cc0:	de b7       	in	r29, 0x3e	; 62
    1cc2:	8a 83       	std	Y+2, r24	; 0x02
    1cc4:	6b 83       	std	Y+3, r22	; 0x03
	ES_ERROR local_enuerrorstate=ES_NOK;
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	89 83       	std	Y+1, r24	; 0x01

	 if( copy_u8portid<=DIO_PORTD){
    1cca:	8a 81       	ldd	r24, Y+2	; 0x02
    1ccc:	84 30       	cpi	r24, 0x04	; 4
    1cce:	a0 f5       	brcc	.+104    	; 0x1d38 <DIO_enuSetportval+0x84>
		 switch(copy_u8portid){
    1cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd2:	28 2f       	mov	r18, r24
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	3d 83       	std	Y+5, r19	; 0x05
    1cd8:	2c 83       	std	Y+4, r18	; 0x04
    1cda:	8c 81       	ldd	r24, Y+4	; 0x04
    1cdc:	9d 81       	ldd	r25, Y+5	; 0x05
    1cde:	81 30       	cpi	r24, 0x01	; 1
    1ce0:	91 05       	cpc	r25, r1
    1ce2:	d1 f0       	breq	.+52     	; 0x1d18 <DIO_enuSetportval+0x64>
    1ce4:	2c 81       	ldd	r18, Y+4	; 0x04
    1ce6:	3d 81       	ldd	r19, Y+5	; 0x05
    1ce8:	22 30       	cpi	r18, 0x02	; 2
    1cea:	31 05       	cpc	r19, r1
    1cec:	2c f4       	brge	.+10     	; 0x1cf8 <DIO_enuSetportval+0x44>
    1cee:	8c 81       	ldd	r24, Y+4	; 0x04
    1cf0:	9d 81       	ldd	r25, Y+5	; 0x05
    1cf2:	00 97       	sbiw	r24, 0x00	; 0
    1cf4:	61 f0       	breq	.+24     	; 0x1d0e <DIO_enuSetportval+0x5a>
    1cf6:	1e c0       	rjmp	.+60     	; 0x1d34 <DIO_enuSetportval+0x80>
    1cf8:	2c 81       	ldd	r18, Y+4	; 0x04
    1cfa:	3d 81       	ldd	r19, Y+5	; 0x05
    1cfc:	22 30       	cpi	r18, 0x02	; 2
    1cfe:	31 05       	cpc	r19, r1
    1d00:	81 f0       	breq	.+32     	; 0x1d22 <DIO_enuSetportval+0x6e>
    1d02:	8c 81       	ldd	r24, Y+4	; 0x04
    1d04:	9d 81       	ldd	r25, Y+5	; 0x05
    1d06:	83 30       	cpi	r24, 0x03	; 3
    1d08:	91 05       	cpc	r25, r1
    1d0a:	81 f0       	breq	.+32     	; 0x1d2c <DIO_enuSetportval+0x78>
    1d0c:	13 c0       	rjmp	.+38     	; 0x1d34 <DIO_enuSetportval+0x80>
		 case DIO_PORTA :
			PORTA=copy_u8value;
    1d0e:	eb e3       	ldi	r30, 0x3B	; 59
    1d10:	f0 e0       	ldi	r31, 0x00	; 0
    1d12:	8b 81       	ldd	r24, Y+3	; 0x03
    1d14:	80 83       	st	Z, r24
    1d16:	0e c0       	rjmp	.+28     	; 0x1d34 <DIO_enuSetportval+0x80>
		   break;
		 case DIO_PORTB :
			PORTB=copy_u8value;
    1d18:	e8 e3       	ldi	r30, 0x38	; 56
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1e:	80 83       	st	Z, r24
    1d20:	09 c0       	rjmp	.+18     	; 0x1d34 <DIO_enuSetportval+0x80>
			   break;
		 case DIO_PORTC :
			PORTC=copy_u8value;
    1d22:	e5 e3       	ldi	r30, 0x35	; 53
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	8b 81       	ldd	r24, Y+3	; 0x03
    1d28:	80 83       	st	Z, r24
    1d2a:	04 c0       	rjmp	.+8      	; 0x1d34 <DIO_enuSetportval+0x80>
			   break;
		 case DIO_PORTD :
			PORTD=copy_u8value;
    1d2c:	e2 e3       	ldi	r30, 0x32	; 50
    1d2e:	f0 e0       	ldi	r31, 0x00	; 0
    1d30:	8b 81       	ldd	r24, Y+3	; 0x03
    1d32:	80 83       	st	Z, r24
			   break;
		 }
		  local_enuerrorstate=ES_OK;
    1d34:	19 82       	std	Y+1, r1	; 0x01
    1d36:	02 c0       	rjmp	.+4      	; 0x1d3c <DIO_enuSetportval+0x88>
	 }
	 else{local_enuerrorstate=ES_OUT_OF_RANGE;}
    1d38:	83 e0       	ldi	r24, 0x03	; 3
    1d3a:	89 83       	std	Y+1, r24	; 0x01

	return local_enuerrorstate;
    1d3c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d3e:	0f 90       	pop	r0
    1d40:	0f 90       	pop	r0
    1d42:	0f 90       	pop	r0
    1d44:	0f 90       	pop	r0
    1d46:	0f 90       	pop	r0
    1d48:	cf 91       	pop	r28
    1d4a:	df 91       	pop	r29
    1d4c:	08 95       	ret

00001d4e <DIO_enuSetpindir>:
ES_ERROR DIO_enuSetpindir(u8 copy_u8portid,u8 copy_u8pinid,u8 copy_u8value){
    1d4e:	df 93       	push	r29
    1d50:	cf 93       	push	r28
    1d52:	00 d0       	rcall	.+0      	; 0x1d54 <DIO_enuSetpindir+0x6>
    1d54:	00 d0       	rcall	.+0      	; 0x1d56 <DIO_enuSetpindir+0x8>
    1d56:	00 d0       	rcall	.+0      	; 0x1d58 <DIO_enuSetpindir+0xa>
    1d58:	cd b7       	in	r28, 0x3d	; 61
    1d5a:	de b7       	in	r29, 0x3e	; 62
    1d5c:	8a 83       	std	Y+2, r24	; 0x02
    1d5e:	6b 83       	std	Y+3, r22	; 0x03
    1d60:	4c 83       	std	Y+4, r20	; 0x04
	ES_ERROR local_enuerrorstate=ES_NOK;
    1d62:	81 e0       	ldi	r24, 0x01	; 1
    1d64:	89 83       	std	Y+1, r24	; 0x01

if(copy_u8portid<=DIO_PORTD&& copy_u8pinid<=DIO_PIN7&&copy_u8value<=OUTPUT ){
    1d66:	8a 81       	ldd	r24, Y+2	; 0x02
    1d68:	84 30       	cpi	r24, 0x04	; 4
    1d6a:	08 f0       	brcs	.+2      	; 0x1d6e <DIO_enuSetpindir+0x20>
    1d6c:	d4 c0       	rjmp	.+424    	; 0x1f16 <DIO_enuSetpindir+0x1c8>
    1d6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d70:	88 30       	cpi	r24, 0x08	; 8
    1d72:	08 f0       	brcs	.+2      	; 0x1d76 <DIO_enuSetpindir+0x28>
    1d74:	d0 c0       	rjmp	.+416    	; 0x1f16 <DIO_enuSetpindir+0x1c8>
    1d76:	8c 81       	ldd	r24, Y+4	; 0x04
    1d78:	82 30       	cpi	r24, 0x02	; 2
    1d7a:	08 f0       	brcs	.+2      	; 0x1d7e <DIO_enuSetpindir+0x30>
    1d7c:	cc c0       	rjmp	.+408    	; 0x1f16 <DIO_enuSetpindir+0x1c8>
	 if( copy_u8portid<=DIO_PORTD){
    1d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d80:	84 30       	cpi	r24, 0x04	; 4
    1d82:	08 f0       	brcs	.+2      	; 0x1d86 <DIO_enuSetpindir+0x38>
    1d84:	ca c0       	rjmp	.+404    	; 0x1f1a <DIO_enuSetpindir+0x1cc>
			 switch(copy_u8portid){
    1d86:	8a 81       	ldd	r24, Y+2	; 0x02
    1d88:	28 2f       	mov	r18, r24
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	3e 83       	std	Y+6, r19	; 0x06
    1d8e:	2d 83       	std	Y+5, r18	; 0x05
    1d90:	6d 81       	ldd	r22, Y+5	; 0x05
    1d92:	7e 81       	ldd	r23, Y+6	; 0x06
    1d94:	61 30       	cpi	r22, 0x01	; 1
    1d96:	71 05       	cpc	r23, r1
    1d98:	09 f4       	brne	.+2      	; 0x1d9c <DIO_enuSetpindir+0x4e>
    1d9a:	41 c0       	rjmp	.+130    	; 0x1e1e <DIO_enuSetpindir+0xd0>
    1d9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1da0:	82 30       	cpi	r24, 0x02	; 2
    1da2:	91 05       	cpc	r25, r1
    1da4:	34 f4       	brge	.+12     	; 0x1db2 <DIO_enuSetpindir+0x64>
    1da6:	2d 81       	ldd	r18, Y+5	; 0x05
    1da8:	3e 81       	ldd	r19, Y+6	; 0x06
    1daa:	21 15       	cp	r18, r1
    1dac:	31 05       	cpc	r19, r1
    1dae:	71 f0       	breq	.+28     	; 0x1dcc <DIO_enuSetpindir+0x7e>
    1db0:	b0 c0       	rjmp	.+352    	; 0x1f12 <DIO_enuSetpindir+0x1c4>
    1db2:	6d 81       	ldd	r22, Y+5	; 0x05
    1db4:	7e 81       	ldd	r23, Y+6	; 0x06
    1db6:	62 30       	cpi	r22, 0x02	; 2
    1db8:	71 05       	cpc	r23, r1
    1dba:	09 f4       	brne	.+2      	; 0x1dbe <DIO_enuSetpindir+0x70>
    1dbc:	59 c0       	rjmp	.+178    	; 0x1e70 <DIO_enuSetpindir+0x122>
    1dbe:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc0:	9e 81       	ldd	r25, Y+6	; 0x06
    1dc2:	83 30       	cpi	r24, 0x03	; 3
    1dc4:	91 05       	cpc	r25, r1
    1dc6:	09 f4       	brne	.+2      	; 0x1dca <DIO_enuSetpindir+0x7c>
    1dc8:	7c c0       	rjmp	.+248    	; 0x1ec2 <DIO_enuSetpindir+0x174>
    1dca:	a3 c0       	rjmp	.+326    	; 0x1f12 <DIO_enuSetpindir+0x1c4>
			 case DIO_PORTA :
				DDRA&=~(MASK_BIT<<copy_u8pinid);
    1dcc:	aa e3       	ldi	r26, 0x3A	; 58
    1dce:	b0 e0       	ldi	r27, 0x00	; 0
    1dd0:	ea e3       	ldi	r30, 0x3A	; 58
    1dd2:	f0 e0       	ldi	r31, 0x00	; 0
    1dd4:	80 81       	ld	r24, Z
    1dd6:	48 2f       	mov	r20, r24
    1dd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dda:	28 2f       	mov	r18, r24
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	81 e0       	ldi	r24, 0x01	; 1
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	02 c0       	rjmp	.+4      	; 0x1de8 <DIO_enuSetpindir+0x9a>
    1de4:	88 0f       	add	r24, r24
    1de6:	99 1f       	adc	r25, r25
    1de8:	2a 95       	dec	r18
    1dea:	e2 f7       	brpl	.-8      	; 0x1de4 <DIO_enuSetpindir+0x96>
    1dec:	80 95       	com	r24
    1dee:	84 23       	and	r24, r20
    1df0:	8c 93       	st	X, r24
				DDRA|=(copy_u8value<<copy_u8pinid);
    1df2:	aa e3       	ldi	r26, 0x3A	; 58
    1df4:	b0 e0       	ldi	r27, 0x00	; 0
    1df6:	ea e3       	ldi	r30, 0x3A	; 58
    1df8:	f0 e0       	ldi	r31, 0x00	; 0
    1dfa:	80 81       	ld	r24, Z
    1dfc:	48 2f       	mov	r20, r24
    1dfe:	8c 81       	ldd	r24, Y+4	; 0x04
    1e00:	28 2f       	mov	r18, r24
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	8b 81       	ldd	r24, Y+3	; 0x03
    1e06:	88 2f       	mov	r24, r24
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	b9 01       	movw	r22, r18
    1e0c:	02 c0       	rjmp	.+4      	; 0x1e12 <DIO_enuSetpindir+0xc4>
    1e0e:	66 0f       	add	r22, r22
    1e10:	77 1f       	adc	r23, r23
    1e12:	8a 95       	dec	r24
    1e14:	e2 f7       	brpl	.-8      	; 0x1e0e <DIO_enuSetpindir+0xc0>
    1e16:	cb 01       	movw	r24, r22
    1e18:	84 2b       	or	r24, r20
    1e1a:	8c 93       	st	X, r24
    1e1c:	7a c0       	rjmp	.+244    	; 0x1f12 <DIO_enuSetpindir+0x1c4>
			   break;
			 case DIO_PORTB :
					DDRB&=~(MASK_BIT<<copy_u8pinid);
    1e1e:	a7 e3       	ldi	r26, 0x37	; 55
    1e20:	b0 e0       	ldi	r27, 0x00	; 0
    1e22:	e7 e3       	ldi	r30, 0x37	; 55
    1e24:	f0 e0       	ldi	r31, 0x00	; 0
    1e26:	80 81       	ld	r24, Z
    1e28:	48 2f       	mov	r20, r24
    1e2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2c:	28 2f       	mov	r18, r24
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	81 e0       	ldi	r24, 0x01	; 1
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	02 c0       	rjmp	.+4      	; 0x1e3a <DIO_enuSetpindir+0xec>
    1e36:	88 0f       	add	r24, r24
    1e38:	99 1f       	adc	r25, r25
    1e3a:	2a 95       	dec	r18
    1e3c:	e2 f7       	brpl	.-8      	; 0x1e36 <DIO_enuSetpindir+0xe8>
    1e3e:	80 95       	com	r24
    1e40:	84 23       	and	r24, r20
    1e42:	8c 93       	st	X, r24
				    DDRB|=(copy_u8value<<copy_u8pinid);
    1e44:	a7 e3       	ldi	r26, 0x37	; 55
    1e46:	b0 e0       	ldi	r27, 0x00	; 0
    1e48:	e7 e3       	ldi	r30, 0x37	; 55
    1e4a:	f0 e0       	ldi	r31, 0x00	; 0
    1e4c:	80 81       	ld	r24, Z
    1e4e:	48 2f       	mov	r20, r24
    1e50:	8c 81       	ldd	r24, Y+4	; 0x04
    1e52:	28 2f       	mov	r18, r24
    1e54:	30 e0       	ldi	r19, 0x00	; 0
    1e56:	8b 81       	ldd	r24, Y+3	; 0x03
    1e58:	88 2f       	mov	r24, r24
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	b9 01       	movw	r22, r18
    1e5e:	02 c0       	rjmp	.+4      	; 0x1e64 <DIO_enuSetpindir+0x116>
    1e60:	66 0f       	add	r22, r22
    1e62:	77 1f       	adc	r23, r23
    1e64:	8a 95       	dec	r24
    1e66:	e2 f7       	brpl	.-8      	; 0x1e60 <DIO_enuSetpindir+0x112>
    1e68:	cb 01       	movw	r24, r22
    1e6a:	84 2b       	or	r24, r20
    1e6c:	8c 93       	st	X, r24
    1e6e:	51 c0       	rjmp	.+162    	; 0x1f12 <DIO_enuSetpindir+0x1c4>
				   break;
			 case DIO_PORTC :
				 DDRC&=~(MASK_BIT<<copy_u8pinid);
    1e70:	a4 e3       	ldi	r26, 0x34	; 52
    1e72:	b0 e0       	ldi	r27, 0x00	; 0
    1e74:	e4 e3       	ldi	r30, 0x34	; 52
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	80 81       	ld	r24, Z
    1e7a:	48 2f       	mov	r20, r24
    1e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7e:	28 2f       	mov	r18, r24
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	81 e0       	ldi	r24, 0x01	; 1
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	02 c0       	rjmp	.+4      	; 0x1e8c <DIO_enuSetpindir+0x13e>
    1e88:	88 0f       	add	r24, r24
    1e8a:	99 1f       	adc	r25, r25
    1e8c:	2a 95       	dec	r18
    1e8e:	e2 f7       	brpl	.-8      	; 0x1e88 <DIO_enuSetpindir+0x13a>
    1e90:	80 95       	com	r24
    1e92:	84 23       	and	r24, r20
    1e94:	8c 93       	st	X, r24
				 DDRC|=(copy_u8value<<copy_u8pinid);
    1e96:	a4 e3       	ldi	r26, 0x34	; 52
    1e98:	b0 e0       	ldi	r27, 0x00	; 0
    1e9a:	e4 e3       	ldi	r30, 0x34	; 52
    1e9c:	f0 e0       	ldi	r31, 0x00	; 0
    1e9e:	80 81       	ld	r24, Z
    1ea0:	48 2f       	mov	r20, r24
    1ea2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea4:	28 2f       	mov	r18, r24
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eaa:	88 2f       	mov	r24, r24
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	b9 01       	movw	r22, r18
    1eb0:	02 c0       	rjmp	.+4      	; 0x1eb6 <DIO_enuSetpindir+0x168>
    1eb2:	66 0f       	add	r22, r22
    1eb4:	77 1f       	adc	r23, r23
    1eb6:	8a 95       	dec	r24
    1eb8:	e2 f7       	brpl	.-8      	; 0x1eb2 <DIO_enuSetpindir+0x164>
    1eba:	cb 01       	movw	r24, r22
    1ebc:	84 2b       	or	r24, r20
    1ebe:	8c 93       	st	X, r24
    1ec0:	28 c0       	rjmp	.+80     	; 0x1f12 <DIO_enuSetpindir+0x1c4>
				   break;
			 case DIO_PORTD :
				 DDRD&=~(MASK_BIT<<copy_u8pinid);
    1ec2:	a1 e3       	ldi	r26, 0x31	; 49
    1ec4:	b0 e0       	ldi	r27, 0x00	; 0
    1ec6:	e1 e3       	ldi	r30, 0x31	; 49
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	80 81       	ld	r24, Z
    1ecc:	48 2f       	mov	r20, r24
    1ece:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed0:	28 2f       	mov	r18, r24
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	81 e0       	ldi	r24, 0x01	; 1
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	02 c0       	rjmp	.+4      	; 0x1ede <DIO_enuSetpindir+0x190>
    1eda:	88 0f       	add	r24, r24
    1edc:	99 1f       	adc	r25, r25
    1ede:	2a 95       	dec	r18
    1ee0:	e2 f7       	brpl	.-8      	; 0x1eda <DIO_enuSetpindir+0x18c>
    1ee2:	80 95       	com	r24
    1ee4:	84 23       	and	r24, r20
    1ee6:	8c 93       	st	X, r24
				 DDRD|=(copy_u8value<<copy_u8pinid);
    1ee8:	a1 e3       	ldi	r26, 0x31	; 49
    1eea:	b0 e0       	ldi	r27, 0x00	; 0
    1eec:	e1 e3       	ldi	r30, 0x31	; 49
    1eee:	f0 e0       	ldi	r31, 0x00	; 0
    1ef0:	80 81       	ld	r24, Z
    1ef2:	48 2f       	mov	r20, r24
    1ef4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ef6:	28 2f       	mov	r18, r24
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	8b 81       	ldd	r24, Y+3	; 0x03
    1efc:	88 2f       	mov	r24, r24
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	b9 01       	movw	r22, r18
    1f02:	02 c0       	rjmp	.+4      	; 0x1f08 <DIO_enuSetpindir+0x1ba>
    1f04:	66 0f       	add	r22, r22
    1f06:	77 1f       	adc	r23, r23
    1f08:	8a 95       	dec	r24
    1f0a:	e2 f7       	brpl	.-8      	; 0x1f04 <DIO_enuSetpindir+0x1b6>
    1f0c:	cb 01       	movw	r24, r22
    1f0e:	84 2b       	or	r24, r20
    1f10:	8c 93       	st	X, r24
				   break;
			 }
			 local_enuerrorstate=ES_OK;
    1f12:	19 82       	std	Y+1, r1	; 0x01
    1f14:	02 c0       	rjmp	.+4      	; 0x1f1a <DIO_enuSetpindir+0x1cc>
		 }
}
else  {local_enuerrorstate=ES_OUT_OF_RANGE;}
    1f16:	83 e0       	ldi	r24, 0x03	; 3
    1f18:	89 83       	std	Y+1, r24	; 0x01

		return local_enuerrorstate;
    1f1a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f1c:	26 96       	adiw	r28, 0x06	; 6
    1f1e:	0f b6       	in	r0, 0x3f	; 63
    1f20:	f8 94       	cli
    1f22:	de bf       	out	0x3e, r29	; 62
    1f24:	0f be       	out	0x3f, r0	; 63
    1f26:	cd bf       	out	0x3d, r28	; 61
    1f28:	cf 91       	pop	r28
    1f2a:	df 91       	pop	r29
    1f2c:	08 95       	ret

00001f2e <DIO_enuSetpinval>:

ES_ERROR DIO_enuSetpinval(u8 copy_u8portid,u8 copy_u8pinid,u8 copy_u8value){
    1f2e:	df 93       	push	r29
    1f30:	cf 93       	push	r28
    1f32:	00 d0       	rcall	.+0      	; 0x1f34 <DIO_enuSetpinval+0x6>
    1f34:	00 d0       	rcall	.+0      	; 0x1f36 <DIO_enuSetpinval+0x8>
    1f36:	00 d0       	rcall	.+0      	; 0x1f38 <DIO_enuSetpinval+0xa>
    1f38:	cd b7       	in	r28, 0x3d	; 61
    1f3a:	de b7       	in	r29, 0x3e	; 62
    1f3c:	8a 83       	std	Y+2, r24	; 0x02
    1f3e:	6b 83       	std	Y+3, r22	; 0x03
    1f40:	4c 83       	std	Y+4, r20	; 0x04
	ES_ERROR local_enuerrorstate=ES_NOK;
    1f42:	81 e0       	ldi	r24, 0x01	; 1
    1f44:	89 83       	std	Y+1, r24	; 0x01

	if(copy_u8portid<=DIO_PORTD&& copy_u8pinid<=DIO_PIN7&&copy_u8value<=OUTPUT ){
    1f46:	8a 81       	ldd	r24, Y+2	; 0x02
    1f48:	84 30       	cpi	r24, 0x04	; 4
    1f4a:	08 f0       	brcs	.+2      	; 0x1f4e <DIO_enuSetpinval+0x20>
    1f4c:	d0 c0       	rjmp	.+416    	; 0x20ee <DIO_enuSetpinval+0x1c0>
    1f4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f50:	88 30       	cpi	r24, 0x08	; 8
    1f52:	08 f0       	brcs	.+2      	; 0x1f56 <DIO_enuSetpinval+0x28>
    1f54:	cc c0       	rjmp	.+408    	; 0x20ee <DIO_enuSetpinval+0x1c0>
    1f56:	8c 81       	ldd	r24, Y+4	; 0x04
    1f58:	82 30       	cpi	r24, 0x02	; 2
    1f5a:	08 f0       	brcs	.+2      	; 0x1f5e <DIO_enuSetpinval+0x30>
    1f5c:	c8 c0       	rjmp	.+400    	; 0x20ee <DIO_enuSetpinval+0x1c0>

				 switch(copy_u8portid){
    1f5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f60:	28 2f       	mov	r18, r24
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	3e 83       	std	Y+6, r19	; 0x06
    1f66:	2d 83       	std	Y+5, r18	; 0x05
    1f68:	6d 81       	ldd	r22, Y+5	; 0x05
    1f6a:	7e 81       	ldd	r23, Y+6	; 0x06
    1f6c:	61 30       	cpi	r22, 0x01	; 1
    1f6e:	71 05       	cpc	r23, r1
    1f70:	09 f4       	brne	.+2      	; 0x1f74 <DIO_enuSetpinval+0x46>
    1f72:	41 c0       	rjmp	.+130    	; 0x1ff6 <DIO_enuSetpinval+0xc8>
    1f74:	8d 81       	ldd	r24, Y+5	; 0x05
    1f76:	9e 81       	ldd	r25, Y+6	; 0x06
    1f78:	82 30       	cpi	r24, 0x02	; 2
    1f7a:	91 05       	cpc	r25, r1
    1f7c:	34 f4       	brge	.+12     	; 0x1f8a <DIO_enuSetpinval+0x5c>
    1f7e:	2d 81       	ldd	r18, Y+5	; 0x05
    1f80:	3e 81       	ldd	r19, Y+6	; 0x06
    1f82:	21 15       	cp	r18, r1
    1f84:	31 05       	cpc	r19, r1
    1f86:	71 f0       	breq	.+28     	; 0x1fa4 <DIO_enuSetpinval+0x76>
    1f88:	b0 c0       	rjmp	.+352    	; 0x20ea <DIO_enuSetpinval+0x1bc>
    1f8a:	6d 81       	ldd	r22, Y+5	; 0x05
    1f8c:	7e 81       	ldd	r23, Y+6	; 0x06
    1f8e:	62 30       	cpi	r22, 0x02	; 2
    1f90:	71 05       	cpc	r23, r1
    1f92:	09 f4       	brne	.+2      	; 0x1f96 <DIO_enuSetpinval+0x68>
    1f94:	59 c0       	rjmp	.+178    	; 0x2048 <DIO_enuSetpinval+0x11a>
    1f96:	8d 81       	ldd	r24, Y+5	; 0x05
    1f98:	9e 81       	ldd	r25, Y+6	; 0x06
    1f9a:	83 30       	cpi	r24, 0x03	; 3
    1f9c:	91 05       	cpc	r25, r1
    1f9e:	09 f4       	brne	.+2      	; 0x1fa2 <DIO_enuSetpinval+0x74>
    1fa0:	7c c0       	rjmp	.+248    	; 0x209a <DIO_enuSetpinval+0x16c>
    1fa2:	a3 c0       	rjmp	.+326    	; 0x20ea <DIO_enuSetpinval+0x1bc>
				 case DIO_PORTA :
					PORTA&=~(MASK_BIT<<copy_u8pinid);
    1fa4:	ab e3       	ldi	r26, 0x3B	; 59
    1fa6:	b0 e0       	ldi	r27, 0x00	; 0
    1fa8:	eb e3       	ldi	r30, 0x3B	; 59
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	80 81       	ld	r24, Z
    1fae:	48 2f       	mov	r20, r24
    1fb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb2:	28 2f       	mov	r18, r24
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	81 e0       	ldi	r24, 0x01	; 1
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	02 c0       	rjmp	.+4      	; 0x1fc0 <DIO_enuSetpinval+0x92>
    1fbc:	88 0f       	add	r24, r24
    1fbe:	99 1f       	adc	r25, r25
    1fc0:	2a 95       	dec	r18
    1fc2:	e2 f7       	brpl	.-8      	; 0x1fbc <DIO_enuSetpinval+0x8e>
    1fc4:	80 95       	com	r24
    1fc6:	84 23       	and	r24, r20
    1fc8:	8c 93       	st	X, r24
					PORTA|=(copy_u8value<<copy_u8pinid);
    1fca:	ab e3       	ldi	r26, 0x3B	; 59
    1fcc:	b0 e0       	ldi	r27, 0x00	; 0
    1fce:	eb e3       	ldi	r30, 0x3B	; 59
    1fd0:	f0 e0       	ldi	r31, 0x00	; 0
    1fd2:	80 81       	ld	r24, Z
    1fd4:	48 2f       	mov	r20, r24
    1fd6:	8c 81       	ldd	r24, Y+4	; 0x04
    1fd8:	28 2f       	mov	r18, r24
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fde:	88 2f       	mov	r24, r24
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	b9 01       	movw	r22, r18
    1fe4:	02 c0       	rjmp	.+4      	; 0x1fea <DIO_enuSetpinval+0xbc>
    1fe6:	66 0f       	add	r22, r22
    1fe8:	77 1f       	adc	r23, r23
    1fea:	8a 95       	dec	r24
    1fec:	e2 f7       	brpl	.-8      	; 0x1fe6 <DIO_enuSetpinval+0xb8>
    1fee:	cb 01       	movw	r24, r22
    1ff0:	84 2b       	or	r24, r20
    1ff2:	8c 93       	st	X, r24
    1ff4:	7a c0       	rjmp	.+244    	; 0x20ea <DIO_enuSetpinval+0x1bc>
				   break;
				 case DIO_PORTB :
						PORTB&=~(MASK_BIT<<copy_u8pinid);
    1ff6:	a8 e3       	ldi	r26, 0x38	; 56
    1ff8:	b0 e0       	ldi	r27, 0x00	; 0
    1ffa:	e8 e3       	ldi	r30, 0x38	; 56
    1ffc:	f0 e0       	ldi	r31, 0x00	; 0
    1ffe:	80 81       	ld	r24, Z
    2000:	48 2f       	mov	r20, r24
    2002:	8b 81       	ldd	r24, Y+3	; 0x03
    2004:	28 2f       	mov	r18, r24
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	81 e0       	ldi	r24, 0x01	; 1
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	02 c0       	rjmp	.+4      	; 0x2012 <DIO_enuSetpinval+0xe4>
    200e:	88 0f       	add	r24, r24
    2010:	99 1f       	adc	r25, r25
    2012:	2a 95       	dec	r18
    2014:	e2 f7       	brpl	.-8      	; 0x200e <DIO_enuSetpinval+0xe0>
    2016:	80 95       	com	r24
    2018:	84 23       	and	r24, r20
    201a:	8c 93       	st	X, r24
					    PORTB|=(copy_u8value<<copy_u8pinid);
    201c:	a8 e3       	ldi	r26, 0x38	; 56
    201e:	b0 e0       	ldi	r27, 0x00	; 0
    2020:	e8 e3       	ldi	r30, 0x38	; 56
    2022:	f0 e0       	ldi	r31, 0x00	; 0
    2024:	80 81       	ld	r24, Z
    2026:	48 2f       	mov	r20, r24
    2028:	8c 81       	ldd	r24, Y+4	; 0x04
    202a:	28 2f       	mov	r18, r24
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	8b 81       	ldd	r24, Y+3	; 0x03
    2030:	88 2f       	mov	r24, r24
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	b9 01       	movw	r22, r18
    2036:	02 c0       	rjmp	.+4      	; 0x203c <DIO_enuSetpinval+0x10e>
    2038:	66 0f       	add	r22, r22
    203a:	77 1f       	adc	r23, r23
    203c:	8a 95       	dec	r24
    203e:	e2 f7       	brpl	.-8      	; 0x2038 <DIO_enuSetpinval+0x10a>
    2040:	cb 01       	movw	r24, r22
    2042:	84 2b       	or	r24, r20
    2044:	8c 93       	st	X, r24
    2046:	51 c0       	rjmp	.+162    	; 0x20ea <DIO_enuSetpinval+0x1bc>
					   break;
				 case DIO_PORTC :
					 PORTC&=~(MASK_BIT<<copy_u8pinid);
    2048:	a5 e3       	ldi	r26, 0x35	; 53
    204a:	b0 e0       	ldi	r27, 0x00	; 0
    204c:	e5 e3       	ldi	r30, 0x35	; 53
    204e:	f0 e0       	ldi	r31, 0x00	; 0
    2050:	80 81       	ld	r24, Z
    2052:	48 2f       	mov	r20, r24
    2054:	8b 81       	ldd	r24, Y+3	; 0x03
    2056:	28 2f       	mov	r18, r24
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	81 e0       	ldi	r24, 0x01	; 1
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	02 c0       	rjmp	.+4      	; 0x2064 <DIO_enuSetpinval+0x136>
    2060:	88 0f       	add	r24, r24
    2062:	99 1f       	adc	r25, r25
    2064:	2a 95       	dec	r18
    2066:	e2 f7       	brpl	.-8      	; 0x2060 <DIO_enuSetpinval+0x132>
    2068:	80 95       	com	r24
    206a:	84 23       	and	r24, r20
    206c:	8c 93       	st	X, r24
					 PORTC|=(copy_u8value<<copy_u8pinid);
    206e:	a5 e3       	ldi	r26, 0x35	; 53
    2070:	b0 e0       	ldi	r27, 0x00	; 0
    2072:	e5 e3       	ldi	r30, 0x35	; 53
    2074:	f0 e0       	ldi	r31, 0x00	; 0
    2076:	80 81       	ld	r24, Z
    2078:	48 2f       	mov	r20, r24
    207a:	8c 81       	ldd	r24, Y+4	; 0x04
    207c:	28 2f       	mov	r18, r24
    207e:	30 e0       	ldi	r19, 0x00	; 0
    2080:	8b 81       	ldd	r24, Y+3	; 0x03
    2082:	88 2f       	mov	r24, r24
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	b9 01       	movw	r22, r18
    2088:	02 c0       	rjmp	.+4      	; 0x208e <DIO_enuSetpinval+0x160>
    208a:	66 0f       	add	r22, r22
    208c:	77 1f       	adc	r23, r23
    208e:	8a 95       	dec	r24
    2090:	e2 f7       	brpl	.-8      	; 0x208a <DIO_enuSetpinval+0x15c>
    2092:	cb 01       	movw	r24, r22
    2094:	84 2b       	or	r24, r20
    2096:	8c 93       	st	X, r24
    2098:	28 c0       	rjmp	.+80     	; 0x20ea <DIO_enuSetpinval+0x1bc>
					   break;
				 case DIO_PORTD :
					 PORTD&=~(MASK_BIT<<copy_u8pinid);
    209a:	a2 e3       	ldi	r26, 0x32	; 50
    209c:	b0 e0       	ldi	r27, 0x00	; 0
    209e:	e2 e3       	ldi	r30, 0x32	; 50
    20a0:	f0 e0       	ldi	r31, 0x00	; 0
    20a2:	80 81       	ld	r24, Z
    20a4:	48 2f       	mov	r20, r24
    20a6:	8b 81       	ldd	r24, Y+3	; 0x03
    20a8:	28 2f       	mov	r18, r24
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	81 e0       	ldi	r24, 0x01	; 1
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	02 c0       	rjmp	.+4      	; 0x20b6 <DIO_enuSetpinval+0x188>
    20b2:	88 0f       	add	r24, r24
    20b4:	99 1f       	adc	r25, r25
    20b6:	2a 95       	dec	r18
    20b8:	e2 f7       	brpl	.-8      	; 0x20b2 <DIO_enuSetpinval+0x184>
    20ba:	80 95       	com	r24
    20bc:	84 23       	and	r24, r20
    20be:	8c 93       	st	X, r24
					 PORTD|=(copy_u8value<<copy_u8pinid);
    20c0:	a2 e3       	ldi	r26, 0x32	; 50
    20c2:	b0 e0       	ldi	r27, 0x00	; 0
    20c4:	e2 e3       	ldi	r30, 0x32	; 50
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	80 81       	ld	r24, Z
    20ca:	48 2f       	mov	r20, r24
    20cc:	8c 81       	ldd	r24, Y+4	; 0x04
    20ce:	28 2f       	mov	r18, r24
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	8b 81       	ldd	r24, Y+3	; 0x03
    20d4:	88 2f       	mov	r24, r24
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	b9 01       	movw	r22, r18
    20da:	02 c0       	rjmp	.+4      	; 0x20e0 <DIO_enuSetpinval+0x1b2>
    20dc:	66 0f       	add	r22, r22
    20de:	77 1f       	adc	r23, r23
    20e0:	8a 95       	dec	r24
    20e2:	e2 f7       	brpl	.-8      	; 0x20dc <DIO_enuSetpinval+0x1ae>
    20e4:	cb 01       	movw	r24, r22
    20e6:	84 2b       	or	r24, r20
    20e8:	8c 93       	st	X, r24
					   break;
				 }
				  local_enuerrorstate=ES_OK;
    20ea:	19 82       	std	Y+1, r1	; 0x01
    20ec:	02 c0       	rjmp	.+4      	; 0x20f2 <DIO_enuSetpinval+0x1c4>

	}
	else  {local_enuerrorstate=ES_OUT_OF_RANGE;}
    20ee:	83 e0       	ldi	r24, 0x03	; 3
    20f0:	89 83       	std	Y+1, r24	; 0x01

		return local_enuerrorstate;
    20f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    20f4:	26 96       	adiw	r28, 0x06	; 6
    20f6:	0f b6       	in	r0, 0x3f	; 63
    20f8:	f8 94       	cli
    20fa:	de bf       	out	0x3e, r29	; 62
    20fc:	0f be       	out	0x3f, r0	; 63
    20fe:	cd bf       	out	0x3d, r28	; 61
    2100:	cf 91       	pop	r28
    2102:	df 91       	pop	r29
    2104:	08 95       	ret

00002106 <DIO_enutogport>:

ES_ERROR DIO_enutogport(u8 copy_u8portid){
    2106:	df 93       	push	r29
    2108:	cf 93       	push	r28
    210a:	00 d0       	rcall	.+0      	; 0x210c <DIO_enutogport+0x6>
    210c:	00 d0       	rcall	.+0      	; 0x210e <DIO_enutogport+0x8>
    210e:	cd b7       	in	r28, 0x3d	; 61
    2110:	de b7       	in	r29, 0x3e	; 62
    2112:	8a 83       	std	Y+2, r24	; 0x02
	ES_ERROR local_enuerrorstate=ES_NOK;
    2114:	81 e0       	ldi	r24, 0x01	; 1
    2116:	89 83       	std	Y+1, r24	; 0x01


	 if( copy_u8portid<=DIO_PORTD){
    2118:	8a 81       	ldd	r24, Y+2	; 0x02
    211a:	84 30       	cpi	r24, 0x04	; 4
    211c:	08 f0       	brcs	.+2      	; 0x2120 <DIO_enutogport+0x1a>
    211e:	40 c0       	rjmp	.+128    	; 0x21a0 <DIO_enutogport+0x9a>
			 switch(copy_u8portid){
    2120:	8a 81       	ldd	r24, Y+2	; 0x02
    2122:	28 2f       	mov	r18, r24
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	3c 83       	std	Y+4, r19	; 0x04
    2128:	2b 83       	std	Y+3, r18	; 0x03
    212a:	8b 81       	ldd	r24, Y+3	; 0x03
    212c:	9c 81       	ldd	r25, Y+4	; 0x04
    212e:	81 30       	cpi	r24, 0x01	; 1
    2130:	91 05       	cpc	r25, r1
    2132:	e9 f0       	breq	.+58     	; 0x216e <DIO_enutogport+0x68>
    2134:	2b 81       	ldd	r18, Y+3	; 0x03
    2136:	3c 81       	ldd	r19, Y+4	; 0x04
    2138:	22 30       	cpi	r18, 0x02	; 2
    213a:	31 05       	cpc	r19, r1
    213c:	2c f4       	brge	.+10     	; 0x2148 <DIO_enutogport+0x42>
    213e:	8b 81       	ldd	r24, Y+3	; 0x03
    2140:	9c 81       	ldd	r25, Y+4	; 0x04
    2142:	00 97       	sbiw	r24, 0x00	; 0
    2144:	61 f0       	breq	.+24     	; 0x215e <DIO_enutogport+0x58>
    2146:	2a c0       	rjmp	.+84     	; 0x219c <DIO_enutogport+0x96>
    2148:	2b 81       	ldd	r18, Y+3	; 0x03
    214a:	3c 81       	ldd	r19, Y+4	; 0x04
    214c:	22 30       	cpi	r18, 0x02	; 2
    214e:	31 05       	cpc	r19, r1
    2150:	b1 f0       	breq	.+44     	; 0x217e <DIO_enutogport+0x78>
    2152:	8b 81       	ldd	r24, Y+3	; 0x03
    2154:	9c 81       	ldd	r25, Y+4	; 0x04
    2156:	83 30       	cpi	r24, 0x03	; 3
    2158:	91 05       	cpc	r25, r1
    215a:	c9 f0       	breq	.+50     	; 0x218e <DIO_enutogport+0x88>
    215c:	1f c0       	rjmp	.+62     	; 0x219c <DIO_enutogport+0x96>
			 case DIO_PORTA :
				PORTA=~PORTA;
    215e:	ab e3       	ldi	r26, 0x3B	; 59
    2160:	b0 e0       	ldi	r27, 0x00	; 0
    2162:	eb e3       	ldi	r30, 0x3B	; 59
    2164:	f0 e0       	ldi	r31, 0x00	; 0
    2166:	80 81       	ld	r24, Z
    2168:	80 95       	com	r24
    216a:	8c 93       	st	X, r24
    216c:	17 c0       	rjmp	.+46     	; 0x219c <DIO_enutogport+0x96>
			   break;
			 case DIO_PORTB :
				PORTB=~PORTB;
    216e:	a8 e3       	ldi	r26, 0x38	; 56
    2170:	b0 e0       	ldi	r27, 0x00	; 0
    2172:	e8 e3       	ldi	r30, 0x38	; 56
    2174:	f0 e0       	ldi	r31, 0x00	; 0
    2176:	80 81       	ld	r24, Z
    2178:	80 95       	com	r24
    217a:	8c 93       	st	X, r24
    217c:	0f c0       	rjmp	.+30     	; 0x219c <DIO_enutogport+0x96>
				   break;
			 case DIO_PORTC :
				PORTC=~PORTC;
    217e:	a5 e3       	ldi	r26, 0x35	; 53
    2180:	b0 e0       	ldi	r27, 0x00	; 0
    2182:	e5 e3       	ldi	r30, 0x35	; 53
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	80 81       	ld	r24, Z
    2188:	80 95       	com	r24
    218a:	8c 93       	st	X, r24
    218c:	07 c0       	rjmp	.+14     	; 0x219c <DIO_enutogport+0x96>
				   break;
			 case DIO_PORTD :
				PORTD=~PORTD;
    218e:	a2 e3       	ldi	r26, 0x32	; 50
    2190:	b0 e0       	ldi	r27, 0x00	; 0
    2192:	e2 e3       	ldi	r30, 0x32	; 50
    2194:	f0 e0       	ldi	r31, 0x00	; 0
    2196:	80 81       	ld	r24, Z
    2198:	80 95       	com	r24
    219a:	8c 93       	st	X, r24
				   break;
			 }
			  local_enuerrorstate=ES_OK;
    219c:	19 82       	std	Y+1, r1	; 0x01
    219e:	02 c0       	rjmp	.+4      	; 0x21a4 <DIO_enutogport+0x9e>
		 }
		 else{local_enuerrorstate=ES_OUT_OF_RANGE;}
    21a0:	83 e0       	ldi	r24, 0x03	; 3
    21a2:	89 83       	std	Y+1, r24	; 0x01


		return local_enuerrorstate;
    21a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    21a6:	0f 90       	pop	r0
    21a8:	0f 90       	pop	r0
    21aa:	0f 90       	pop	r0
    21ac:	0f 90       	pop	r0
    21ae:	cf 91       	pop	r28
    21b0:	df 91       	pop	r29
    21b2:	08 95       	ret

000021b4 <DIO_enutogpin>:

ES_ERROR DIO_enutogpin(u8 copy_u8portid,u8 copy_u8pinid){
    21b4:	df 93       	push	r29
    21b6:	cf 93       	push	r28
    21b8:	00 d0       	rcall	.+0      	; 0x21ba <DIO_enutogpin+0x6>
    21ba:	00 d0       	rcall	.+0      	; 0x21bc <DIO_enutogpin+0x8>
    21bc:	0f 92       	push	r0
    21be:	cd b7       	in	r28, 0x3d	; 61
    21c0:	de b7       	in	r29, 0x3e	; 62
    21c2:	8a 83       	std	Y+2, r24	; 0x02
    21c4:	6b 83       	std	Y+3, r22	; 0x03
	ES_ERROR local_enuerrorstate=ES_OK;
    21c6:	19 82       	std	Y+1, r1	; 0x01

	if(copy_u8portid<=DIO_PORTD&& copy_u8pinid<=DIO_PIN7 ){
    21c8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ca:	84 30       	cpi	r24, 0x04	; 4
    21cc:	08 f0       	brcs	.+2      	; 0x21d0 <DIO_enutogpin+0x1c>
    21ce:	74 c0       	rjmp	.+232    	; 0x22b8 <DIO_enutogpin+0x104>
    21d0:	8b 81       	ldd	r24, Y+3	; 0x03
    21d2:	88 30       	cpi	r24, 0x08	; 8
    21d4:	08 f0       	brcs	.+2      	; 0x21d8 <DIO_enutogpin+0x24>
    21d6:	70 c0       	rjmp	.+224    	; 0x22b8 <DIO_enutogpin+0x104>

					 switch(copy_u8portid){
    21d8:	8a 81       	ldd	r24, Y+2	; 0x02
    21da:	28 2f       	mov	r18, r24
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	3d 83       	std	Y+5, r19	; 0x05
    21e0:	2c 83       	std	Y+4, r18	; 0x04
    21e2:	8c 81       	ldd	r24, Y+4	; 0x04
    21e4:	9d 81       	ldd	r25, Y+5	; 0x05
    21e6:	81 30       	cpi	r24, 0x01	; 1
    21e8:	91 05       	cpc	r25, r1
    21ea:	49 f1       	breq	.+82     	; 0x223e <DIO_enutogpin+0x8a>
    21ec:	2c 81       	ldd	r18, Y+4	; 0x04
    21ee:	3d 81       	ldd	r19, Y+5	; 0x05
    21f0:	22 30       	cpi	r18, 0x02	; 2
    21f2:	31 05       	cpc	r19, r1
    21f4:	2c f4       	brge	.+10     	; 0x2200 <DIO_enutogpin+0x4c>
    21f6:	8c 81       	ldd	r24, Y+4	; 0x04
    21f8:	9d 81       	ldd	r25, Y+5	; 0x05
    21fa:	00 97       	sbiw	r24, 0x00	; 0
    21fc:	61 f0       	breq	.+24     	; 0x2216 <DIO_enutogpin+0x62>
    21fe:	5a c0       	rjmp	.+180    	; 0x22b4 <DIO_enutogpin+0x100>
    2200:	2c 81       	ldd	r18, Y+4	; 0x04
    2202:	3d 81       	ldd	r19, Y+5	; 0x05
    2204:	22 30       	cpi	r18, 0x02	; 2
    2206:	31 05       	cpc	r19, r1
    2208:	71 f1       	breq	.+92     	; 0x2266 <DIO_enutogpin+0xb2>
    220a:	8c 81       	ldd	r24, Y+4	; 0x04
    220c:	9d 81       	ldd	r25, Y+5	; 0x05
    220e:	83 30       	cpi	r24, 0x03	; 3
    2210:	91 05       	cpc	r25, r1
    2212:	e9 f1       	breq	.+122    	; 0x228e <DIO_enutogpin+0xda>
    2214:	4f c0       	rjmp	.+158    	; 0x22b4 <DIO_enutogpin+0x100>
					 case DIO_PORTA :
						PORTA^=(MASK_BIT<<copy_u8pinid);
    2216:	ab e3       	ldi	r26, 0x3B	; 59
    2218:	b0 e0       	ldi	r27, 0x00	; 0
    221a:	eb e3       	ldi	r30, 0x3B	; 59
    221c:	f0 e0       	ldi	r31, 0x00	; 0
    221e:	80 81       	ld	r24, Z
    2220:	48 2f       	mov	r20, r24
    2222:	8b 81       	ldd	r24, Y+3	; 0x03
    2224:	28 2f       	mov	r18, r24
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	81 e0       	ldi	r24, 0x01	; 1
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	02 2e       	mov	r0, r18
    222e:	02 c0       	rjmp	.+4      	; 0x2234 <DIO_enutogpin+0x80>
    2230:	88 0f       	add	r24, r24
    2232:	99 1f       	adc	r25, r25
    2234:	0a 94       	dec	r0
    2236:	e2 f7       	brpl	.-8      	; 0x2230 <DIO_enutogpin+0x7c>
    2238:	84 27       	eor	r24, r20
    223a:	8c 93       	st	X, r24
    223c:	3b c0       	rjmp	.+118    	; 0x22b4 <DIO_enutogpin+0x100>

					   break;
					 case DIO_PORTB :
						 PORTB^=(MASK_BIT<<copy_u8pinid);
    223e:	a8 e3       	ldi	r26, 0x38	; 56
    2240:	b0 e0       	ldi	r27, 0x00	; 0
    2242:	e8 e3       	ldi	r30, 0x38	; 56
    2244:	f0 e0       	ldi	r31, 0x00	; 0
    2246:	80 81       	ld	r24, Z
    2248:	48 2f       	mov	r20, r24
    224a:	8b 81       	ldd	r24, Y+3	; 0x03
    224c:	28 2f       	mov	r18, r24
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	81 e0       	ldi	r24, 0x01	; 1
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	02 2e       	mov	r0, r18
    2256:	02 c0       	rjmp	.+4      	; 0x225c <DIO_enutogpin+0xa8>
    2258:	88 0f       	add	r24, r24
    225a:	99 1f       	adc	r25, r25
    225c:	0a 94       	dec	r0
    225e:	e2 f7       	brpl	.-8      	; 0x2258 <DIO_enutogpin+0xa4>
    2260:	84 27       	eor	r24, r20
    2262:	8c 93       	st	X, r24
    2264:	27 c0       	rjmp	.+78     	; 0x22b4 <DIO_enutogpin+0x100>
						   break;
					 case DIO_PORTC :
						 PORTC^=(MASK_BIT<<copy_u8pinid);
    2266:	a5 e3       	ldi	r26, 0x35	; 53
    2268:	b0 e0       	ldi	r27, 0x00	; 0
    226a:	e5 e3       	ldi	r30, 0x35	; 53
    226c:	f0 e0       	ldi	r31, 0x00	; 0
    226e:	80 81       	ld	r24, Z
    2270:	48 2f       	mov	r20, r24
    2272:	8b 81       	ldd	r24, Y+3	; 0x03
    2274:	28 2f       	mov	r18, r24
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	81 e0       	ldi	r24, 0x01	; 1
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	02 2e       	mov	r0, r18
    227e:	02 c0       	rjmp	.+4      	; 0x2284 <DIO_enutogpin+0xd0>
    2280:	88 0f       	add	r24, r24
    2282:	99 1f       	adc	r25, r25
    2284:	0a 94       	dec	r0
    2286:	e2 f7       	brpl	.-8      	; 0x2280 <DIO_enutogpin+0xcc>
    2288:	84 27       	eor	r24, r20
    228a:	8c 93       	st	X, r24
    228c:	13 c0       	rjmp	.+38     	; 0x22b4 <DIO_enutogpin+0x100>
						   break;
					 case DIO_PORTD :
						 PORTD^=(MASK_BIT<<copy_u8pinid);
    228e:	a2 e3       	ldi	r26, 0x32	; 50
    2290:	b0 e0       	ldi	r27, 0x00	; 0
    2292:	e2 e3       	ldi	r30, 0x32	; 50
    2294:	f0 e0       	ldi	r31, 0x00	; 0
    2296:	80 81       	ld	r24, Z
    2298:	48 2f       	mov	r20, r24
    229a:	8b 81       	ldd	r24, Y+3	; 0x03
    229c:	28 2f       	mov	r18, r24
    229e:	30 e0       	ldi	r19, 0x00	; 0
    22a0:	81 e0       	ldi	r24, 0x01	; 1
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	02 2e       	mov	r0, r18
    22a6:	02 c0       	rjmp	.+4      	; 0x22ac <DIO_enutogpin+0xf8>
    22a8:	88 0f       	add	r24, r24
    22aa:	99 1f       	adc	r25, r25
    22ac:	0a 94       	dec	r0
    22ae:	e2 f7       	brpl	.-8      	; 0x22a8 <DIO_enutogpin+0xf4>
    22b0:	84 27       	eor	r24, r20
    22b2:	8c 93       	st	X, r24
						   break;
					 }
					  local_enuerrorstate=ES_OK;
    22b4:	19 82       	std	Y+1, r1	; 0x01
    22b6:	02 c0       	rjmp	.+4      	; 0x22bc <DIO_enutogpin+0x108>
				 }

		else  {local_enuerrorstate=ES_OUT_OF_RANGE;}
    22b8:	83 e0       	ldi	r24, 0x03	; 3
    22ba:	89 83       	std	Y+1, r24	; 0x01


		return local_enuerrorstate;
    22bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    22be:	0f 90       	pop	r0
    22c0:	0f 90       	pop	r0
    22c2:	0f 90       	pop	r0
    22c4:	0f 90       	pop	r0
    22c6:	0f 90       	pop	r0
    22c8:	cf 91       	pop	r28
    22ca:	df 91       	pop	r29
    22cc:	08 95       	ret

000022ce <DIO_enugetportval>:

ES_ERROR DIO_enugetportval(u8 copy_u8portid,u8* copy_pu8value){
    22ce:	df 93       	push	r29
    22d0:	cf 93       	push	r28
    22d2:	00 d0       	rcall	.+0      	; 0x22d4 <DIO_enugetportval+0x6>
    22d4:	00 d0       	rcall	.+0      	; 0x22d6 <DIO_enugetportval+0x8>
    22d6:	00 d0       	rcall	.+0      	; 0x22d8 <DIO_enugetportval+0xa>
    22d8:	cd b7       	in	r28, 0x3d	; 61
    22da:	de b7       	in	r29, 0x3e	; 62
    22dc:	8a 83       	std	Y+2, r24	; 0x02
    22de:	7c 83       	std	Y+4, r23	; 0x04
    22e0:	6b 83       	std	Y+3, r22	; 0x03
	ES_ERROR local_enuerrorstate=ES_OK;
    22e2:	19 82       	std	Y+1, r1	; 0x01
 if(copy_pu8value!=NULL){
    22e4:	8b 81       	ldd	r24, Y+3	; 0x03
    22e6:	9c 81       	ldd	r25, Y+4	; 0x04
    22e8:	00 97       	sbiw	r24, 0x00	; 0
    22ea:	09 f4       	brne	.+2      	; 0x22ee <DIO_enugetportval+0x20>
    22ec:	42 c0       	rjmp	.+132    	; 0x2372 <DIO_enugetportval+0xa4>
	 if( copy_u8portid<=DIO_PORTD){
    22ee:	8a 81       	ldd	r24, Y+2	; 0x02
    22f0:	84 30       	cpi	r24, 0x04	; 4
    22f2:	e0 f5       	brcc	.+120    	; 0x236c <DIO_enugetportval+0x9e>
	 		 switch(copy_u8portid){
    22f4:	8a 81       	ldd	r24, Y+2	; 0x02
    22f6:	28 2f       	mov	r18, r24
    22f8:	30 e0       	ldi	r19, 0x00	; 0
    22fa:	3e 83       	std	Y+6, r19	; 0x06
    22fc:	2d 83       	std	Y+5, r18	; 0x05
    22fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2300:	9e 81       	ldd	r25, Y+6	; 0x06
    2302:	81 30       	cpi	r24, 0x01	; 1
    2304:	91 05       	cpc	r25, r1
    2306:	e1 f0       	breq	.+56     	; 0x2340 <DIO_enugetportval+0x72>
    2308:	2d 81       	ldd	r18, Y+5	; 0x05
    230a:	3e 81       	ldd	r19, Y+6	; 0x06
    230c:	22 30       	cpi	r18, 0x02	; 2
    230e:	31 05       	cpc	r19, r1
    2310:	2c f4       	brge	.+10     	; 0x231c <DIO_enugetportval+0x4e>
    2312:	8d 81       	ldd	r24, Y+5	; 0x05
    2314:	9e 81       	ldd	r25, Y+6	; 0x06
    2316:	00 97       	sbiw	r24, 0x00	; 0
    2318:	61 f0       	breq	.+24     	; 0x2332 <DIO_enugetportval+0x64>
    231a:	26 c0       	rjmp	.+76     	; 0x2368 <DIO_enugetportval+0x9a>
    231c:	2d 81       	ldd	r18, Y+5	; 0x05
    231e:	3e 81       	ldd	r19, Y+6	; 0x06
    2320:	22 30       	cpi	r18, 0x02	; 2
    2322:	31 05       	cpc	r19, r1
    2324:	a1 f0       	breq	.+40     	; 0x234e <DIO_enugetportval+0x80>
    2326:	8d 81       	ldd	r24, Y+5	; 0x05
    2328:	9e 81       	ldd	r25, Y+6	; 0x06
    232a:	83 30       	cpi	r24, 0x03	; 3
    232c:	91 05       	cpc	r25, r1
    232e:	b1 f0       	breq	.+44     	; 0x235c <DIO_enugetportval+0x8e>
    2330:	1b c0       	rjmp	.+54     	; 0x2368 <DIO_enugetportval+0x9a>
	 		 case DIO_PORTA :
	 			* copy_pu8value=PINA;
    2332:	e9 e3       	ldi	r30, 0x39	; 57
    2334:	f0 e0       	ldi	r31, 0x00	; 0
    2336:	80 81       	ld	r24, Z
    2338:	eb 81       	ldd	r30, Y+3	; 0x03
    233a:	fc 81       	ldd	r31, Y+4	; 0x04
    233c:	80 83       	st	Z, r24
    233e:	14 c0       	rjmp	.+40     	; 0x2368 <DIO_enugetportval+0x9a>
	 		   break;
	 		 case DIO_PORTB :
	 			* copy_pu8value=PINB;
    2340:	e6 e3       	ldi	r30, 0x36	; 54
    2342:	f0 e0       	ldi	r31, 0x00	; 0
    2344:	80 81       	ld	r24, Z
    2346:	eb 81       	ldd	r30, Y+3	; 0x03
    2348:	fc 81       	ldd	r31, Y+4	; 0x04
    234a:	80 83       	st	Z, r24
    234c:	0d c0       	rjmp	.+26     	; 0x2368 <DIO_enugetportval+0x9a>
	 			   break;
	 		 case DIO_PORTC :
	 			* copy_pu8value=PINC;
    234e:	e3 e3       	ldi	r30, 0x33	; 51
    2350:	f0 e0       	ldi	r31, 0x00	; 0
    2352:	80 81       	ld	r24, Z
    2354:	eb 81       	ldd	r30, Y+3	; 0x03
    2356:	fc 81       	ldd	r31, Y+4	; 0x04
    2358:	80 83       	st	Z, r24
    235a:	06 c0       	rjmp	.+12     	; 0x2368 <DIO_enugetportval+0x9a>
	 			   break;
	 		 case DIO_PORTD :
	 			* copy_pu8value=PIND;
    235c:	e0 e3       	ldi	r30, 0x30	; 48
    235e:	f0 e0       	ldi	r31, 0x00	; 0
    2360:	80 81       	ld	r24, Z
    2362:	eb 81       	ldd	r30, Y+3	; 0x03
    2364:	fc 81       	ldd	r31, Y+4	; 0x04
    2366:	80 83       	st	Z, r24
	 			   break;
	 		 }
	 		  local_enuerrorstate=ES_OK;
    2368:	19 82       	std	Y+1, r1	; 0x01
    236a:	05 c0       	rjmp	.+10     	; 0x2376 <DIO_enugetportval+0xa8>
	 	 }
	 	 else{local_enuerrorstate=ES_OUT_OF_RANGE;}
    236c:	83 e0       	ldi	r24, 0x03	; 3
    236e:	89 83       	std	Y+1, r24	; 0x01
    2370:	02 c0       	rjmp	.+4      	; 0x2376 <DIO_enugetportval+0xa8>

	}


 else{
	 local_enuerrorstate=ES_NULL_POINTER;
    2372:	82 e0       	ldi	r24, 0x02	; 2
    2374:	89 83       	std	Y+1, r24	; 0x01
 }


		return local_enuerrorstate;
    2376:	89 81       	ldd	r24, Y+1	; 0x01
}
    2378:	26 96       	adiw	r28, 0x06	; 6
    237a:	0f b6       	in	r0, 0x3f	; 63
    237c:	f8 94       	cli
    237e:	de bf       	out	0x3e, r29	; 62
    2380:	0f be       	out	0x3f, r0	; 63
    2382:	cd bf       	out	0x3d, r28	; 61
    2384:	cf 91       	pop	r28
    2386:	df 91       	pop	r29
    2388:	08 95       	ret

0000238a <DIO_enugetpinval>:

ES_ERROR DIO_enugetpinval(u8 copy_u8portid,u8 copy_u8pinid,u8* copy_pu8value){
    238a:	df 93       	push	r29
    238c:	cf 93       	push	r28
    238e:	cd b7       	in	r28, 0x3d	; 61
    2390:	de b7       	in	r29, 0x3e	; 62
    2392:	27 97       	sbiw	r28, 0x07	; 7
    2394:	0f b6       	in	r0, 0x3f	; 63
    2396:	f8 94       	cli
    2398:	de bf       	out	0x3e, r29	; 62
    239a:	0f be       	out	0x3f, r0	; 63
    239c:	cd bf       	out	0x3d, r28	; 61
    239e:	8a 83       	std	Y+2, r24	; 0x02
    23a0:	6b 83       	std	Y+3, r22	; 0x03
    23a2:	5d 83       	std	Y+5, r21	; 0x05
    23a4:	4c 83       	std	Y+4, r20	; 0x04
	ES_ERROR local_enuerrorstate=ES_OK;
    23a6:	19 82       	std	Y+1, r1	; 0x01
	 if(copy_pu8value!=NULL){
    23a8:	8c 81       	ldd	r24, Y+4	; 0x04
    23aa:	9d 81       	ldd	r25, Y+5	; 0x05
    23ac:	00 97       	sbiw	r24, 0x00	; 0
    23ae:	09 f4       	brne	.+2      	; 0x23b2 <DIO_enugetpinval+0x28>
    23b0:	7d c0       	rjmp	.+250    	; 0x24ac <DIO_enugetpinval+0x122>
	if(copy_u8portid<=DIO_PORTD&& copy_u8pinid<=DIO_PIN7 ){
    23b2:	8a 81       	ldd	r24, Y+2	; 0x02
    23b4:	84 30       	cpi	r24, 0x04	; 4
    23b6:	08 f0       	brcs	.+2      	; 0x23ba <DIO_enugetpinval+0x30>
    23b8:	76 c0       	rjmp	.+236    	; 0x24a6 <DIO_enugetpinval+0x11c>
    23ba:	8b 81       	ldd	r24, Y+3	; 0x03
    23bc:	88 30       	cpi	r24, 0x08	; 8
    23be:	08 f0       	brcs	.+2      	; 0x23c2 <DIO_enugetpinval+0x38>
    23c0:	72 c0       	rjmp	.+228    	; 0x24a6 <DIO_enugetpinval+0x11c>

				 switch(copy_u8portid){
    23c2:	8a 81       	ldd	r24, Y+2	; 0x02
    23c4:	28 2f       	mov	r18, r24
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	3f 83       	std	Y+7, r19	; 0x07
    23ca:	2e 83       	std	Y+6, r18	; 0x06
    23cc:	4e 81       	ldd	r20, Y+6	; 0x06
    23ce:	5f 81       	ldd	r21, Y+7	; 0x07
    23d0:	41 30       	cpi	r20, 0x01	; 1
    23d2:	51 05       	cpc	r21, r1
    23d4:	59 f1       	breq	.+86     	; 0x242c <DIO_enugetpinval+0xa2>
    23d6:	8e 81       	ldd	r24, Y+6	; 0x06
    23d8:	9f 81       	ldd	r25, Y+7	; 0x07
    23da:	82 30       	cpi	r24, 0x02	; 2
    23dc:	91 05       	cpc	r25, r1
    23de:	34 f4       	brge	.+12     	; 0x23ec <DIO_enugetpinval+0x62>
    23e0:	2e 81       	ldd	r18, Y+6	; 0x06
    23e2:	3f 81       	ldd	r19, Y+7	; 0x07
    23e4:	21 15       	cp	r18, r1
    23e6:	31 05       	cpc	r19, r1
    23e8:	69 f0       	breq	.+26     	; 0x2404 <DIO_enugetpinval+0x7a>
    23ea:	5b c0       	rjmp	.+182    	; 0x24a2 <DIO_enugetpinval+0x118>
    23ec:	4e 81       	ldd	r20, Y+6	; 0x06
    23ee:	5f 81       	ldd	r21, Y+7	; 0x07
    23f0:	42 30       	cpi	r20, 0x02	; 2
    23f2:	51 05       	cpc	r21, r1
    23f4:	79 f1       	breq	.+94     	; 0x2454 <DIO_enugetpinval+0xca>
    23f6:	8e 81       	ldd	r24, Y+6	; 0x06
    23f8:	9f 81       	ldd	r25, Y+7	; 0x07
    23fa:	83 30       	cpi	r24, 0x03	; 3
    23fc:	91 05       	cpc	r25, r1
    23fe:	09 f4       	brne	.+2      	; 0x2402 <DIO_enugetpinval+0x78>
    2400:	3d c0       	rjmp	.+122    	; 0x247c <DIO_enugetpinval+0xf2>
    2402:	4f c0       	rjmp	.+158    	; 0x24a2 <DIO_enugetpinval+0x118>
				 case DIO_PORTA :
					 * copy_pu8value=	(PINA>>copy_u8pinid)&MASK_BIT;
    2404:	e9 e3       	ldi	r30, 0x39	; 57
    2406:	f0 e0       	ldi	r31, 0x00	; 0
    2408:	80 81       	ld	r24, Z
    240a:	28 2f       	mov	r18, r24
    240c:	30 e0       	ldi	r19, 0x00	; 0
    240e:	8b 81       	ldd	r24, Y+3	; 0x03
    2410:	88 2f       	mov	r24, r24
    2412:	90 e0       	ldi	r25, 0x00	; 0
    2414:	a9 01       	movw	r20, r18
    2416:	02 c0       	rjmp	.+4      	; 0x241c <DIO_enugetpinval+0x92>
    2418:	55 95       	asr	r21
    241a:	47 95       	ror	r20
    241c:	8a 95       	dec	r24
    241e:	e2 f7       	brpl	.-8      	; 0x2418 <DIO_enugetpinval+0x8e>
    2420:	ca 01       	movw	r24, r20
    2422:	81 70       	andi	r24, 0x01	; 1
    2424:	ec 81       	ldd	r30, Y+4	; 0x04
    2426:	fd 81       	ldd	r31, Y+5	; 0x05
    2428:	80 83       	st	Z, r24
    242a:	3b c0       	rjmp	.+118    	; 0x24a2 <DIO_enugetpinval+0x118>
				   break;
				 case DIO_PORTB :
					 * copy_pu8value=	(PINB>>copy_u8pinid)&MASK_BIT;
    242c:	e6 e3       	ldi	r30, 0x36	; 54
    242e:	f0 e0       	ldi	r31, 0x00	; 0
    2430:	80 81       	ld	r24, Z
    2432:	28 2f       	mov	r18, r24
    2434:	30 e0       	ldi	r19, 0x00	; 0
    2436:	8b 81       	ldd	r24, Y+3	; 0x03
    2438:	88 2f       	mov	r24, r24
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	a9 01       	movw	r20, r18
    243e:	02 c0       	rjmp	.+4      	; 0x2444 <DIO_enugetpinval+0xba>
    2440:	55 95       	asr	r21
    2442:	47 95       	ror	r20
    2444:	8a 95       	dec	r24
    2446:	e2 f7       	brpl	.-8      	; 0x2440 <DIO_enugetpinval+0xb6>
    2448:	ca 01       	movw	r24, r20
    244a:	81 70       	andi	r24, 0x01	; 1
    244c:	ec 81       	ldd	r30, Y+4	; 0x04
    244e:	fd 81       	ldd	r31, Y+5	; 0x05
    2450:	80 83       	st	Z, r24
    2452:	27 c0       	rjmp	.+78     	; 0x24a2 <DIO_enugetpinval+0x118>
					   break;
				 case DIO_PORTC :
					 * copy_pu8value=	(PINC>>copy_u8pinid)&MASK_BIT;
    2454:	e3 e3       	ldi	r30, 0x33	; 51
    2456:	f0 e0       	ldi	r31, 0x00	; 0
    2458:	80 81       	ld	r24, Z
    245a:	28 2f       	mov	r18, r24
    245c:	30 e0       	ldi	r19, 0x00	; 0
    245e:	8b 81       	ldd	r24, Y+3	; 0x03
    2460:	88 2f       	mov	r24, r24
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	a9 01       	movw	r20, r18
    2466:	02 c0       	rjmp	.+4      	; 0x246c <DIO_enugetpinval+0xe2>
    2468:	55 95       	asr	r21
    246a:	47 95       	ror	r20
    246c:	8a 95       	dec	r24
    246e:	e2 f7       	brpl	.-8      	; 0x2468 <DIO_enugetpinval+0xde>
    2470:	ca 01       	movw	r24, r20
    2472:	81 70       	andi	r24, 0x01	; 1
    2474:	ec 81       	ldd	r30, Y+4	; 0x04
    2476:	fd 81       	ldd	r31, Y+5	; 0x05
    2478:	80 83       	st	Z, r24
    247a:	13 c0       	rjmp	.+38     	; 0x24a2 <DIO_enugetpinval+0x118>
					   break;
				 case DIO_PORTD :
					 * copy_pu8value=	(PIND>>copy_u8pinid)&MASK_BIT;
    247c:	e0 e3       	ldi	r30, 0x30	; 48
    247e:	f0 e0       	ldi	r31, 0x00	; 0
    2480:	80 81       	ld	r24, Z
    2482:	28 2f       	mov	r18, r24
    2484:	30 e0       	ldi	r19, 0x00	; 0
    2486:	8b 81       	ldd	r24, Y+3	; 0x03
    2488:	88 2f       	mov	r24, r24
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	a9 01       	movw	r20, r18
    248e:	02 c0       	rjmp	.+4      	; 0x2494 <DIO_enugetpinval+0x10a>
    2490:	55 95       	asr	r21
    2492:	47 95       	ror	r20
    2494:	8a 95       	dec	r24
    2496:	e2 f7       	brpl	.-8      	; 0x2490 <DIO_enugetpinval+0x106>
    2498:	ca 01       	movw	r24, r20
    249a:	81 70       	andi	r24, 0x01	; 1
    249c:	ec 81       	ldd	r30, Y+4	; 0x04
    249e:	fd 81       	ldd	r31, Y+5	; 0x05
    24a0:	80 83       	st	Z, r24
					   break;
				 }
				  local_enuerrorstate=ES_OK;
    24a2:	19 82       	std	Y+1, r1	; 0x01
    24a4:	05 c0       	rjmp	.+10     	; 0x24b0 <DIO_enugetpinval+0x126>
			 }

	else  {local_enuerrorstate=ES_OUT_OF_RANGE;}}
    24a6:	83 e0       	ldi	r24, 0x03	; 3
    24a8:	89 83       	std	Y+1, r24	; 0x01
    24aa:	02 c0       	rjmp	.+4      	; 0x24b0 <DIO_enugetpinval+0x126>
	else local_enuerrorstate=ES_NULL_POINTER;
    24ac:	82 e0       	ldi	r24, 0x02	; 2
    24ae:	89 83       	std	Y+1, r24	; 0x01

		return local_enuerrorstate;
    24b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    24b2:	27 96       	adiw	r28, 0x07	; 7
    24b4:	0f b6       	in	r0, 0x3f	; 63
    24b6:	f8 94       	cli
    24b8:	de bf       	out	0x3e, r29	; 62
    24ba:	0f be       	out	0x3f, r0	; 63
    24bc:	cd bf       	out	0x3d, r28	; 61
    24be:	cf 91       	pop	r28
    24c0:	df 91       	pop	r29
    24c2:	08 95       	ret

000024c4 <KEYPAD_Init>:
#include "KEYPAD_config.h"
#include "KEYPAD_priv.h"



void KEYPAD_Init(void) {
    24c4:	df 93       	push	r29
    24c6:	cf 93       	push	r28
    24c8:	cd b7       	in	r28, 0x3d	; 61
    24ca:	de b7       	in	r29, 0x3e	; 62

    DIO_enuSetpindir(DIO_u8PORTC, DIO_u8PIN4, DIO_u8INPUT);
    24cc:	82 e0       	ldi	r24, 0x02	; 2
    24ce:	64 e0       	ldi	r22, 0x04	; 4
    24d0:	40 e0       	ldi	r20, 0x00	; 0
    24d2:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <DIO_enuSetpindir>
    DIO_enuSetpindir(DIO_u8PORTC, DIO_u8PIN5, DIO_u8INPUT);
    24d6:	82 e0       	ldi	r24, 0x02	; 2
    24d8:	65 e0       	ldi	r22, 0x05	; 5
    24da:	40 e0       	ldi	r20, 0x00	; 0
    24dc:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <DIO_enuSetpindir>
    DIO_enuSetpindir(DIO_u8PORTC, DIO_u8PIN6, DIO_u8INPUT);
    24e0:	82 e0       	ldi	r24, 0x02	; 2
    24e2:	66 e0       	ldi	r22, 0x06	; 6
    24e4:	40 e0       	ldi	r20, 0x00	; 0
    24e6:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <DIO_enuSetpindir>
    DIO_enuSetpindir(DIO_u8PORTC, DIO_u8PIN7, DIO_u8INPUT);
    24ea:	82 e0       	ldi	r24, 0x02	; 2
    24ec:	67 e0       	ldi	r22, 0x07	; 7
    24ee:	40 e0       	ldi	r20, 0x00	; 0
    24f0:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <DIO_enuSetpindir>

    DIO_enuSetpindir(DIO_u8PORTC, DIO_u8PIN0,  DIO_u8OUTPUT);
    24f4:	82 e0       	ldi	r24, 0x02	; 2
    24f6:	60 e0       	ldi	r22, 0x00	; 0
    24f8:	41 e0       	ldi	r20, 0x01	; 1
    24fa:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <DIO_enuSetpindir>
    DIO_enuSetpindir(DIO_u8PORTC, DIO_u8PIN1, DIO_u8OUTPUT );
    24fe:	82 e0       	ldi	r24, 0x02	; 2
    2500:	61 e0       	ldi	r22, 0x01	; 1
    2502:	41 e0       	ldi	r20, 0x01	; 1
    2504:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <DIO_enuSetpindir>
    DIO_enuSetpindir(DIO_u8PORTC, DIO_u8PIN2, DIO_u8OUTPUT );
    2508:	82 e0       	ldi	r24, 0x02	; 2
    250a:	62 e0       	ldi	r22, 0x02	; 2
    250c:	41 e0       	ldi	r20, 0x01	; 1
    250e:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <DIO_enuSetpindir>
    DIO_enuSetpindir(DIO_u8PORTC, DIO_u8PIN3, DIO_u8OUTPUT );
    2512:	82 e0       	ldi	r24, 0x02	; 2
    2514:	63 e0       	ldi	r22, 0x03	; 3
    2516:	41 e0       	ldi	r20, 0x01	; 1
    2518:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <DIO_enuSetpindir>

    DIO_enuSetpinval(DIO_u8PORTC, DIO_u8PIN4, DIO_u8PULLUP);
    251c:	82 e0       	ldi	r24, 0x02	; 2
    251e:	64 e0       	ldi	r22, 0x04	; 4
    2520:	41 e0       	ldi	r20, 0x01	; 1
    2522:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <DIO_enuSetpinval>
    DIO_enuSetpinval(DIO_u8PORTC, DIO_u8PIN5, DIO_u8PULLUP);
    2526:	82 e0       	ldi	r24, 0x02	; 2
    2528:	65 e0       	ldi	r22, 0x05	; 5
    252a:	41 e0       	ldi	r20, 0x01	; 1
    252c:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <DIO_enuSetpinval>
    DIO_enuSetpinval(DIO_u8PORTC, DIO_u8PIN6, DIO_u8PULLUP);
    2530:	82 e0       	ldi	r24, 0x02	; 2
    2532:	66 e0       	ldi	r22, 0x06	; 6
    2534:	41 e0       	ldi	r20, 0x01	; 1
    2536:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <DIO_enuSetpinval>
    DIO_enuSetpinval(DIO_u8PORTC, DIO_u8PIN7, DIO_u8PULLUP);
    253a:	82 e0       	ldi	r24, 0x02	; 2
    253c:	67 e0       	ldi	r22, 0x07	; 7
    253e:	41 e0       	ldi	r20, 0x01	; 1
    2540:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <DIO_enuSetpinval>
}
    2544:	cf 91       	pop	r28
    2546:	df 91       	pop	r29
    2548:	08 95       	ret

0000254a <KEYPAD_enuGetpressedKey>:




u8 KEYPAD_enuGetpressedKey(void)
{
    254a:	df 93       	push	r29
    254c:	cf 93       	push	r28
    254e:	00 d0       	rcall	.+0      	; 0x2550 <KEYPAD_enuGetpressedKey+0x6>
    2550:	00 d0       	rcall	.+0      	; 0x2552 <KEYPAD_enuGetpressedKey+0x8>
    2552:	0f 92       	push	r0
    2554:	cd b7       	in	r28, 0x3d	; 61
    2556:	de b7       	in	r29, 0x3e	; 62

    u8 local_u8pressedKey= KEYPAD_NO_PRESSED_KEY;
    2558:	83 e4       	ldi	r24, 0x43	; 67
    255a:	8b 83       	std	Y+3, r24	; 0x03
static	u8 local_u8ketpadArr[4][4]=KEYPAD_ARR;
static	u8 local_u8AkeypadColumnArr[COLUMN_NUM]={KEYPAD_COLUMN0_PIN ,KEYPAD_COLUMN1_PIN ,KEYPAD_COLUMN2_PIN,KEYPAD_COLUMN3_PIN};
static	u8 local_u8AkeypadRowArr[ROW_NUM]={KEYPAD_ROW0_PIN ,KEYPAD_ROW1_PIN ,KEYPAD_ROW2_PIN,KEYPAD_ROW3_PIN};

	u8 local_u8ColumnIter=0;
    255c:	1a 82       	std	Y+2, r1	; 0x02
	u8 local_u8RowIter=0;
    255e:	19 82       	std	Y+1, r1	; 0x01

  for(local_u8ColumnIter=0;local_u8ColumnIter<COLUMN_NUM;local_u8ColumnIter++)
    2560:	1a 82       	std	Y+2, r1	; 0x02
    2562:	60 c0       	rjmp	.+192    	; 0x2624 <KEYPAD_enuGetpressedKey+0xda>
  {
	  //activate currant column
	   DIO_enuSetpinval(KEYPAD_PORT,local_u8AkeypadColumnArr[local_u8ColumnIter],DIO_u8LOW);
    2564:	8a 81       	ldd	r24, Y+2	; 0x02
    2566:	88 2f       	mov	r24, r24
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	fc 01       	movw	r30, r24
    256c:	ef 54       	subi	r30, 0x4F	; 79
    256e:	ff 4f       	sbci	r31, 0xFF	; 255
    2570:	90 81       	ld	r25, Z
    2572:	82 e0       	ldi	r24, 0x02	; 2
    2574:	69 2f       	mov	r22, r25
    2576:	40 e0       	ldi	r20, 0x00	; 0
    2578:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <DIO_enuSetpinval>
	  // _delay_ms(10);
       for(local_u8RowIter=0; local_u8RowIter<ROW_NUM; local_u8RowIter++)
    257c:	19 82       	std	Y+1, r1	; 0x01
    257e:	3f c0       	rjmp	.+126    	; 0x25fe <KEYPAD_enuGetpressedKey+0xb4>
       {
    	   u8 local_u8RowVal=KEYPAD_NO_PRESSED_KEY;
    2580:	83 e4       	ldi	r24, 0x43	; 67
    2582:	8c 83       	std	Y+4, r24	; 0x04
    	   DIO_enugetpinval(KEYPAD_PORT,local_u8AkeypadRowArr[local_u8RowIter],&local_u8RowVal);
    2584:	89 81       	ldd	r24, Y+1	; 0x01
    2586:	88 2f       	mov	r24, r24
    2588:	90 e0       	ldi	r25, 0x00	; 0
    258a:	fc 01       	movw	r30, r24
    258c:	e3 55       	subi	r30, 0x53	; 83
    258e:	ff 4f       	sbci	r31, 0xFF	; 255
    2590:	90 81       	ld	r25, Z
    2592:	9e 01       	movw	r18, r28
    2594:	2c 5f       	subi	r18, 0xFC	; 252
    2596:	3f 4f       	sbci	r19, 0xFF	; 255
    2598:	82 e0       	ldi	r24, 0x02	; 2
    259a:	69 2f       	mov	r22, r25
    259c:	a9 01       	movw	r20, r18
    259e:	0e 94 c5 11 	call	0x238a	; 0x238a <DIO_enugetpinval>

    	 //check if switch is pressed
    	   if(local_u8RowVal==DIO_u8LOW){
    25a2:	8c 81       	ldd	r24, Y+4	; 0x04
    25a4:	88 23       	and	r24, r24
    25a6:	41 f5       	brne	.+80     	; 0x25f8 <KEYPAD_enuGetpressedKey+0xae>
    		  local_u8pressedKey=local_u8ketpadArr[local_u8RowIter][local_u8ColumnIter];
    25a8:	89 81       	ldd	r24, Y+1	; 0x01
    25aa:	48 2f       	mov	r20, r24
    25ac:	50 e0       	ldi	r21, 0x00	; 0
    25ae:	8a 81       	ldd	r24, Y+2	; 0x02
    25b0:	28 2f       	mov	r18, r24
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	ca 01       	movw	r24, r20
    25b6:	88 0f       	add	r24, r24
    25b8:	99 1f       	adc	r25, r25
    25ba:	88 0f       	add	r24, r24
    25bc:	99 1f       	adc	r25, r25
    25be:	82 0f       	add	r24, r18
    25c0:	93 1f       	adc	r25, r19
    25c2:	fc 01       	movw	r30, r24
    25c4:	eb 54       	subi	r30, 0x4B	; 75
    25c6:	ff 4f       	sbci	r31, 0xFF	; 255
    25c8:	80 81       	ld	r24, Z
    25ca:	8b 83       	std	Y+3, r24	; 0x03
    25cc:	0f c0       	rjmp	.+30     	; 0x25ec <KEYPAD_enuGetpressedKey+0xa2>
    	   //polling until the key is released
    	   while(local_u8RowVal==DIO_u8LOW)
    	    {
    	    	DIO_enugetpinval(KEYPAD_PORT,local_u8AkeypadRowArr[local_u8RowIter],&local_u8RowVal);
    25ce:	89 81       	ldd	r24, Y+1	; 0x01
    25d0:	88 2f       	mov	r24, r24
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	fc 01       	movw	r30, r24
    25d6:	e3 55       	subi	r30, 0x53	; 83
    25d8:	ff 4f       	sbci	r31, 0xFF	; 255
    25da:	90 81       	ld	r25, Z
    25dc:	9e 01       	movw	r18, r28
    25de:	2c 5f       	subi	r18, 0xFC	; 252
    25e0:	3f 4f       	sbci	r19, 0xFF	; 255
    25e2:	82 e0       	ldi	r24, 0x02	; 2
    25e4:	69 2f       	mov	r22, r25
    25e6:	a9 01       	movw	r20, r18
    25e8:	0e 94 c5 11 	call	0x238a	; 0x238a <DIO_enugetpinval>

    	 //check if switch is pressed
    	   if(local_u8RowVal==DIO_u8LOW){
    		  local_u8pressedKey=local_u8ketpadArr[local_u8RowIter][local_u8ColumnIter];
    	   //polling until the key is released
    	   while(local_u8RowVal==DIO_u8LOW)
    25ec:	8c 81       	ldd	r24, Y+4	; 0x04
    25ee:	88 23       	and	r24, r24
    25f0:	71 f3       	breq	.-36     	; 0x25ce <KEYPAD_enuGetpressedKey+0x84>
    	    {
    	    	DIO_enugetpinval(KEYPAD_PORT,local_u8AkeypadRowArr[local_u8RowIter],&local_u8RowVal);


    	    }
    	   return local_u8pressedKey;
    25f2:	8b 81       	ldd	r24, Y+3	; 0x03
    25f4:	8d 83       	std	Y+5, r24	; 0x05
    25f6:	1c c0       	rjmp	.+56     	; 0x2630 <KEYPAD_enuGetpressedKey+0xe6>
  for(local_u8ColumnIter=0;local_u8ColumnIter<COLUMN_NUM;local_u8ColumnIter++)
  {
	  //activate currant column
	   DIO_enuSetpinval(KEYPAD_PORT,local_u8AkeypadColumnArr[local_u8ColumnIter],DIO_u8LOW);
	  // _delay_ms(10);
       for(local_u8RowIter=0; local_u8RowIter<ROW_NUM; local_u8RowIter++)
    25f8:	89 81       	ldd	r24, Y+1	; 0x01
    25fa:	8f 5f       	subi	r24, 0xFF	; 255
    25fc:	89 83       	std	Y+1, r24	; 0x01
    25fe:	89 81       	ldd	r24, Y+1	; 0x01
    2600:	84 30       	cpi	r24, 0x04	; 4
    2602:	08 f4       	brcc	.+2      	; 0x2606 <KEYPAD_enuGetpressedKey+0xbc>
    2604:	bd cf       	rjmp	.-134    	; 0x2580 <KEYPAD_enuGetpressedKey+0x36>
    	   return local_u8pressedKey;

       }
       }
       //deactivate currant column
       DIO_enuSetpinval(KEYPAD_PORT,local_u8AkeypadColumnArr[local_u8ColumnIter],DIO_u8HIGH);
    2606:	8a 81       	ldd	r24, Y+2	; 0x02
    2608:	88 2f       	mov	r24, r24
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	fc 01       	movw	r30, r24
    260e:	ef 54       	subi	r30, 0x4F	; 79
    2610:	ff 4f       	sbci	r31, 0xFF	; 255
    2612:	90 81       	ld	r25, Z
    2614:	82 e0       	ldi	r24, 0x02	; 2
    2616:	69 2f       	mov	r22, r25
    2618:	41 e0       	ldi	r20, 0x01	; 1
    261a:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <DIO_enuSetpinval>
static	u8 local_u8AkeypadRowArr[ROW_NUM]={KEYPAD_ROW0_PIN ,KEYPAD_ROW1_PIN ,KEYPAD_ROW2_PIN,KEYPAD_ROW3_PIN};

	u8 local_u8ColumnIter=0;
	u8 local_u8RowIter=0;

  for(local_u8ColumnIter=0;local_u8ColumnIter<COLUMN_NUM;local_u8ColumnIter++)
    261e:	8a 81       	ldd	r24, Y+2	; 0x02
    2620:	8f 5f       	subi	r24, 0xFF	; 255
    2622:	8a 83       	std	Y+2, r24	; 0x02
    2624:	8a 81       	ldd	r24, Y+2	; 0x02
    2626:	84 30       	cpi	r24, 0x04	; 4
    2628:	08 f4       	brcc	.+2      	; 0x262c <KEYPAD_enuGetpressedKey+0xe2>
    262a:	9c cf       	rjmp	.-200    	; 0x2564 <KEYPAD_enuGetpressedKey+0x1a>
       DIO_enuSetpinval(KEYPAD_PORT,local_u8AkeypadColumnArr[local_u8ColumnIter],DIO_u8HIGH);


  }

  return local_u8pressedKey;
    262c:	8b 81       	ldd	r24, Y+3	; 0x03
    262e:	8d 83       	std	Y+5, r24	; 0x05
    2630:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2632:	0f 90       	pop	r0
    2634:	0f 90       	pop	r0
    2636:	0f 90       	pop	r0
    2638:	0f 90       	pop	r0
    263a:	0f 90       	pop	r0
    263c:	cf 91       	pop	r28
    263e:	df 91       	pop	r29
    2640:	08 95       	ret

00002642 <LCD_enuInit>:
#include"util/delay.h"



ES_ERROR LCD_enuInit(void)
{
    2642:	df 93       	push	r29
    2644:	cf 93       	push	r28
    2646:	cd b7       	in	r28, 0x3d	; 61
    2648:	de b7       	in	r29, 0x3e	; 62
    264a:	e9 97       	sbiw	r28, 0x39	; 57
    264c:	0f b6       	in	r0, 0x3f	; 63
    264e:	f8 94       	cli
    2650:	de bf       	out	0x3e, r29	; 62
    2652:	0f be       	out	0x3f, r0	; 63
    2654:	cd bf       	out	0x3d, r28	; 61
	ES_ERROR local_enuErrorState = ES_OK;
    2656:	19 ae       	std	Y+57, r1	; 0x39

local_enuErrorState|=DIO_enuSetpindir(RS_PORT, RS_PIN, DIO_u8OUTPUT);
    2658:	81 e0       	ldi	r24, 0x01	; 1
    265a:	62 e0       	ldi	r22, 0x02	; 2
    265c:	41 e0       	ldi	r20, 0x01	; 1
    265e:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <DIO_enuSetpindir>
    2662:	98 2f       	mov	r25, r24
    2664:	89 ad       	ldd	r24, Y+57	; 0x39
    2666:	89 2b       	or	r24, r25
    2668:	89 af       	std	Y+57, r24	; 0x39
local_enuErrorState|=DIO_enuSetpindir(RW_PORT, RW_PIN, DIO_u8OUTPUT);
    266a:	81 e0       	ldi	r24, 0x01	; 1
    266c:	61 e0       	ldi	r22, 0x01	; 1
    266e:	41 e0       	ldi	r20, 0x01	; 1
    2670:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <DIO_enuSetpindir>
    2674:	98 2f       	mov	r25, r24
    2676:	89 ad       	ldd	r24, Y+57	; 0x39
    2678:	89 2b       	or	r24, r25
    267a:	89 af       	std	Y+57, r24	; 0x39
local_enuErrorState|=DIO_enuSetpindir(EN_PORT, EN_PIN, DIO_u8OUTPUT);
    267c:	81 e0       	ldi	r24, 0x01	; 1
    267e:	60 e0       	ldi	r22, 0x00	; 0
    2680:	41 e0       	ldi	r20, 0x01	; 1
    2682:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <DIO_enuSetpindir>
    2686:	98 2f       	mov	r25, r24
    2688:	89 ad       	ldd	r24, Y+57	; 0x39
    268a:	89 2b       	or	r24, r25
    268c:	89 af       	std	Y+57, r24	; 0x39

local_enuErrorState|=DIO_enuSetpindir(D7_PORT, D7_PIN, DIO_u8OUTPUT);
    268e:	80 e0       	ldi	r24, 0x00	; 0
    2690:	60 e0       	ldi	r22, 0x00	; 0
    2692:	41 e0       	ldi	r20, 0x01	; 1
    2694:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <DIO_enuSetpindir>
    2698:	98 2f       	mov	r25, r24
    269a:	89 ad       	ldd	r24, Y+57	; 0x39
    269c:	89 2b       	or	r24, r25
    269e:	89 af       	std	Y+57, r24	; 0x39
local_enuErrorState|=DIO_enuSetpindir(D6_PORT, D6_PIN, DIO_u8OUTPUT);
    26a0:	80 e0       	ldi	r24, 0x00	; 0
    26a2:	61 e0       	ldi	r22, 0x01	; 1
    26a4:	41 e0       	ldi	r20, 0x01	; 1
    26a6:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <DIO_enuSetpindir>
    26aa:	98 2f       	mov	r25, r24
    26ac:	89 ad       	ldd	r24, Y+57	; 0x39
    26ae:	89 2b       	or	r24, r25
    26b0:	89 af       	std	Y+57, r24	; 0x39
local_enuErrorState|=DIO_enuSetpindir(D5_PORT, D5_PIN, DIO_u8OUTPUT);
    26b2:	80 e0       	ldi	r24, 0x00	; 0
    26b4:	62 e0       	ldi	r22, 0x02	; 2
    26b6:	41 e0       	ldi	r20, 0x01	; 1
    26b8:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <DIO_enuSetpindir>
    26bc:	98 2f       	mov	r25, r24
    26be:	89 ad       	ldd	r24, Y+57	; 0x39
    26c0:	89 2b       	or	r24, r25
    26c2:	89 af       	std	Y+57, r24	; 0x39
local_enuErrorState|=DIO_enuSetpindir(D4_PORT, D4_PIN, DIO_u8OUTPUT);
    26c4:	80 e0       	ldi	r24, 0x00	; 0
    26c6:	63 e0       	ldi	r22, 0x03	; 3
    26c8:	41 e0       	ldi	r20, 0x01	; 1
    26ca:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <DIO_enuSetpindir>
    26ce:	98 2f       	mov	r25, r24
    26d0:	89 ad       	ldd	r24, Y+57	; 0x39
    26d2:	89 2b       	or	r24, r25
    26d4:	89 af       	std	Y+57, r24	; 0x39
    26d6:	80 e0       	ldi	r24, 0x00	; 0
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	ac e0       	ldi	r26, 0x0C	; 12
    26dc:	b2 e4       	ldi	r27, 0x42	; 66
    26de:	8d ab       	std	Y+53, r24	; 0x35
    26e0:	9e ab       	std	Y+54, r25	; 0x36
    26e2:	af ab       	std	Y+55, r26	; 0x37
    26e4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26e6:	6d a9       	ldd	r22, Y+53	; 0x35
    26e8:	7e a9       	ldd	r23, Y+54	; 0x36
    26ea:	8f a9       	ldd	r24, Y+55	; 0x37
    26ec:	98 ad       	ldd	r25, Y+56	; 0x38
    26ee:	20 e0       	ldi	r18, 0x00	; 0
    26f0:	30 e0       	ldi	r19, 0x00	; 0
    26f2:	4a e7       	ldi	r20, 0x7A	; 122
    26f4:	53 e4       	ldi	r21, 0x43	; 67
    26f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26fa:	dc 01       	movw	r26, r24
    26fc:	cb 01       	movw	r24, r22
    26fe:	89 ab       	std	Y+49, r24	; 0x31
    2700:	9a ab       	std	Y+50, r25	; 0x32
    2702:	ab ab       	std	Y+51, r26	; 0x33
    2704:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2706:	69 a9       	ldd	r22, Y+49	; 0x31
    2708:	7a a9       	ldd	r23, Y+50	; 0x32
    270a:	8b a9       	ldd	r24, Y+51	; 0x33
    270c:	9c a9       	ldd	r25, Y+52	; 0x34
    270e:	20 e0       	ldi	r18, 0x00	; 0
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	40 e8       	ldi	r20, 0x80	; 128
    2714:	5f e3       	ldi	r21, 0x3F	; 63
    2716:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    271a:	88 23       	and	r24, r24
    271c:	2c f4       	brge	.+10     	; 0x2728 <LCD_enuInit+0xe6>
		__ticks = 1;
    271e:	81 e0       	ldi	r24, 0x01	; 1
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	98 ab       	std	Y+48, r25	; 0x30
    2724:	8f a7       	std	Y+47, r24	; 0x2f
    2726:	3f c0       	rjmp	.+126    	; 0x27a6 <LCD_enuInit+0x164>
	else if (__tmp > 65535)
    2728:	69 a9       	ldd	r22, Y+49	; 0x31
    272a:	7a a9       	ldd	r23, Y+50	; 0x32
    272c:	8b a9       	ldd	r24, Y+51	; 0x33
    272e:	9c a9       	ldd	r25, Y+52	; 0x34
    2730:	20 e0       	ldi	r18, 0x00	; 0
    2732:	3f ef       	ldi	r19, 0xFF	; 255
    2734:	4f e7       	ldi	r20, 0x7F	; 127
    2736:	57 e4       	ldi	r21, 0x47	; 71
    2738:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    273c:	18 16       	cp	r1, r24
    273e:	4c f5       	brge	.+82     	; 0x2792 <LCD_enuInit+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2740:	6d a9       	ldd	r22, Y+53	; 0x35
    2742:	7e a9       	ldd	r23, Y+54	; 0x36
    2744:	8f a9       	ldd	r24, Y+55	; 0x37
    2746:	98 ad       	ldd	r25, Y+56	; 0x38
    2748:	20 e0       	ldi	r18, 0x00	; 0
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	40 e2       	ldi	r20, 0x20	; 32
    274e:	51 e4       	ldi	r21, 0x41	; 65
    2750:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2754:	dc 01       	movw	r26, r24
    2756:	cb 01       	movw	r24, r22
    2758:	bc 01       	movw	r22, r24
    275a:	cd 01       	movw	r24, r26
    275c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2760:	dc 01       	movw	r26, r24
    2762:	cb 01       	movw	r24, r22
    2764:	98 ab       	std	Y+48, r25	; 0x30
    2766:	8f a7       	std	Y+47, r24	; 0x2f
    2768:	0f c0       	rjmp	.+30     	; 0x2788 <LCD_enuInit+0x146>
    276a:	89 e1       	ldi	r24, 0x19	; 25
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	9e a7       	std	Y+46, r25	; 0x2e
    2770:	8d a7       	std	Y+45, r24	; 0x2d
    2772:	8d a5       	ldd	r24, Y+45	; 0x2d
    2774:	9e a5       	ldd	r25, Y+46	; 0x2e
    2776:	01 97       	sbiw	r24, 0x01	; 1
    2778:	f1 f7       	brne	.-4      	; 0x2776 <LCD_enuInit+0x134>
    277a:	9e a7       	std	Y+46, r25	; 0x2e
    277c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    277e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2780:	98 a9       	ldd	r25, Y+48	; 0x30
    2782:	01 97       	sbiw	r24, 0x01	; 1
    2784:	98 ab       	std	Y+48, r25	; 0x30
    2786:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2788:	8f a5       	ldd	r24, Y+47	; 0x2f
    278a:	98 a9       	ldd	r25, Y+48	; 0x30
    278c:	00 97       	sbiw	r24, 0x00	; 0
    278e:	69 f7       	brne	.-38     	; 0x276a <LCD_enuInit+0x128>
    2790:	14 c0       	rjmp	.+40     	; 0x27ba <LCD_enuInit+0x178>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2792:	69 a9       	ldd	r22, Y+49	; 0x31
    2794:	7a a9       	ldd	r23, Y+50	; 0x32
    2796:	8b a9       	ldd	r24, Y+51	; 0x33
    2798:	9c a9       	ldd	r25, Y+52	; 0x34
    279a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    279e:	dc 01       	movw	r26, r24
    27a0:	cb 01       	movw	r24, r22
    27a2:	98 ab       	std	Y+48, r25	; 0x30
    27a4:	8f a7       	std	Y+47, r24	; 0x2f
    27a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    27a8:	98 a9       	ldd	r25, Y+48	; 0x30
    27aa:	9c a7       	std	Y+44, r25	; 0x2c
    27ac:	8b a7       	std	Y+43, r24	; 0x2b
    27ae:	8b a5       	ldd	r24, Y+43	; 0x2b
    27b0:	9c a5       	ldd	r25, Y+44	; 0x2c
    27b2:	01 97       	sbiw	r24, 0x01	; 1
    27b4:	f1 f7       	brne	.-4      	; 0x27b2 <LCD_enuInit+0x170>
    27b6:	9c a7       	std	Y+44, r25	; 0x2c
    27b8:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(35);

#if LCD_MODE == EIGHT_BIT

local_enuErrorState|=DIO_enuSetpindir(D3_PORT, D3_PIN, DIO_u8OUTPUT);
    27ba:	80 e0       	ldi	r24, 0x00	; 0
    27bc:	64 e0       	ldi	r22, 0x04	; 4
    27be:	41 e0       	ldi	r20, 0x01	; 1
    27c0:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <DIO_enuSetpindir>
    27c4:	98 2f       	mov	r25, r24
    27c6:	89 ad       	ldd	r24, Y+57	; 0x39
    27c8:	89 2b       	or	r24, r25
    27ca:	89 af       	std	Y+57, r24	; 0x39
local_enuErrorState|=DIO_enuSetpindir(D2_PORT, D2_PIN, DIO_u8OUTPUT);
    27cc:	80 e0       	ldi	r24, 0x00	; 0
    27ce:	65 e0       	ldi	r22, 0x05	; 5
    27d0:	41 e0       	ldi	r20, 0x01	; 1
    27d2:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <DIO_enuSetpindir>
    27d6:	98 2f       	mov	r25, r24
    27d8:	89 ad       	ldd	r24, Y+57	; 0x39
    27da:	89 2b       	or	r24, r25
    27dc:	89 af       	std	Y+57, r24	; 0x39
local_enuErrorState|=DIO_enuSetpindir(D1_PORT, D1_PIN, DIO_u8OUTPUT);
    27de:	80 e0       	ldi	r24, 0x00	; 0
    27e0:	66 e0       	ldi	r22, 0x06	; 6
    27e2:	41 e0       	ldi	r20, 0x01	; 1
    27e4:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <DIO_enuSetpindir>
    27e8:	98 2f       	mov	r25, r24
    27ea:	89 ad       	ldd	r24, Y+57	; 0x39
    27ec:	89 2b       	or	r24, r25
    27ee:	89 af       	std	Y+57, r24	; 0x39
local_enuErrorState|=DIO_enuSetpindir(D0_PORT, D0_PIN, DIO_u8OUTPUT);
    27f0:	80 e0       	ldi	r24, 0x00	; 0
    27f2:	67 e0       	ldi	r22, 0x07	; 7
    27f4:	41 e0       	ldi	r20, 0x01	; 1
    27f6:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <DIO_enuSetpindir>
    27fa:	98 2f       	mov	r25, r24
    27fc:	89 ad       	ldd	r24, Y+57	; 0x39
    27fe:	89 2b       	or	r24, r25
    2800:	89 af       	std	Y+57, r24	; 0x39

	//function set
local_enuErrorState|=LCD_INIT_SendCommend(0x38);
    2802:	88 e3       	ldi	r24, 0x38	; 56
    2804:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <LCD_INIT_SendCommend>
    2808:	98 2f       	mov	r25, r24
    280a:	89 ad       	ldd	r24, Y+57	; 0x39
    280c:	89 2b       	or	r24, r25
    280e:	89 af       	std	Y+57, r24	; 0x39
    2810:	80 e0       	ldi	r24, 0x00	; 0
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	a0 e8       	ldi	r26, 0x80	; 128
    2816:	bf e3       	ldi	r27, 0x3F	; 63
    2818:	8f a3       	std	Y+39, r24	; 0x27
    281a:	98 a7       	std	Y+40, r25	; 0x28
    281c:	a9 a7       	std	Y+41, r26	; 0x29
    281e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2820:	6f a1       	ldd	r22, Y+39	; 0x27
    2822:	78 a5       	ldd	r23, Y+40	; 0x28
    2824:	89 a5       	ldd	r24, Y+41	; 0x29
    2826:	9a a5       	ldd	r25, Y+42	; 0x2a
    2828:	20 e0       	ldi	r18, 0x00	; 0
    282a:	30 e0       	ldi	r19, 0x00	; 0
    282c:	4a e7       	ldi	r20, 0x7A	; 122
    282e:	53 e4       	ldi	r21, 0x43	; 67
    2830:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2834:	dc 01       	movw	r26, r24
    2836:	cb 01       	movw	r24, r22
    2838:	8b a3       	std	Y+35, r24	; 0x23
    283a:	9c a3       	std	Y+36, r25	; 0x24
    283c:	ad a3       	std	Y+37, r26	; 0x25
    283e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2840:	6b a1       	ldd	r22, Y+35	; 0x23
    2842:	7c a1       	ldd	r23, Y+36	; 0x24
    2844:	8d a1       	ldd	r24, Y+37	; 0x25
    2846:	9e a1       	ldd	r25, Y+38	; 0x26
    2848:	20 e0       	ldi	r18, 0x00	; 0
    284a:	30 e0       	ldi	r19, 0x00	; 0
    284c:	40 e8       	ldi	r20, 0x80	; 128
    284e:	5f e3       	ldi	r21, 0x3F	; 63
    2850:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2854:	88 23       	and	r24, r24
    2856:	2c f4       	brge	.+10     	; 0x2862 <LCD_enuInit+0x220>
		__ticks = 1;
    2858:	81 e0       	ldi	r24, 0x01	; 1
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	9a a3       	std	Y+34, r25	; 0x22
    285e:	89 a3       	std	Y+33, r24	; 0x21
    2860:	3f c0       	rjmp	.+126    	; 0x28e0 <LCD_enuInit+0x29e>
	else if (__tmp > 65535)
    2862:	6b a1       	ldd	r22, Y+35	; 0x23
    2864:	7c a1       	ldd	r23, Y+36	; 0x24
    2866:	8d a1       	ldd	r24, Y+37	; 0x25
    2868:	9e a1       	ldd	r25, Y+38	; 0x26
    286a:	20 e0       	ldi	r18, 0x00	; 0
    286c:	3f ef       	ldi	r19, 0xFF	; 255
    286e:	4f e7       	ldi	r20, 0x7F	; 127
    2870:	57 e4       	ldi	r21, 0x47	; 71
    2872:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2876:	18 16       	cp	r1, r24
    2878:	4c f5       	brge	.+82     	; 0x28cc <LCD_enuInit+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    287a:	6f a1       	ldd	r22, Y+39	; 0x27
    287c:	78 a5       	ldd	r23, Y+40	; 0x28
    287e:	89 a5       	ldd	r24, Y+41	; 0x29
    2880:	9a a5       	ldd	r25, Y+42	; 0x2a
    2882:	20 e0       	ldi	r18, 0x00	; 0
    2884:	30 e0       	ldi	r19, 0x00	; 0
    2886:	40 e2       	ldi	r20, 0x20	; 32
    2888:	51 e4       	ldi	r21, 0x41	; 65
    288a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    288e:	dc 01       	movw	r26, r24
    2890:	cb 01       	movw	r24, r22
    2892:	bc 01       	movw	r22, r24
    2894:	cd 01       	movw	r24, r26
    2896:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    289a:	dc 01       	movw	r26, r24
    289c:	cb 01       	movw	r24, r22
    289e:	9a a3       	std	Y+34, r25	; 0x22
    28a0:	89 a3       	std	Y+33, r24	; 0x21
    28a2:	0f c0       	rjmp	.+30     	; 0x28c2 <LCD_enuInit+0x280>
    28a4:	89 e1       	ldi	r24, 0x19	; 25
    28a6:	90 e0       	ldi	r25, 0x00	; 0
    28a8:	98 a3       	std	Y+32, r25	; 0x20
    28aa:	8f 8f       	std	Y+31, r24	; 0x1f
    28ac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    28ae:	98 a1       	ldd	r25, Y+32	; 0x20
    28b0:	01 97       	sbiw	r24, 0x01	; 1
    28b2:	f1 f7       	brne	.-4      	; 0x28b0 <LCD_enuInit+0x26e>
    28b4:	98 a3       	std	Y+32, r25	; 0x20
    28b6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28b8:	89 a1       	ldd	r24, Y+33	; 0x21
    28ba:	9a a1       	ldd	r25, Y+34	; 0x22
    28bc:	01 97       	sbiw	r24, 0x01	; 1
    28be:	9a a3       	std	Y+34, r25	; 0x22
    28c0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28c2:	89 a1       	ldd	r24, Y+33	; 0x21
    28c4:	9a a1       	ldd	r25, Y+34	; 0x22
    28c6:	00 97       	sbiw	r24, 0x00	; 0
    28c8:	69 f7       	brne	.-38     	; 0x28a4 <LCD_enuInit+0x262>
    28ca:	14 c0       	rjmp	.+40     	; 0x28f4 <LCD_enuInit+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28cc:	6b a1       	ldd	r22, Y+35	; 0x23
    28ce:	7c a1       	ldd	r23, Y+36	; 0x24
    28d0:	8d a1       	ldd	r24, Y+37	; 0x25
    28d2:	9e a1       	ldd	r25, Y+38	; 0x26
    28d4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28d8:	dc 01       	movw	r26, r24
    28da:	cb 01       	movw	r24, r22
    28dc:	9a a3       	std	Y+34, r25	; 0x22
    28de:	89 a3       	std	Y+33, r24	; 0x21
    28e0:	89 a1       	ldd	r24, Y+33	; 0x21
    28e2:	9a a1       	ldd	r25, Y+34	; 0x22
    28e4:	9e 8f       	std	Y+30, r25	; 0x1e
    28e6:	8d 8f       	std	Y+29, r24	; 0x1d
    28e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28ea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    28ec:	01 97       	sbiw	r24, 0x01	; 1
    28ee:	f1 f7       	brne	.-4      	; 0x28ec <LCD_enuInit+0x2aa>
    28f0:	9e 8f       	std	Y+30, r25	; 0x1e
    28f2:	8d 8f       	std	Y+29, r24	; 0x1d
#elif LCD_MODE == FOUR_BIT
local_enuErrorState|=LCD_INIT_SendCommend(0x28);
#endif
	_delay_ms(1);
	local_enuErrorState|=LCD_INIT_SendCommend(0x0f);
    28f4:	8f e0       	ldi	r24, 0x0F	; 15
    28f6:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <LCD_INIT_SendCommend>
    28fa:	98 2f       	mov	r25, r24
    28fc:	89 ad       	ldd	r24, Y+57	; 0x39
    28fe:	89 2b       	or	r24, r25
    2900:	89 af       	std	Y+57, r24	; 0x39
    2902:	80 e0       	ldi	r24, 0x00	; 0
    2904:	90 e0       	ldi	r25, 0x00	; 0
    2906:	a0 e8       	ldi	r26, 0x80	; 128
    2908:	bf e3       	ldi	r27, 0x3F	; 63
    290a:	89 8f       	std	Y+25, r24	; 0x19
    290c:	9a 8f       	std	Y+26, r25	; 0x1a
    290e:	ab 8f       	std	Y+27, r26	; 0x1b
    2910:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2912:	69 8d       	ldd	r22, Y+25	; 0x19
    2914:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2916:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2918:	9c 8d       	ldd	r25, Y+28	; 0x1c
    291a:	20 e0       	ldi	r18, 0x00	; 0
    291c:	30 e0       	ldi	r19, 0x00	; 0
    291e:	4a e7       	ldi	r20, 0x7A	; 122
    2920:	53 e4       	ldi	r21, 0x43	; 67
    2922:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2926:	dc 01       	movw	r26, r24
    2928:	cb 01       	movw	r24, r22
    292a:	8d 8b       	std	Y+21, r24	; 0x15
    292c:	9e 8b       	std	Y+22, r25	; 0x16
    292e:	af 8b       	std	Y+23, r26	; 0x17
    2930:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2932:	6d 89       	ldd	r22, Y+21	; 0x15
    2934:	7e 89       	ldd	r23, Y+22	; 0x16
    2936:	8f 89       	ldd	r24, Y+23	; 0x17
    2938:	98 8d       	ldd	r25, Y+24	; 0x18
    293a:	20 e0       	ldi	r18, 0x00	; 0
    293c:	30 e0       	ldi	r19, 0x00	; 0
    293e:	40 e8       	ldi	r20, 0x80	; 128
    2940:	5f e3       	ldi	r21, 0x3F	; 63
    2942:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2946:	88 23       	and	r24, r24
    2948:	2c f4       	brge	.+10     	; 0x2954 <LCD_enuInit+0x312>
		__ticks = 1;
    294a:	81 e0       	ldi	r24, 0x01	; 1
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	9c 8b       	std	Y+20, r25	; 0x14
    2950:	8b 8b       	std	Y+19, r24	; 0x13
    2952:	3f c0       	rjmp	.+126    	; 0x29d2 <LCD_enuInit+0x390>
	else if (__tmp > 65535)
    2954:	6d 89       	ldd	r22, Y+21	; 0x15
    2956:	7e 89       	ldd	r23, Y+22	; 0x16
    2958:	8f 89       	ldd	r24, Y+23	; 0x17
    295a:	98 8d       	ldd	r25, Y+24	; 0x18
    295c:	20 e0       	ldi	r18, 0x00	; 0
    295e:	3f ef       	ldi	r19, 0xFF	; 255
    2960:	4f e7       	ldi	r20, 0x7F	; 127
    2962:	57 e4       	ldi	r21, 0x47	; 71
    2964:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2968:	18 16       	cp	r1, r24
    296a:	4c f5       	brge	.+82     	; 0x29be <LCD_enuInit+0x37c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    296c:	69 8d       	ldd	r22, Y+25	; 0x19
    296e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2970:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2972:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2974:	20 e0       	ldi	r18, 0x00	; 0
    2976:	30 e0       	ldi	r19, 0x00	; 0
    2978:	40 e2       	ldi	r20, 0x20	; 32
    297a:	51 e4       	ldi	r21, 0x41	; 65
    297c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2980:	dc 01       	movw	r26, r24
    2982:	cb 01       	movw	r24, r22
    2984:	bc 01       	movw	r22, r24
    2986:	cd 01       	movw	r24, r26
    2988:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    298c:	dc 01       	movw	r26, r24
    298e:	cb 01       	movw	r24, r22
    2990:	9c 8b       	std	Y+20, r25	; 0x14
    2992:	8b 8b       	std	Y+19, r24	; 0x13
    2994:	0f c0       	rjmp	.+30     	; 0x29b4 <LCD_enuInit+0x372>
    2996:	89 e1       	ldi	r24, 0x19	; 25
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	9a 8b       	std	Y+18, r25	; 0x12
    299c:	89 8b       	std	Y+17, r24	; 0x11
    299e:	89 89       	ldd	r24, Y+17	; 0x11
    29a0:	9a 89       	ldd	r25, Y+18	; 0x12
    29a2:	01 97       	sbiw	r24, 0x01	; 1
    29a4:	f1 f7       	brne	.-4      	; 0x29a2 <LCD_enuInit+0x360>
    29a6:	9a 8b       	std	Y+18, r25	; 0x12
    29a8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29aa:	8b 89       	ldd	r24, Y+19	; 0x13
    29ac:	9c 89       	ldd	r25, Y+20	; 0x14
    29ae:	01 97       	sbiw	r24, 0x01	; 1
    29b0:	9c 8b       	std	Y+20, r25	; 0x14
    29b2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29b4:	8b 89       	ldd	r24, Y+19	; 0x13
    29b6:	9c 89       	ldd	r25, Y+20	; 0x14
    29b8:	00 97       	sbiw	r24, 0x00	; 0
    29ba:	69 f7       	brne	.-38     	; 0x2996 <LCD_enuInit+0x354>
    29bc:	14 c0       	rjmp	.+40     	; 0x29e6 <LCD_enuInit+0x3a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29be:	6d 89       	ldd	r22, Y+21	; 0x15
    29c0:	7e 89       	ldd	r23, Y+22	; 0x16
    29c2:	8f 89       	ldd	r24, Y+23	; 0x17
    29c4:	98 8d       	ldd	r25, Y+24	; 0x18
    29c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29ca:	dc 01       	movw	r26, r24
    29cc:	cb 01       	movw	r24, r22
    29ce:	9c 8b       	std	Y+20, r25	; 0x14
    29d0:	8b 8b       	std	Y+19, r24	; 0x13
    29d2:	8b 89       	ldd	r24, Y+19	; 0x13
    29d4:	9c 89       	ldd	r25, Y+20	; 0x14
    29d6:	98 8b       	std	Y+16, r25	; 0x10
    29d8:	8f 87       	std	Y+15, r24	; 0x0f
    29da:	8f 85       	ldd	r24, Y+15	; 0x0f
    29dc:	98 89       	ldd	r25, Y+16	; 0x10
    29de:	01 97       	sbiw	r24, 0x01	; 1
    29e0:	f1 f7       	brne	.-4      	; 0x29de <LCD_enuInit+0x39c>
    29e2:	98 8b       	std	Y+16, r25	; 0x10
    29e4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	local_enuErrorState|=LCD_INIT_SendCommend(0x01);
    29e6:	81 e0       	ldi	r24, 0x01	; 1
    29e8:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <LCD_INIT_SendCommend>
    29ec:	98 2f       	mov	r25, r24
    29ee:	89 ad       	ldd	r24, Y+57	; 0x39
    29f0:	89 2b       	or	r24, r25
    29f2:	89 af       	std	Y+57, r24	; 0x39
    29f4:	80 e0       	ldi	r24, 0x00	; 0
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	a0 e0       	ldi	r26, 0x00	; 0
    29fa:	b0 e4       	ldi	r27, 0x40	; 64
    29fc:	8b 87       	std	Y+11, r24	; 0x0b
    29fe:	9c 87       	std	Y+12, r25	; 0x0c
    2a00:	ad 87       	std	Y+13, r26	; 0x0d
    2a02:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a04:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a06:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a08:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a0c:	20 e0       	ldi	r18, 0x00	; 0
    2a0e:	30 e0       	ldi	r19, 0x00	; 0
    2a10:	4a e7       	ldi	r20, 0x7A	; 122
    2a12:	53 e4       	ldi	r21, 0x43	; 67
    2a14:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a18:	dc 01       	movw	r26, r24
    2a1a:	cb 01       	movw	r24, r22
    2a1c:	8f 83       	std	Y+7, r24	; 0x07
    2a1e:	98 87       	std	Y+8, r25	; 0x08
    2a20:	a9 87       	std	Y+9, r26	; 0x09
    2a22:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a24:	6f 81       	ldd	r22, Y+7	; 0x07
    2a26:	78 85       	ldd	r23, Y+8	; 0x08
    2a28:	89 85       	ldd	r24, Y+9	; 0x09
    2a2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a2c:	20 e0       	ldi	r18, 0x00	; 0
    2a2e:	30 e0       	ldi	r19, 0x00	; 0
    2a30:	40 e8       	ldi	r20, 0x80	; 128
    2a32:	5f e3       	ldi	r21, 0x3F	; 63
    2a34:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2a38:	88 23       	and	r24, r24
    2a3a:	2c f4       	brge	.+10     	; 0x2a46 <LCD_enuInit+0x404>
		__ticks = 1;
    2a3c:	81 e0       	ldi	r24, 0x01	; 1
    2a3e:	90 e0       	ldi	r25, 0x00	; 0
    2a40:	9e 83       	std	Y+6, r25	; 0x06
    2a42:	8d 83       	std	Y+5, r24	; 0x05
    2a44:	3f c0       	rjmp	.+126    	; 0x2ac4 <LCD_enuInit+0x482>
	else if (__tmp > 65535)
    2a46:	6f 81       	ldd	r22, Y+7	; 0x07
    2a48:	78 85       	ldd	r23, Y+8	; 0x08
    2a4a:	89 85       	ldd	r24, Y+9	; 0x09
    2a4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a4e:	20 e0       	ldi	r18, 0x00	; 0
    2a50:	3f ef       	ldi	r19, 0xFF	; 255
    2a52:	4f e7       	ldi	r20, 0x7F	; 127
    2a54:	57 e4       	ldi	r21, 0x47	; 71
    2a56:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2a5a:	18 16       	cp	r1, r24
    2a5c:	4c f5       	brge	.+82     	; 0x2ab0 <LCD_enuInit+0x46e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a60:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a62:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a64:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a66:	20 e0       	ldi	r18, 0x00	; 0
    2a68:	30 e0       	ldi	r19, 0x00	; 0
    2a6a:	40 e2       	ldi	r20, 0x20	; 32
    2a6c:	51 e4       	ldi	r21, 0x41	; 65
    2a6e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a72:	dc 01       	movw	r26, r24
    2a74:	cb 01       	movw	r24, r22
    2a76:	bc 01       	movw	r22, r24
    2a78:	cd 01       	movw	r24, r26
    2a7a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a7e:	dc 01       	movw	r26, r24
    2a80:	cb 01       	movw	r24, r22
    2a82:	9e 83       	std	Y+6, r25	; 0x06
    2a84:	8d 83       	std	Y+5, r24	; 0x05
    2a86:	0f c0       	rjmp	.+30     	; 0x2aa6 <LCD_enuInit+0x464>
    2a88:	89 e1       	ldi	r24, 0x19	; 25
    2a8a:	90 e0       	ldi	r25, 0x00	; 0
    2a8c:	9c 83       	std	Y+4, r25	; 0x04
    2a8e:	8b 83       	std	Y+3, r24	; 0x03
    2a90:	8b 81       	ldd	r24, Y+3	; 0x03
    2a92:	9c 81       	ldd	r25, Y+4	; 0x04
    2a94:	01 97       	sbiw	r24, 0x01	; 1
    2a96:	f1 f7       	brne	.-4      	; 0x2a94 <LCD_enuInit+0x452>
    2a98:	9c 83       	std	Y+4, r25	; 0x04
    2a9a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a9c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a9e:	9e 81       	ldd	r25, Y+6	; 0x06
    2aa0:	01 97       	sbiw	r24, 0x01	; 1
    2aa2:	9e 83       	std	Y+6, r25	; 0x06
    2aa4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aa6:	8d 81       	ldd	r24, Y+5	; 0x05
    2aa8:	9e 81       	ldd	r25, Y+6	; 0x06
    2aaa:	00 97       	sbiw	r24, 0x00	; 0
    2aac:	69 f7       	brne	.-38     	; 0x2a88 <LCD_enuInit+0x446>
    2aae:	14 c0       	rjmp	.+40     	; 0x2ad8 <LCD_enuInit+0x496>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ab0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ab2:	78 85       	ldd	r23, Y+8	; 0x08
    2ab4:	89 85       	ldd	r24, Y+9	; 0x09
    2ab6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ab8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2abc:	dc 01       	movw	r26, r24
    2abe:	cb 01       	movw	r24, r22
    2ac0:	9e 83       	std	Y+6, r25	; 0x06
    2ac2:	8d 83       	std	Y+5, r24	; 0x05
    2ac4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ac6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ac8:	9a 83       	std	Y+2, r25	; 0x02
    2aca:	89 83       	std	Y+1, r24	; 0x01
    2acc:	89 81       	ldd	r24, Y+1	; 0x01
    2ace:	9a 81       	ldd	r25, Y+2	; 0x02
    2ad0:	01 97       	sbiw	r24, 0x01	; 1
    2ad2:	f1 f7       	brne	.-4      	; 0x2ad0 <LCD_enuInit+0x48e>
    2ad4:	9a 83       	std	Y+2, r25	; 0x02
    2ad6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	local_enuErrorState|=LCD_INIT_SendCommend(0x06);
    2ad8:	86 e0       	ldi	r24, 0x06	; 6
    2ada:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <LCD_INIT_SendCommend>
    2ade:	98 2f       	mov	r25, r24
    2ae0:	89 ad       	ldd	r24, Y+57	; 0x39
    2ae2:	89 2b       	or	r24, r25
    2ae4:	89 af       	std	Y+57, r24	; 0x39





	return local_enuErrorState;
    2ae6:	89 ad       	ldd	r24, Y+57	; 0x39
}
    2ae8:	e9 96       	adiw	r28, 0x39	; 57
    2aea:	0f b6       	in	r0, 0x3f	; 63
    2aec:	f8 94       	cli
    2aee:	de bf       	out	0x3e, r29	; 62
    2af0:	0f be       	out	0x3f, r0	; 63
    2af2:	cd bf       	out	0x3d, r28	; 61
    2af4:	cf 91       	pop	r28
    2af6:	df 91       	pop	r29
    2af8:	08 95       	ret

00002afa <LCD_enuDisplayChar>:

ES_ERROR LCD_enuDisplayChar(u8 Copy_u8Data)
{
    2afa:	df 93       	push	r29
    2afc:	cf 93       	push	r28
    2afe:	00 d0       	rcall	.+0      	; 0x2b00 <LCD_enuDisplayChar+0x6>
    2b00:	cd b7       	in	r28, 0x3d	; 61
    2b02:	de b7       	in	r29, 0x3e	; 62
    2b04:	8a 83       	std	Y+2, r24	; 0x02

	//LCD_setCusor( copyu8_row, copy_u8_column);
	ES_ERROR local_enuErrorState = ES_OK;
    2b06:	19 82       	std	Y+1, r1	; 0x01

local_enuErrorState|=	DIO_enuSetpinval(RS_PORT , RS_PIN , DIO_u8HIGH);
    2b08:	81 e0       	ldi	r24, 0x01	; 1
    2b0a:	62 e0       	ldi	r22, 0x02	; 2
    2b0c:	41 e0       	ldi	r20, 0x01	; 1
    2b0e:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <DIO_enuSetpinval>
    2b12:	98 2f       	mov	r25, r24
    2b14:	89 81       	ldd	r24, Y+1	; 0x01
    2b16:	89 2b       	or	r24, r25
    2b18:	89 83       	std	Y+1, r24	; 0x01

local_enuErrorState|=LCD_inerSendData(Copy_u8Data);
    2b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b1c:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <LCD_inerSendData>
    2b20:	98 2f       	mov	r25, r24
    2b22:	89 81       	ldd	r24, Y+1	; 0x01
    2b24:	89 2b       	or	r24, r25
    2b26:	89 83       	std	Y+1, r24	; 0x01

	return local_enuErrorState;
    2b28:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b2a:	0f 90       	pop	r0
    2b2c:	0f 90       	pop	r0
    2b2e:	cf 91       	pop	r28
    2b30:	df 91       	pop	r29
    2b32:	08 95       	ret

00002b34 <LCD_enuSendCommand>:

ES_ERROR LCD_enuSendCommand(u8 Copy_u8Command)
{
    2b34:	df 93       	push	r29
    2b36:	cf 93       	push	r28
    2b38:	00 d0       	rcall	.+0      	; 0x2b3a <LCD_enuSendCommand+0x6>
    2b3a:	cd b7       	in	r28, 0x3d	; 61
    2b3c:	de b7       	in	r29, 0x3e	; 62
    2b3e:	8a 83       	std	Y+2, r24	; 0x02
	ES_ERROR local_enuErrorState = ES_OK;
    2b40:	19 82       	std	Y+1, r1	; 0x01

	// set rs as command
	local_enuErrorState|=DIO_enuSetpinval(RS_PORT , RS_PIN , DIO_u8LOW);
    2b42:	81 e0       	ldi	r24, 0x01	; 1
    2b44:	62 e0       	ldi	r22, 0x02	; 2
    2b46:	40 e0       	ldi	r20, 0x00	; 0
    2b48:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <DIO_enuSetpinval>
    2b4c:	98 2f       	mov	r25, r24
    2b4e:	89 81       	ldd	r24, Y+1	; 0x01
    2b50:	89 2b       	or	r24, r25
    2b52:	89 83       	std	Y+1, r24	; 0x01

	local_enuErrorState|=LCD_inerSendData(Copy_u8Command);
    2b54:	8a 81       	ldd	r24, Y+2	; 0x02
    2b56:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <LCD_inerSendData>
    2b5a:	98 2f       	mov	r25, r24
    2b5c:	89 81       	ldd	r24, Y+1	; 0x01
    2b5e:	89 2b       	or	r24, r25
    2b60:	89 83       	std	Y+1, r24	; 0x01


	return local_enuErrorState;
    2b62:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b64:	0f 90       	pop	r0
    2b66:	0f 90       	pop	r0
    2b68:	cf 91       	pop	r28
    2b6a:	df 91       	pop	r29
    2b6c:	08 95       	ret

00002b6e <LCD_inerSendData>:

static ES_ERROR LCD_inerSendData(u8 Copy_u8Data)
{    ES_ERROR local_enuErrorState=ES_OK;
    2b6e:	df 93       	push	r29
    2b70:	cf 93       	push	r28
    2b72:	cd b7       	in	r28, 0x3d	; 61
    2b74:	de b7       	in	r29, 0x3e	; 62
    2b76:	6e 97       	sbiw	r28, 0x1e	; 30
    2b78:	0f b6       	in	r0, 0x3f	; 63
    2b7a:	f8 94       	cli
    2b7c:	de bf       	out	0x3e, r29	; 62
    2b7e:	0f be       	out	0x3f, r0	; 63
    2b80:	cd bf       	out	0x3d, r28	; 61
    2b82:	8e 8f       	std	Y+30, r24	; 0x1e
    2b84:	1d 8e       	std	Y+29, r1	; 0x1d
	// set rw as write operation , EN is low
local_enuErrorState|=DIO_enuSetpinval(RW_PORT , RW_PIN , DIO_u8LOW);
    2b86:	81 e0       	ldi	r24, 0x01	; 1
    2b88:	61 e0       	ldi	r22, 0x01	; 1
    2b8a:	40 e0       	ldi	r20, 0x00	; 0
    2b8c:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <DIO_enuSetpinval>
    2b90:	98 2f       	mov	r25, r24
    2b92:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b94:	89 2b       	or	r24, r25
    2b96:	8d 8f       	std	Y+29, r24	; 0x1d
local_enuErrorState|=DIO_enuSetpinval(EN_PORT , EN_PIN , DIO_u8LOW);
    2b98:	81 e0       	ldi	r24, 0x01	; 1
    2b9a:	60 e0       	ldi	r22, 0x00	; 0
    2b9c:	40 e0       	ldi	r20, 0x00	; 0
    2b9e:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <DIO_enuSetpinval>
    2ba2:	98 2f       	mov	r25, r24
    2ba4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ba6:	89 2b       	or	r24, r25
    2ba8:	8d 8f       	std	Y+29, r24	; 0x1d
	//write Data
local_enuErrorState|=DIO_enuSetpinval(D7_PORT , D7_PIN , ((Copy_u8Data>>7)&1));
    2baa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2bac:	98 2f       	mov	r25, r24
    2bae:	99 1f       	adc	r25, r25
    2bb0:	99 27       	eor	r25, r25
    2bb2:	99 1f       	adc	r25, r25
    2bb4:	80 e0       	ldi	r24, 0x00	; 0
    2bb6:	60 e0       	ldi	r22, 0x00	; 0
    2bb8:	49 2f       	mov	r20, r25
    2bba:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <DIO_enuSetpinval>
    2bbe:	98 2f       	mov	r25, r24
    2bc0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2bc2:	89 2b       	or	r24, r25
    2bc4:	8d 8f       	std	Y+29, r24	; 0x1d
local_enuErrorState|=DIO_enuSetpinval(D6_PORT , D6_PIN , ((Copy_u8Data>>6)&1));
    2bc6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2bc8:	82 95       	swap	r24
    2bca:	86 95       	lsr	r24
    2bcc:	86 95       	lsr	r24
    2bce:	83 70       	andi	r24, 0x03	; 3
    2bd0:	98 2f       	mov	r25, r24
    2bd2:	91 70       	andi	r25, 0x01	; 1
    2bd4:	80 e0       	ldi	r24, 0x00	; 0
    2bd6:	61 e0       	ldi	r22, 0x01	; 1
    2bd8:	49 2f       	mov	r20, r25
    2bda:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <DIO_enuSetpinval>
    2bde:	98 2f       	mov	r25, r24
    2be0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2be2:	89 2b       	or	r24, r25
    2be4:	8d 8f       	std	Y+29, r24	; 0x1d
local_enuErrorState|=DIO_enuSetpinval(D5_PORT , D5_PIN , ((Copy_u8Data>>5)&1));
    2be6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2be8:	82 95       	swap	r24
    2bea:	86 95       	lsr	r24
    2bec:	87 70       	andi	r24, 0x07	; 7
    2bee:	98 2f       	mov	r25, r24
    2bf0:	91 70       	andi	r25, 0x01	; 1
    2bf2:	80 e0       	ldi	r24, 0x00	; 0
    2bf4:	62 e0       	ldi	r22, 0x02	; 2
    2bf6:	49 2f       	mov	r20, r25
    2bf8:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <DIO_enuSetpinval>
    2bfc:	98 2f       	mov	r25, r24
    2bfe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c00:	89 2b       	or	r24, r25
    2c02:	8d 8f       	std	Y+29, r24	; 0x1d
local_enuErrorState|=DIO_enuSetpinval(D4_PORT , D4_PIN , ((Copy_u8Data>>4)&1));
    2c04:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c06:	82 95       	swap	r24
    2c08:	8f 70       	andi	r24, 0x0F	; 15
    2c0a:	98 2f       	mov	r25, r24
    2c0c:	91 70       	andi	r25, 0x01	; 1
    2c0e:	80 e0       	ldi	r24, 0x00	; 0
    2c10:	63 e0       	ldi	r22, 0x03	; 3
    2c12:	49 2f       	mov	r20, r25
    2c14:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <DIO_enuSetpinval>
    2c18:	98 2f       	mov	r25, r24
    2c1a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c1c:	89 2b       	or	r24, r25
    2c1e:	8d 8f       	std	Y+29, r24	; 0x1d

#if LCD_MODE == EIGHT_BIT

local_enuErrorState|=DIO_enuSetpinval(D3_PORT , D3_PIN , ((Copy_u8Data>>3)&1));
    2c20:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c22:	86 95       	lsr	r24
    2c24:	86 95       	lsr	r24
    2c26:	86 95       	lsr	r24
    2c28:	98 2f       	mov	r25, r24
    2c2a:	91 70       	andi	r25, 0x01	; 1
    2c2c:	80 e0       	ldi	r24, 0x00	; 0
    2c2e:	64 e0       	ldi	r22, 0x04	; 4
    2c30:	49 2f       	mov	r20, r25
    2c32:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <DIO_enuSetpinval>
    2c36:	98 2f       	mov	r25, r24
    2c38:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c3a:	89 2b       	or	r24, r25
    2c3c:	8d 8f       	std	Y+29, r24	; 0x1d
local_enuErrorState|=DIO_enuSetpinval(D2_PORT , D2_PIN , ((Copy_u8Data>>2)&1));
    2c3e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c40:	86 95       	lsr	r24
    2c42:	86 95       	lsr	r24
    2c44:	98 2f       	mov	r25, r24
    2c46:	91 70       	andi	r25, 0x01	; 1
    2c48:	80 e0       	ldi	r24, 0x00	; 0
    2c4a:	65 e0       	ldi	r22, 0x05	; 5
    2c4c:	49 2f       	mov	r20, r25
    2c4e:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <DIO_enuSetpinval>
    2c52:	98 2f       	mov	r25, r24
    2c54:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c56:	89 2b       	or	r24, r25
    2c58:	8d 8f       	std	Y+29, r24	; 0x1d
local_enuErrorState|=DIO_enuSetpinval(D1_PORT , D1_PIN , ((Copy_u8Data>>1)&1));
    2c5a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c5c:	86 95       	lsr	r24
    2c5e:	98 2f       	mov	r25, r24
    2c60:	91 70       	andi	r25, 0x01	; 1
    2c62:	80 e0       	ldi	r24, 0x00	; 0
    2c64:	66 e0       	ldi	r22, 0x06	; 6
    2c66:	49 2f       	mov	r20, r25
    2c68:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <DIO_enuSetpinval>
    2c6c:	98 2f       	mov	r25, r24
    2c6e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c70:	89 2b       	or	r24, r25
    2c72:	8d 8f       	std	Y+29, r24	; 0x1d
local_enuErrorState|=DIO_enuSetpinval(D0_PORT , D0_PIN , ((Copy_u8Data>>0)&1));
    2c74:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c76:	98 2f       	mov	r25, r24
    2c78:	91 70       	andi	r25, 0x01	; 1
    2c7a:	80 e0       	ldi	r24, 0x00	; 0
    2c7c:	67 e0       	ldi	r22, 0x07	; 7
    2c7e:	49 2f       	mov	r20, r25
    2c80:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <DIO_enuSetpinval>
    2c84:	98 2f       	mov	r25, r24
    2c86:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c88:	89 2b       	or	r24, r25
    2c8a:	8d 8f       	std	Y+29, r24	; 0x1d
#elif LCD_MODE == FOUR_BIT

#endif

	// Enable latch
local_enuErrorState|=DIO_enuSetpinval(EN_PORT , EN_PIN , DIO_u8HIGH);
    2c8c:	81 e0       	ldi	r24, 0x01	; 1
    2c8e:	60 e0       	ldi	r22, 0x00	; 0
    2c90:	41 e0       	ldi	r20, 0x01	; 1
    2c92:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <DIO_enuSetpinval>
    2c96:	98 2f       	mov	r25, r24
    2c98:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c9a:	89 2b       	or	r24, r25
    2c9c:	8d 8f       	std	Y+29, r24	; 0x1d
    2c9e:	80 e0       	ldi	r24, 0x00	; 0
    2ca0:	90 e0       	ldi	r25, 0x00	; 0
    2ca2:	a0 e2       	ldi	r26, 0x20	; 32
    2ca4:	b1 e4       	ldi	r27, 0x41	; 65
    2ca6:	89 8f       	std	Y+25, r24	; 0x19
    2ca8:	9a 8f       	std	Y+26, r25	; 0x1a
    2caa:	ab 8f       	std	Y+27, r26	; 0x1b
    2cac:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cae:	69 8d       	ldd	r22, Y+25	; 0x19
    2cb0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cb2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cb4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cb6:	20 e0       	ldi	r18, 0x00	; 0
    2cb8:	30 e0       	ldi	r19, 0x00	; 0
    2cba:	4a e7       	ldi	r20, 0x7A	; 122
    2cbc:	53 e4       	ldi	r21, 0x43	; 67
    2cbe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2cc2:	dc 01       	movw	r26, r24
    2cc4:	cb 01       	movw	r24, r22
    2cc6:	8d 8b       	std	Y+21, r24	; 0x15
    2cc8:	9e 8b       	std	Y+22, r25	; 0x16
    2cca:	af 8b       	std	Y+23, r26	; 0x17
    2ccc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2cce:	6d 89       	ldd	r22, Y+21	; 0x15
    2cd0:	7e 89       	ldd	r23, Y+22	; 0x16
    2cd2:	8f 89       	ldd	r24, Y+23	; 0x17
    2cd4:	98 8d       	ldd	r25, Y+24	; 0x18
    2cd6:	20 e0       	ldi	r18, 0x00	; 0
    2cd8:	30 e0       	ldi	r19, 0x00	; 0
    2cda:	40 e8       	ldi	r20, 0x80	; 128
    2cdc:	5f e3       	ldi	r21, 0x3F	; 63
    2cde:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2ce2:	88 23       	and	r24, r24
    2ce4:	2c f4       	brge	.+10     	; 0x2cf0 <LCD_inerSendData+0x182>
		__ticks = 1;
    2ce6:	81 e0       	ldi	r24, 0x01	; 1
    2ce8:	90 e0       	ldi	r25, 0x00	; 0
    2cea:	9c 8b       	std	Y+20, r25	; 0x14
    2cec:	8b 8b       	std	Y+19, r24	; 0x13
    2cee:	3f c0       	rjmp	.+126    	; 0x2d6e <LCD_inerSendData+0x200>
	else if (__tmp > 65535)
    2cf0:	6d 89       	ldd	r22, Y+21	; 0x15
    2cf2:	7e 89       	ldd	r23, Y+22	; 0x16
    2cf4:	8f 89       	ldd	r24, Y+23	; 0x17
    2cf6:	98 8d       	ldd	r25, Y+24	; 0x18
    2cf8:	20 e0       	ldi	r18, 0x00	; 0
    2cfa:	3f ef       	ldi	r19, 0xFF	; 255
    2cfc:	4f e7       	ldi	r20, 0x7F	; 127
    2cfe:	57 e4       	ldi	r21, 0x47	; 71
    2d00:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2d04:	18 16       	cp	r1, r24
    2d06:	4c f5       	brge	.+82     	; 0x2d5a <LCD_inerSendData+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d08:	69 8d       	ldd	r22, Y+25	; 0x19
    2d0a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d0e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d10:	20 e0       	ldi	r18, 0x00	; 0
    2d12:	30 e0       	ldi	r19, 0x00	; 0
    2d14:	40 e2       	ldi	r20, 0x20	; 32
    2d16:	51 e4       	ldi	r21, 0x41	; 65
    2d18:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d1c:	dc 01       	movw	r26, r24
    2d1e:	cb 01       	movw	r24, r22
    2d20:	bc 01       	movw	r22, r24
    2d22:	cd 01       	movw	r24, r26
    2d24:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d28:	dc 01       	movw	r26, r24
    2d2a:	cb 01       	movw	r24, r22
    2d2c:	9c 8b       	std	Y+20, r25	; 0x14
    2d2e:	8b 8b       	std	Y+19, r24	; 0x13
    2d30:	0f c0       	rjmp	.+30     	; 0x2d50 <LCD_inerSendData+0x1e2>
    2d32:	89 e1       	ldi	r24, 0x19	; 25
    2d34:	90 e0       	ldi	r25, 0x00	; 0
    2d36:	9a 8b       	std	Y+18, r25	; 0x12
    2d38:	89 8b       	std	Y+17, r24	; 0x11
    2d3a:	89 89       	ldd	r24, Y+17	; 0x11
    2d3c:	9a 89       	ldd	r25, Y+18	; 0x12
    2d3e:	01 97       	sbiw	r24, 0x01	; 1
    2d40:	f1 f7       	brne	.-4      	; 0x2d3e <LCD_inerSendData+0x1d0>
    2d42:	9a 8b       	std	Y+18, r25	; 0x12
    2d44:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d46:	8b 89       	ldd	r24, Y+19	; 0x13
    2d48:	9c 89       	ldd	r25, Y+20	; 0x14
    2d4a:	01 97       	sbiw	r24, 0x01	; 1
    2d4c:	9c 8b       	std	Y+20, r25	; 0x14
    2d4e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d50:	8b 89       	ldd	r24, Y+19	; 0x13
    2d52:	9c 89       	ldd	r25, Y+20	; 0x14
    2d54:	00 97       	sbiw	r24, 0x00	; 0
    2d56:	69 f7       	brne	.-38     	; 0x2d32 <LCD_inerSendData+0x1c4>
    2d58:	14 c0       	rjmp	.+40     	; 0x2d82 <LCD_inerSendData+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d5a:	6d 89       	ldd	r22, Y+21	; 0x15
    2d5c:	7e 89       	ldd	r23, Y+22	; 0x16
    2d5e:	8f 89       	ldd	r24, Y+23	; 0x17
    2d60:	98 8d       	ldd	r25, Y+24	; 0x18
    2d62:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d66:	dc 01       	movw	r26, r24
    2d68:	cb 01       	movw	r24, r22
    2d6a:	9c 8b       	std	Y+20, r25	; 0x14
    2d6c:	8b 8b       	std	Y+19, r24	; 0x13
    2d6e:	8b 89       	ldd	r24, Y+19	; 0x13
    2d70:	9c 89       	ldd	r25, Y+20	; 0x14
    2d72:	98 8b       	std	Y+16, r25	; 0x10
    2d74:	8f 87       	std	Y+15, r24	; 0x0f
    2d76:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d78:	98 89       	ldd	r25, Y+16	; 0x10
    2d7a:	01 97       	sbiw	r24, 0x01	; 1
    2d7c:	f1 f7       	brne	.-4      	; 0x2d7a <LCD_inerSendData+0x20c>
    2d7e:	98 8b       	std	Y+16, r25	; 0x10
    2d80:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
local_enuErrorState|=DIO_enuSetpinval(EN_PORT , EN_PIN , DIO_u8LOW);
    2d82:	81 e0       	ldi	r24, 0x01	; 1
    2d84:	60 e0       	ldi	r22, 0x00	; 0
    2d86:	40 e0       	ldi	r20, 0x00	; 0
    2d88:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <DIO_enuSetpinval>
    2d8c:	98 2f       	mov	r25, r24
    2d8e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d90:	89 2b       	or	r24, r25
    2d92:	8d 8f       	std	Y+29, r24	; 0x1d
    2d94:	80 e0       	ldi	r24, 0x00	; 0
    2d96:	90 e0       	ldi	r25, 0x00	; 0
    2d98:	a0 e2       	ldi	r26, 0x20	; 32
    2d9a:	b1 e4       	ldi	r27, 0x41	; 65
    2d9c:	8b 87       	std	Y+11, r24	; 0x0b
    2d9e:	9c 87       	std	Y+12, r25	; 0x0c
    2da0:	ad 87       	std	Y+13, r26	; 0x0d
    2da2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2da4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2da6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2da8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2daa:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dac:	20 e0       	ldi	r18, 0x00	; 0
    2dae:	30 e0       	ldi	r19, 0x00	; 0
    2db0:	4a e7       	ldi	r20, 0x7A	; 122
    2db2:	53 e4       	ldi	r21, 0x43	; 67
    2db4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2db8:	dc 01       	movw	r26, r24
    2dba:	cb 01       	movw	r24, r22
    2dbc:	8f 83       	std	Y+7, r24	; 0x07
    2dbe:	98 87       	std	Y+8, r25	; 0x08
    2dc0:	a9 87       	std	Y+9, r26	; 0x09
    2dc2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2dc4:	6f 81       	ldd	r22, Y+7	; 0x07
    2dc6:	78 85       	ldd	r23, Y+8	; 0x08
    2dc8:	89 85       	ldd	r24, Y+9	; 0x09
    2dca:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dcc:	20 e0       	ldi	r18, 0x00	; 0
    2dce:	30 e0       	ldi	r19, 0x00	; 0
    2dd0:	40 e8       	ldi	r20, 0x80	; 128
    2dd2:	5f e3       	ldi	r21, 0x3F	; 63
    2dd4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2dd8:	88 23       	and	r24, r24
    2dda:	2c f4       	brge	.+10     	; 0x2de6 <LCD_inerSendData+0x278>
		__ticks = 1;
    2ddc:	81 e0       	ldi	r24, 0x01	; 1
    2dde:	90 e0       	ldi	r25, 0x00	; 0
    2de0:	9e 83       	std	Y+6, r25	; 0x06
    2de2:	8d 83       	std	Y+5, r24	; 0x05
    2de4:	3f c0       	rjmp	.+126    	; 0x2e64 <LCD_inerSendData+0x2f6>
	else if (__tmp > 65535)
    2de6:	6f 81       	ldd	r22, Y+7	; 0x07
    2de8:	78 85       	ldd	r23, Y+8	; 0x08
    2dea:	89 85       	ldd	r24, Y+9	; 0x09
    2dec:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dee:	20 e0       	ldi	r18, 0x00	; 0
    2df0:	3f ef       	ldi	r19, 0xFF	; 255
    2df2:	4f e7       	ldi	r20, 0x7F	; 127
    2df4:	57 e4       	ldi	r21, 0x47	; 71
    2df6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2dfa:	18 16       	cp	r1, r24
    2dfc:	4c f5       	brge	.+82     	; 0x2e50 <LCD_inerSendData+0x2e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dfe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e00:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e02:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e04:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e06:	20 e0       	ldi	r18, 0x00	; 0
    2e08:	30 e0       	ldi	r19, 0x00	; 0
    2e0a:	40 e2       	ldi	r20, 0x20	; 32
    2e0c:	51 e4       	ldi	r21, 0x41	; 65
    2e0e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e12:	dc 01       	movw	r26, r24
    2e14:	cb 01       	movw	r24, r22
    2e16:	bc 01       	movw	r22, r24
    2e18:	cd 01       	movw	r24, r26
    2e1a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e1e:	dc 01       	movw	r26, r24
    2e20:	cb 01       	movw	r24, r22
    2e22:	9e 83       	std	Y+6, r25	; 0x06
    2e24:	8d 83       	std	Y+5, r24	; 0x05
    2e26:	0f c0       	rjmp	.+30     	; 0x2e46 <LCD_inerSendData+0x2d8>
    2e28:	89 e1       	ldi	r24, 0x19	; 25
    2e2a:	90 e0       	ldi	r25, 0x00	; 0
    2e2c:	9c 83       	std	Y+4, r25	; 0x04
    2e2e:	8b 83       	std	Y+3, r24	; 0x03
    2e30:	8b 81       	ldd	r24, Y+3	; 0x03
    2e32:	9c 81       	ldd	r25, Y+4	; 0x04
    2e34:	01 97       	sbiw	r24, 0x01	; 1
    2e36:	f1 f7       	brne	.-4      	; 0x2e34 <LCD_inerSendData+0x2c6>
    2e38:	9c 83       	std	Y+4, r25	; 0x04
    2e3a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e3c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e3e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e40:	01 97       	sbiw	r24, 0x01	; 1
    2e42:	9e 83       	std	Y+6, r25	; 0x06
    2e44:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e46:	8d 81       	ldd	r24, Y+5	; 0x05
    2e48:	9e 81       	ldd	r25, Y+6	; 0x06
    2e4a:	00 97       	sbiw	r24, 0x00	; 0
    2e4c:	69 f7       	brne	.-38     	; 0x2e28 <LCD_inerSendData+0x2ba>
    2e4e:	14 c0       	rjmp	.+40     	; 0x2e78 <LCD_inerSendData+0x30a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e50:	6f 81       	ldd	r22, Y+7	; 0x07
    2e52:	78 85       	ldd	r23, Y+8	; 0x08
    2e54:	89 85       	ldd	r24, Y+9	; 0x09
    2e56:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e58:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e5c:	dc 01       	movw	r26, r24
    2e5e:	cb 01       	movw	r24, r22
    2e60:	9e 83       	std	Y+6, r25	; 0x06
    2e62:	8d 83       	std	Y+5, r24	; 0x05
    2e64:	8d 81       	ldd	r24, Y+5	; 0x05
    2e66:	9e 81       	ldd	r25, Y+6	; 0x06
    2e68:	9a 83       	std	Y+2, r25	; 0x02
    2e6a:	89 83       	std	Y+1, r24	; 0x01
    2e6c:	89 81       	ldd	r24, Y+1	; 0x01
    2e6e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e70:	01 97       	sbiw	r24, 0x01	; 1
    2e72:	f1 f7       	brne	.-4      	; 0x2e70 <LCD_inerSendData+0x302>
    2e74:	9a 83       	std	Y+2, r25	; 0x02
    2e76:	89 83       	std	Y+1, r24	; 0x01


	_delay_ms(10);
	return local_enuErrorState;
    2e78:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    2e7a:	6e 96       	adiw	r28, 0x1e	; 30
    2e7c:	0f b6       	in	r0, 0x3f	; 63
    2e7e:	f8 94       	cli
    2e80:	de bf       	out	0x3e, r29	; 62
    2e82:	0f be       	out	0x3f, r0	; 63
    2e84:	cd bf       	out	0x3d, r28	; 61
    2e86:	cf 91       	pop	r28
    2e88:	df 91       	pop	r29
    2e8a:	08 95       	ret

00002e8c <LCD_INIT_SendCommend>:


static inline ES_ERROR LCD_INIT_SendCommend(u8 Copy_u8Command)
{      ES_ERROR local_enuErrorState=ES_OK;
    2e8c:	df 93       	push	r29
    2e8e:	cf 93       	push	r28
    2e90:	cd b7       	in	r28, 0x3d	; 61
    2e92:	de b7       	in	r29, 0x3e	; 62
    2e94:	60 97       	sbiw	r28, 0x10	; 16
    2e96:	0f b6       	in	r0, 0x3f	; 63
    2e98:	f8 94       	cli
    2e9a:	de bf       	out	0x3e, r29	; 62
    2e9c:	0f be       	out	0x3f, r0	; 63
    2e9e:	cd bf       	out	0x3d, r28	; 61
    2ea0:	88 8b       	std	Y+16, r24	; 0x10
    2ea2:	1f 86       	std	Y+15, r1	; 0x0f
	// set rs as command
local_enuErrorState|=DIO_enuSetpinval(RS_PORT , RS_PIN , DIO_u8LOW);
    2ea4:	81 e0       	ldi	r24, 0x01	; 1
    2ea6:	62 e0       	ldi	r22, 0x02	; 2
    2ea8:	40 e0       	ldi	r20, 0x00	; 0
    2eaa:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <DIO_enuSetpinval>
    2eae:	98 2f       	mov	r25, r24
    2eb0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2eb2:	89 2b       	or	r24, r25
    2eb4:	8f 87       	std	Y+15, r24	; 0x0f
	// set rw as write operation , EN is low
local_enuErrorState|=DIO_enuSetpinval(RW_PORT , RW_PIN , DIO_u8LOW);
    2eb6:	81 e0       	ldi	r24, 0x01	; 1
    2eb8:	61 e0       	ldi	r22, 0x01	; 1
    2eba:	40 e0       	ldi	r20, 0x00	; 0
    2ebc:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <DIO_enuSetpinval>
    2ec0:	98 2f       	mov	r25, r24
    2ec2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ec4:	89 2b       	or	r24, r25
    2ec6:	8f 87       	std	Y+15, r24	; 0x0f
local_enuErrorState|=DIO_enuSetpinval(EN_PORT , EN_PIN , DIO_u8LOW);
    2ec8:	81 e0       	ldi	r24, 0x01	; 1
    2eca:	60 e0       	ldi	r22, 0x00	; 0
    2ecc:	40 e0       	ldi	r20, 0x00	; 0
    2ece:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <DIO_enuSetpinval>
    2ed2:	98 2f       	mov	r25, r24
    2ed4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ed6:	89 2b       	or	r24, r25
    2ed8:	8f 87       	std	Y+15, r24	; 0x0f
	//write Data
local_enuErrorState|=DIO_enuSetpinval(D7_PORT , D7_PIN , ((Copy_u8Command>>7)&1));
    2eda:	88 89       	ldd	r24, Y+16	; 0x10
    2edc:	98 2f       	mov	r25, r24
    2ede:	99 1f       	adc	r25, r25
    2ee0:	99 27       	eor	r25, r25
    2ee2:	99 1f       	adc	r25, r25
    2ee4:	80 e0       	ldi	r24, 0x00	; 0
    2ee6:	60 e0       	ldi	r22, 0x00	; 0
    2ee8:	49 2f       	mov	r20, r25
    2eea:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <DIO_enuSetpinval>
    2eee:	98 2f       	mov	r25, r24
    2ef0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ef2:	89 2b       	or	r24, r25
    2ef4:	8f 87       	std	Y+15, r24	; 0x0f
local_enuErrorState|=DIO_enuSetpinval(D6_PORT , D6_PIN , ((Copy_u8Command>>6)&1));
    2ef6:	88 89       	ldd	r24, Y+16	; 0x10
    2ef8:	82 95       	swap	r24
    2efa:	86 95       	lsr	r24
    2efc:	86 95       	lsr	r24
    2efe:	83 70       	andi	r24, 0x03	; 3
    2f00:	98 2f       	mov	r25, r24
    2f02:	91 70       	andi	r25, 0x01	; 1
    2f04:	80 e0       	ldi	r24, 0x00	; 0
    2f06:	61 e0       	ldi	r22, 0x01	; 1
    2f08:	49 2f       	mov	r20, r25
    2f0a:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <DIO_enuSetpinval>
    2f0e:	98 2f       	mov	r25, r24
    2f10:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f12:	89 2b       	or	r24, r25
    2f14:	8f 87       	std	Y+15, r24	; 0x0f
local_enuErrorState|=DIO_enuSetpinval(D5_PORT , D5_PIN , ((Copy_u8Command>>5)&1));
    2f16:	88 89       	ldd	r24, Y+16	; 0x10
    2f18:	82 95       	swap	r24
    2f1a:	86 95       	lsr	r24
    2f1c:	87 70       	andi	r24, 0x07	; 7
    2f1e:	98 2f       	mov	r25, r24
    2f20:	91 70       	andi	r25, 0x01	; 1
    2f22:	80 e0       	ldi	r24, 0x00	; 0
    2f24:	62 e0       	ldi	r22, 0x02	; 2
    2f26:	49 2f       	mov	r20, r25
    2f28:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <DIO_enuSetpinval>
    2f2c:	98 2f       	mov	r25, r24
    2f2e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f30:	89 2b       	or	r24, r25
    2f32:	8f 87       	std	Y+15, r24	; 0x0f
local_enuErrorState|=DIO_enuSetpinval(D4_PORT , D4_PIN , ((Copy_u8Command>>4)&1));
    2f34:	88 89       	ldd	r24, Y+16	; 0x10
    2f36:	82 95       	swap	r24
    2f38:	8f 70       	andi	r24, 0x0F	; 15
    2f3a:	98 2f       	mov	r25, r24
    2f3c:	91 70       	andi	r25, 0x01	; 1
    2f3e:	80 e0       	ldi	r24, 0x00	; 0
    2f40:	63 e0       	ldi	r22, 0x03	; 3
    2f42:	49 2f       	mov	r20, r25
    2f44:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <DIO_enuSetpinval>
    2f48:	98 2f       	mov	r25, r24
    2f4a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f4c:	89 2b       	or	r24, r25
    2f4e:	8f 87       	std	Y+15, r24	; 0x0f
#if LCD_MODE == EIGHT_BIT
local_enuErrorState|=DIO_enuSetpinval(D3_PORT , D3_PIN , ((Copy_u8Command>>3)&1));
    2f50:	88 89       	ldd	r24, Y+16	; 0x10
    2f52:	86 95       	lsr	r24
    2f54:	86 95       	lsr	r24
    2f56:	86 95       	lsr	r24
    2f58:	98 2f       	mov	r25, r24
    2f5a:	91 70       	andi	r25, 0x01	; 1
    2f5c:	80 e0       	ldi	r24, 0x00	; 0
    2f5e:	64 e0       	ldi	r22, 0x04	; 4
    2f60:	49 2f       	mov	r20, r25
    2f62:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <DIO_enuSetpinval>
    2f66:	98 2f       	mov	r25, r24
    2f68:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f6a:	89 2b       	or	r24, r25
    2f6c:	8f 87       	std	Y+15, r24	; 0x0f
local_enuErrorState|=DIO_enuSetpinval(D2_PORT , D2_PIN , ((Copy_u8Command>>2)&1));
    2f6e:	88 89       	ldd	r24, Y+16	; 0x10
    2f70:	86 95       	lsr	r24
    2f72:	86 95       	lsr	r24
    2f74:	98 2f       	mov	r25, r24
    2f76:	91 70       	andi	r25, 0x01	; 1
    2f78:	80 e0       	ldi	r24, 0x00	; 0
    2f7a:	65 e0       	ldi	r22, 0x05	; 5
    2f7c:	49 2f       	mov	r20, r25
    2f7e:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <DIO_enuSetpinval>
    2f82:	98 2f       	mov	r25, r24
    2f84:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f86:	89 2b       	or	r24, r25
    2f88:	8f 87       	std	Y+15, r24	; 0x0f
local_enuErrorState|=DIO_enuSetpinval(D1_PORT , D1_PIN , ((Copy_u8Command>>1)&1));
    2f8a:	88 89       	ldd	r24, Y+16	; 0x10
    2f8c:	86 95       	lsr	r24
    2f8e:	98 2f       	mov	r25, r24
    2f90:	91 70       	andi	r25, 0x01	; 1
    2f92:	80 e0       	ldi	r24, 0x00	; 0
    2f94:	66 e0       	ldi	r22, 0x06	; 6
    2f96:	49 2f       	mov	r20, r25
    2f98:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <DIO_enuSetpinval>
    2f9c:	98 2f       	mov	r25, r24
    2f9e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fa0:	89 2b       	or	r24, r25
    2fa2:	8f 87       	std	Y+15, r24	; 0x0f
local_enuErrorState|=DIO_enuSetpinval(D0_PORT , D0_PIN , ((Copy_u8Command>>0)&1));
    2fa4:	88 89       	ldd	r24, Y+16	; 0x10
    2fa6:	98 2f       	mov	r25, r24
    2fa8:	91 70       	andi	r25, 0x01	; 1
    2faa:	80 e0       	ldi	r24, 0x00	; 0
    2fac:	67 e0       	ldi	r22, 0x07	; 7
    2fae:	49 2f       	mov	r20, r25
    2fb0:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <DIO_enuSetpinval>
    2fb4:	98 2f       	mov	r25, r24
    2fb6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fb8:	89 2b       	or	r24, r25
    2fba:	8f 87       	std	Y+15, r24	; 0x0f
#elif  LCD_MODE == FOUR_BIT

#endif
	// Enable latch
local_enuErrorState|=DIO_enuSetpinval(EN_PORT , EN_PIN , DIO_u8HIGH);
    2fbc:	81 e0       	ldi	r24, 0x01	; 1
    2fbe:	60 e0       	ldi	r22, 0x00	; 0
    2fc0:	41 e0       	ldi	r20, 0x01	; 1
    2fc2:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <DIO_enuSetpinval>
    2fc6:	98 2f       	mov	r25, r24
    2fc8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fca:	89 2b       	or	r24, r25
    2fcc:	8f 87       	std	Y+15, r24	; 0x0f
    2fce:	80 e0       	ldi	r24, 0x00	; 0
    2fd0:	90 e0       	ldi	r25, 0x00	; 0
    2fd2:	a0 e2       	ldi	r26, 0x20	; 32
    2fd4:	b1 e4       	ldi	r27, 0x41	; 65
    2fd6:	8b 87       	std	Y+11, r24	; 0x0b
    2fd8:	9c 87       	std	Y+12, r25	; 0x0c
    2fda:	ad 87       	std	Y+13, r26	; 0x0d
    2fdc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fde:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fe0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fe2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fe4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fe6:	20 e0       	ldi	r18, 0x00	; 0
    2fe8:	30 e0       	ldi	r19, 0x00	; 0
    2fea:	4a e7       	ldi	r20, 0x7A	; 122
    2fec:	53 e4       	ldi	r21, 0x43	; 67
    2fee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ff2:	dc 01       	movw	r26, r24
    2ff4:	cb 01       	movw	r24, r22
    2ff6:	8f 83       	std	Y+7, r24	; 0x07
    2ff8:	98 87       	std	Y+8, r25	; 0x08
    2ffa:	a9 87       	std	Y+9, r26	; 0x09
    2ffc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ffe:	6f 81       	ldd	r22, Y+7	; 0x07
    3000:	78 85       	ldd	r23, Y+8	; 0x08
    3002:	89 85       	ldd	r24, Y+9	; 0x09
    3004:	9a 85       	ldd	r25, Y+10	; 0x0a
    3006:	20 e0       	ldi	r18, 0x00	; 0
    3008:	30 e0       	ldi	r19, 0x00	; 0
    300a:	40 e8       	ldi	r20, 0x80	; 128
    300c:	5f e3       	ldi	r21, 0x3F	; 63
    300e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3012:	88 23       	and	r24, r24
    3014:	2c f4       	brge	.+10     	; 0x3020 <LCD_INIT_SendCommend+0x194>
		__ticks = 1;
    3016:	81 e0       	ldi	r24, 0x01	; 1
    3018:	90 e0       	ldi	r25, 0x00	; 0
    301a:	9e 83       	std	Y+6, r25	; 0x06
    301c:	8d 83       	std	Y+5, r24	; 0x05
    301e:	3f c0       	rjmp	.+126    	; 0x309e <LCD_INIT_SendCommend+0x212>
	else if (__tmp > 65535)
    3020:	6f 81       	ldd	r22, Y+7	; 0x07
    3022:	78 85       	ldd	r23, Y+8	; 0x08
    3024:	89 85       	ldd	r24, Y+9	; 0x09
    3026:	9a 85       	ldd	r25, Y+10	; 0x0a
    3028:	20 e0       	ldi	r18, 0x00	; 0
    302a:	3f ef       	ldi	r19, 0xFF	; 255
    302c:	4f e7       	ldi	r20, 0x7F	; 127
    302e:	57 e4       	ldi	r21, 0x47	; 71
    3030:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3034:	18 16       	cp	r1, r24
    3036:	4c f5       	brge	.+82     	; 0x308a <LCD_INIT_SendCommend+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3038:	6b 85       	ldd	r22, Y+11	; 0x0b
    303a:	7c 85       	ldd	r23, Y+12	; 0x0c
    303c:	8d 85       	ldd	r24, Y+13	; 0x0d
    303e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3040:	20 e0       	ldi	r18, 0x00	; 0
    3042:	30 e0       	ldi	r19, 0x00	; 0
    3044:	40 e2       	ldi	r20, 0x20	; 32
    3046:	51 e4       	ldi	r21, 0x41	; 65
    3048:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    304c:	dc 01       	movw	r26, r24
    304e:	cb 01       	movw	r24, r22
    3050:	bc 01       	movw	r22, r24
    3052:	cd 01       	movw	r24, r26
    3054:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3058:	dc 01       	movw	r26, r24
    305a:	cb 01       	movw	r24, r22
    305c:	9e 83       	std	Y+6, r25	; 0x06
    305e:	8d 83       	std	Y+5, r24	; 0x05
    3060:	0f c0       	rjmp	.+30     	; 0x3080 <LCD_INIT_SendCommend+0x1f4>
    3062:	89 e1       	ldi	r24, 0x19	; 25
    3064:	90 e0       	ldi	r25, 0x00	; 0
    3066:	9c 83       	std	Y+4, r25	; 0x04
    3068:	8b 83       	std	Y+3, r24	; 0x03
    306a:	8b 81       	ldd	r24, Y+3	; 0x03
    306c:	9c 81       	ldd	r25, Y+4	; 0x04
    306e:	01 97       	sbiw	r24, 0x01	; 1
    3070:	f1 f7       	brne	.-4      	; 0x306e <LCD_INIT_SendCommend+0x1e2>
    3072:	9c 83       	std	Y+4, r25	; 0x04
    3074:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3076:	8d 81       	ldd	r24, Y+5	; 0x05
    3078:	9e 81       	ldd	r25, Y+6	; 0x06
    307a:	01 97       	sbiw	r24, 0x01	; 1
    307c:	9e 83       	std	Y+6, r25	; 0x06
    307e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3080:	8d 81       	ldd	r24, Y+5	; 0x05
    3082:	9e 81       	ldd	r25, Y+6	; 0x06
    3084:	00 97       	sbiw	r24, 0x00	; 0
    3086:	69 f7       	brne	.-38     	; 0x3062 <LCD_INIT_SendCommend+0x1d6>
    3088:	14 c0       	rjmp	.+40     	; 0x30b2 <LCD_INIT_SendCommend+0x226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    308a:	6f 81       	ldd	r22, Y+7	; 0x07
    308c:	78 85       	ldd	r23, Y+8	; 0x08
    308e:	89 85       	ldd	r24, Y+9	; 0x09
    3090:	9a 85       	ldd	r25, Y+10	; 0x0a
    3092:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3096:	dc 01       	movw	r26, r24
    3098:	cb 01       	movw	r24, r22
    309a:	9e 83       	std	Y+6, r25	; 0x06
    309c:	8d 83       	std	Y+5, r24	; 0x05
    309e:	8d 81       	ldd	r24, Y+5	; 0x05
    30a0:	9e 81       	ldd	r25, Y+6	; 0x06
    30a2:	9a 83       	std	Y+2, r25	; 0x02
    30a4:	89 83       	std	Y+1, r24	; 0x01
    30a6:	89 81       	ldd	r24, Y+1	; 0x01
    30a8:	9a 81       	ldd	r25, Y+2	; 0x02
    30aa:	01 97       	sbiw	r24, 0x01	; 1
    30ac:	f1 f7       	brne	.-4      	; 0x30aa <LCD_INIT_SendCommend+0x21e>
    30ae:	9a 83       	std	Y+2, r25	; 0x02
    30b0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	local_enuErrorState|=DIO_enuSetpinval(EN_PORT , EN_PIN , DIO_u8LOW);
    30b2:	81 e0       	ldi	r24, 0x01	; 1
    30b4:	60 e0       	ldi	r22, 0x00	; 0
    30b6:	40 e0       	ldi	r20, 0x00	; 0
    30b8:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <DIO_enuSetpinval>
    30bc:	98 2f       	mov	r25, r24
    30be:	8f 85       	ldd	r24, Y+15	; 0x0f
    30c0:	89 2b       	or	r24, r25
    30c2:	8f 87       	std	Y+15, r24	; 0x0f
return local_enuErrorState;
    30c4:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    30c6:	60 96       	adiw	r28, 0x10	; 16
    30c8:	0f b6       	in	r0, 0x3f	; 63
    30ca:	f8 94       	cli
    30cc:	de bf       	out	0x3e, r29	; 62
    30ce:	0f be       	out	0x3f, r0	; 63
    30d0:	cd bf       	out	0x3d, r28	; 61
    30d2:	cf 91       	pop	r28
    30d4:	df 91       	pop	r29
    30d6:	08 95       	ret

000030d8 <LCD_enuDisplayString>:


ES_ERROR LCD_enuDisplayString(u8 *pcopy_u8string){
    30d8:	df 93       	push	r29
    30da:	cf 93       	push	r28
    30dc:	00 d0       	rcall	.+0      	; 0x30de <LCD_enuDisplayString+0x6>
    30de:	0f 92       	push	r0
    30e0:	cd b7       	in	r28, 0x3d	; 61
    30e2:	de b7       	in	r29, 0x3e	; 62
    30e4:	9b 83       	std	Y+3, r25	; 0x03
    30e6:	8a 83       	std	Y+2, r24	; 0x02

	ES_ERROR local_enuErrorState = ES_OK;
    30e8:	19 82       	std	Y+1, r1	; 0x01

	if(pcopy_u8string!=NULL)
    30ea:	8a 81       	ldd	r24, Y+2	; 0x02
    30ec:	9b 81       	ldd	r25, Y+3	; 0x03
    30ee:	00 97       	sbiw	r24, 0x00	; 0
    30f0:	d1 f0       	breq	.+52     	; 0x3126 <LCD_enuDisplayString+0x4e>
    30f2:	13 c0       	rjmp	.+38     	; 0x311a <LCD_enuDisplayString+0x42>
	{

		while((*pcopy_u8string)!='\0'){

		local_enuErrorState|=	DIO_enuSetpinval(RS_PORT , RS_PIN , DIO_u8HIGH);
    30f4:	81 e0       	ldi	r24, 0x01	; 1
    30f6:	62 e0       	ldi	r22, 0x02	; 2
    30f8:	41 e0       	ldi	r20, 0x01	; 1
    30fa:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <DIO_enuSetpinval>
    30fe:	98 2f       	mov	r25, r24
    3100:	89 81       	ldd	r24, Y+1	; 0x01
    3102:	89 2b       	or	r24, r25
    3104:	89 83       	std	Y+1, r24	; 0x01

				LCD_inerSendData(*pcopy_u8string);
    3106:	ea 81       	ldd	r30, Y+2	; 0x02
    3108:	fb 81       	ldd	r31, Y+3	; 0x03
    310a:	80 81       	ld	r24, Z
    310c:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <LCD_inerSendData>
				pcopy_u8string++;
    3110:	8a 81       	ldd	r24, Y+2	; 0x02
    3112:	9b 81       	ldd	r25, Y+3	; 0x03
    3114:	01 96       	adiw	r24, 0x01	; 1
    3116:	9b 83       	std	Y+3, r25	; 0x03
    3118:	8a 83       	std	Y+2, r24	; 0x02
	ES_ERROR local_enuErrorState = ES_OK;

	if(pcopy_u8string!=NULL)
	{

		while((*pcopy_u8string)!='\0'){
    311a:	ea 81       	ldd	r30, Y+2	; 0x02
    311c:	fb 81       	ldd	r31, Y+3	; 0x03
    311e:	80 81       	ld	r24, Z
    3120:	88 23       	and	r24, r24
    3122:	41 f7       	brne	.-48     	; 0x30f4 <LCD_enuDisplayString+0x1c>
    3124:	02 c0       	rjmp	.+4      	; 0x312a <LCD_enuDisplayString+0x52>
		}

	}
	else
	{
		local_enuErrorState = ES_NULL_POINTER;
    3126:	82 e0       	ldi	r24, 0x02	; 2
    3128:	89 83       	std	Y+1, r24	; 0x01
	}


		return local_enuErrorState;
    312a:	89 81       	ldd	r24, Y+1	; 0x01
}
    312c:	0f 90       	pop	r0
    312e:	0f 90       	pop	r0
    3130:	0f 90       	pop	r0
    3132:	cf 91       	pop	r28
    3134:	df 91       	pop	r29
    3136:	08 95       	ret

00003138 <LCD_enuDisplayNum>:

/////////////////////////////////////////////////////////////////////////////////////////


ES_ERROR LCD_enuDisplayNum(u32 copyu32_num)
{      ES_ERROR local_u8errorState=ES_OK;
    3138:	0f 93       	push	r16
    313a:	1f 93       	push	r17
    313c:	df 93       	push	r29
    313e:	cf 93       	push	r28
    3140:	cd b7       	in	r28, 0x3d	; 61
    3142:	de b7       	in	r29, 0x3e	; 62
    3144:	61 97       	sbiw	r28, 0x11	; 17
    3146:	0f b6       	in	r0, 0x3f	; 63
    3148:	f8 94       	cli
    314a:	de bf       	out	0x3e, r29	; 62
    314c:	0f be       	out	0x3f, r0	; 63
    314e:	cd bf       	out	0x3d, r28	; 61
    3150:	6e 87       	std	Y+14, r22	; 0x0e
    3152:	7f 87       	std	Y+15, r23	; 0x0f
    3154:	88 8b       	std	Y+16, r24	; 0x10
    3156:	99 8b       	std	Y+17, r25	; 0x11
    3158:	1b 82       	std	Y+3, r1	; 0x03
	 u8 local_u8AnumArr[10],local_u8NumIter=0,local_u8DisIter=0;
    315a:	1a 82       	std	Y+2, r1	; 0x02
    315c:	19 82       	std	Y+1, r1	; 0x01
		   if(copyu32_num == 0)
    315e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3160:	9f 85       	ldd	r25, Y+15	; 0x0f
    3162:	a8 89       	ldd	r26, Y+16	; 0x10
    3164:	b9 89       	ldd	r27, Y+17	; 0x11
    3166:	00 97       	sbiw	r24, 0x00	; 0
    3168:	a1 05       	cpc	r26, r1
    316a:	b1 05       	cpc	r27, r1
    316c:	a9 f5       	brne	.+106    	; 0x31d8 <LCD_enuDisplayNum+0xa0>
		   {
			   local_u8errorState|=  LCD_enuDisplayChar('0');
    316e:	80 e3       	ldi	r24, 0x30	; 48
    3170:	0e 94 7d 15 	call	0x2afa	; 0x2afa <LCD_enuDisplayChar>
    3174:	9b 81       	ldd	r25, Y+3	; 0x03
    3176:	89 2b       	or	r24, r25
    3178:	8b 83       	std	Y+3, r24	; 0x03
    317a:	51 c0       	rjmp	.+162    	; 0x321e <LCD_enuDisplayNum+0xe6>
		   }
		   else
		   {
			   while(copyu32_num)
			   {
				   local_u8AnumArr[local_u8NumIter]=copyu32_num%10+'0';
    317c:	8a 81       	ldd	r24, Y+2	; 0x02
    317e:	08 2f       	mov	r16, r24
    3180:	10 e0       	ldi	r17, 0x00	; 0
    3182:	8e 85       	ldd	r24, Y+14	; 0x0e
    3184:	9f 85       	ldd	r25, Y+15	; 0x0f
    3186:	a8 89       	ldd	r26, Y+16	; 0x10
    3188:	b9 89       	ldd	r27, Y+17	; 0x11
    318a:	2a e0       	ldi	r18, 0x0A	; 10
    318c:	30 e0       	ldi	r19, 0x00	; 0
    318e:	40 e0       	ldi	r20, 0x00	; 0
    3190:	50 e0       	ldi	r21, 0x00	; 0
    3192:	bc 01       	movw	r22, r24
    3194:	cd 01       	movw	r24, r26
    3196:	0e 94 ca 19 	call	0x3394	; 0x3394 <__udivmodsi4>
    319a:	dc 01       	movw	r26, r24
    319c:	cb 01       	movw	r24, r22
    319e:	28 2f       	mov	r18, r24
    31a0:	20 5d       	subi	r18, 0xD0	; 208
    31a2:	ce 01       	movw	r24, r28
    31a4:	04 96       	adiw	r24, 0x04	; 4
    31a6:	fc 01       	movw	r30, r24
    31a8:	e0 0f       	add	r30, r16
    31aa:	f1 1f       	adc	r31, r17
    31ac:	20 83       	st	Z, r18
				   copyu32_num/=10;
    31ae:	8e 85       	ldd	r24, Y+14	; 0x0e
    31b0:	9f 85       	ldd	r25, Y+15	; 0x0f
    31b2:	a8 89       	ldd	r26, Y+16	; 0x10
    31b4:	b9 89       	ldd	r27, Y+17	; 0x11
    31b6:	2a e0       	ldi	r18, 0x0A	; 10
    31b8:	30 e0       	ldi	r19, 0x00	; 0
    31ba:	40 e0       	ldi	r20, 0x00	; 0
    31bc:	50 e0       	ldi	r21, 0x00	; 0
    31be:	bc 01       	movw	r22, r24
    31c0:	cd 01       	movw	r24, r26
    31c2:	0e 94 ca 19 	call	0x3394	; 0x3394 <__udivmodsi4>
    31c6:	da 01       	movw	r26, r20
    31c8:	c9 01       	movw	r24, r18
    31ca:	8e 87       	std	Y+14, r24	; 0x0e
    31cc:	9f 87       	std	Y+15, r25	; 0x0f
    31ce:	a8 8b       	std	Y+16, r26	; 0x10
    31d0:	b9 8b       	std	Y+17, r27	; 0x11
					local_u8NumIter++;
    31d2:	8a 81       	ldd	r24, Y+2	; 0x02
    31d4:	8f 5f       	subi	r24, 0xFF	; 255
    31d6:	8a 83       	std	Y+2, r24	; 0x02
		   {
			   local_u8errorState|=  LCD_enuDisplayChar('0');
		   }
		   else
		   {
			   while(copyu32_num)
    31d8:	8e 85       	ldd	r24, Y+14	; 0x0e
    31da:	9f 85       	ldd	r25, Y+15	; 0x0f
    31dc:	a8 89       	ldd	r26, Y+16	; 0x10
    31de:	b9 89       	ldd	r27, Y+17	; 0x11
    31e0:	00 97       	sbiw	r24, 0x00	; 0
    31e2:	a1 05       	cpc	r26, r1
    31e4:	b1 05       	cpc	r27, r1
    31e6:	51 f6       	brne	.-108    	; 0x317c <LCD_enuDisplayNum+0x44>
			   {
				   local_u8AnumArr[local_u8NumIter]=copyu32_num%10+'0';
				   copyu32_num/=10;
					local_u8NumIter++;
			   }
			   for(local_u8DisIter=local_u8NumIter;local_u8DisIter>0;local_u8DisIter--)
    31e8:	8a 81       	ldd	r24, Y+2	; 0x02
    31ea:	89 83       	std	Y+1, r24	; 0x01
    31ec:	15 c0       	rjmp	.+42     	; 0x3218 <LCD_enuDisplayNum+0xe0>
			   {
				   local_u8errorState|= LCD_enuDisplayChar(local_u8AnumArr[local_u8DisIter-1]);
    31ee:	89 81       	ldd	r24, Y+1	; 0x01
    31f0:	88 2f       	mov	r24, r24
    31f2:	90 e0       	ldi	r25, 0x00	; 0
    31f4:	9c 01       	movw	r18, r24
    31f6:	21 50       	subi	r18, 0x01	; 1
    31f8:	30 40       	sbci	r19, 0x00	; 0
    31fa:	ce 01       	movw	r24, r28
    31fc:	04 96       	adiw	r24, 0x04	; 4
    31fe:	fc 01       	movw	r30, r24
    3200:	e2 0f       	add	r30, r18
    3202:	f3 1f       	adc	r31, r19
    3204:	80 81       	ld	r24, Z
    3206:	0e 94 7d 15 	call	0x2afa	; 0x2afa <LCD_enuDisplayChar>
    320a:	98 2f       	mov	r25, r24
    320c:	8b 81       	ldd	r24, Y+3	; 0x03
    320e:	89 2b       	or	r24, r25
    3210:	8b 83       	std	Y+3, r24	; 0x03
			   {
				   local_u8AnumArr[local_u8NumIter]=copyu32_num%10+'0';
				   copyu32_num/=10;
					local_u8NumIter++;
			   }
			   for(local_u8DisIter=local_u8NumIter;local_u8DisIter>0;local_u8DisIter--)
    3212:	89 81       	ldd	r24, Y+1	; 0x01
    3214:	81 50       	subi	r24, 0x01	; 1
    3216:	89 83       	std	Y+1, r24	; 0x01
    3218:	89 81       	ldd	r24, Y+1	; 0x01
    321a:	88 23       	and	r24, r24
    321c:	41 f7       	brne	.-48     	; 0x31ee <LCD_enuDisplayNum+0xb6>
			   {
				   local_u8errorState|= LCD_enuDisplayChar(local_u8AnumArr[local_u8DisIter-1]);
			   }
		   }
		   return  local_u8errorState;
    321e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3220:	61 96       	adiw	r28, 0x11	; 17
    3222:	0f b6       	in	r0, 0x3f	; 63
    3224:	f8 94       	cli
    3226:	de bf       	out	0x3e, r29	; 62
    3228:	0f be       	out	0x3f, r0	; 63
    322a:	cd bf       	out	0x3d, r28	; 61
    322c:	cf 91       	pop	r28
    322e:	df 91       	pop	r29
    3230:	1f 91       	pop	r17
    3232:	0f 91       	pop	r16
    3234:	08 95       	ret

00003236 <LCD_setCusor>:




 void LCD_setCusor(u8 copyu8_row,u8 copy_u8_column)
{      copy_u8_column--;
    3236:	df 93       	push	r29
    3238:	cf 93       	push	r28
    323a:	00 d0       	rcall	.+0      	; 0x323c <LCD_setCusor+0x6>
    323c:	00 d0       	rcall	.+0      	; 0x323e <LCD_setCusor+0x8>
    323e:	cd b7       	in	r28, 0x3d	; 61
    3240:	de b7       	in	r29, 0x3e	; 62
    3242:	89 83       	std	Y+1, r24	; 0x01
    3244:	6a 83       	std	Y+2, r22	; 0x02
    3246:	8a 81       	ldd	r24, Y+2	; 0x02
    3248:	81 50       	subi	r24, 0x01	; 1
    324a:	8a 83       	std	Y+2, r24	; 0x02

		switch(copyu8_row){
    324c:	89 81       	ldd	r24, Y+1	; 0x01
    324e:	28 2f       	mov	r18, r24
    3250:	30 e0       	ldi	r19, 0x00	; 0
    3252:	3c 83       	std	Y+4, r19	; 0x04
    3254:	2b 83       	std	Y+3, r18	; 0x03
    3256:	8b 81       	ldd	r24, Y+3	; 0x03
    3258:	9c 81       	ldd	r25, Y+4	; 0x04
    325a:	81 30       	cpi	r24, 0x01	; 1
    325c:	91 05       	cpc	r25, r1
    325e:	31 f0       	breq	.+12     	; 0x326c <LCD_setCusor+0x36>
    3260:	2b 81       	ldd	r18, Y+3	; 0x03
    3262:	3c 81       	ldd	r19, Y+4	; 0x04
    3264:	22 30       	cpi	r18, 0x02	; 2
    3266:	31 05       	cpc	r19, r1
    3268:	31 f0       	breq	.+12     	; 0x3276 <LCD_setCusor+0x40>
    326a:	09 c0       	rjmp	.+18     	; 0x327e <LCD_setCusor+0x48>
		            case ROW1:  LCD_enuSendCommand((0x80 + copy_u8_column)); break;
    326c:	8a 81       	ldd	r24, Y+2	; 0x02
    326e:	80 58       	subi	r24, 0x80	; 128
    3270:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <LCD_enuSendCommand>
    3274:	04 c0       	rjmp	.+8      	; 0x327e <LCD_setCusor+0x48>
		            case ROW2:  LCD_enuSendCommand((0xc0 +copy_u8_column)); break;
    3276:	8a 81       	ldd	r24, Y+2	; 0x02
    3278:	80 54       	subi	r24, 0x40	; 64
    327a:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <LCD_enuSendCommand>
		            default:;
		        }


}
    327e:	0f 90       	pop	r0
    3280:	0f 90       	pop	r0
    3282:	0f 90       	pop	r0
    3284:	0f 90       	pop	r0
    3286:	cf 91       	pop	r28
    3288:	df 91       	pop	r29
    328a:	08 95       	ret

0000328c <LCD_enuClear>:

ES_ERROR LCD_enuClear()
{
    328c:	df 93       	push	r29
    328e:	cf 93       	push	r28
    3290:	0f 92       	push	r0
    3292:	cd b7       	in	r28, 0x3d	; 61
    3294:	de b7       	in	r29, 0x3e	; 62
	ES_ERROR local_u8errorState=ES_OK;
    3296:	19 82       	std	Y+1, r1	; 0x01
	local_u8errorState|=LCD_enuSendCommand(0x01);
    3298:	81 e0       	ldi	r24, 0x01	; 1
    329a:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <LCD_enuSendCommand>
    329e:	98 2f       	mov	r25, r24
    32a0:	89 81       	ldd	r24, Y+1	; 0x01
    32a2:	89 2b       	or	r24, r25
    32a4:	89 83       	std	Y+1, r24	; 0x01

return local_u8errorState;
    32a6:	89 81       	ldd	r24, Y+1	; 0x01

}
    32a8:	0f 90       	pop	r0
    32aa:	cf 91       	pop	r28
    32ac:	df 91       	pop	r29
    32ae:	08 95       	ret

000032b0 <LCD_enuDisplayCharPOS>:





ES_ERROR LCD_enuDisplayCharPOS(u8 Copy_u8Data,u8 copyu8_row,u8 copy_u8_column){
    32b0:	df 93       	push	r29
    32b2:	cf 93       	push	r28
    32b4:	00 d0       	rcall	.+0      	; 0x32b6 <LCD_enuDisplayCharPOS+0x6>
    32b6:	0f 92       	push	r0
    32b8:	cd b7       	in	r28, 0x3d	; 61
    32ba:	de b7       	in	r29, 0x3e	; 62
    32bc:	89 83       	std	Y+1, r24	; 0x01
    32be:	6a 83       	std	Y+2, r22	; 0x02
    32c0:	4b 83       	std	Y+3, r20	; 0x03

	LCD_setCusor(copyu8_row, copy_u8_column);
    32c2:	8a 81       	ldd	r24, Y+2	; 0x02
    32c4:	6b 81       	ldd	r22, Y+3	; 0x03
    32c6:	0e 94 1b 19 	call	0x3236	; 0x3236 <LCD_setCusor>
	LCD_enuDisplayChar(Copy_u8Data);
    32ca:	89 81       	ldd	r24, Y+1	; 0x01
    32cc:	0e 94 7d 15 	call	0x2afa	; 0x2afa <LCD_enuDisplayChar>
return ES_OK;
    32d0:	80 e0       	ldi	r24, 0x00	; 0
}
    32d2:	0f 90       	pop	r0
    32d4:	0f 90       	pop	r0
    32d6:	0f 90       	pop	r0
    32d8:	cf 91       	pop	r28
    32da:	df 91       	pop	r29
    32dc:	08 95       	ret

000032de <LCD_enuDisplayStringPOS>:

ES_ERROR LCD_enuDisplayStringPOS(u8 *pcopy_u8string,u8 copyu8_row,u8 copy_u8_column){
    32de:	df 93       	push	r29
    32e0:	cf 93       	push	r28
    32e2:	00 d0       	rcall	.+0      	; 0x32e4 <LCD_enuDisplayStringPOS+0x6>
    32e4:	00 d0       	rcall	.+0      	; 0x32e6 <LCD_enuDisplayStringPOS+0x8>
    32e6:	cd b7       	in	r28, 0x3d	; 61
    32e8:	de b7       	in	r29, 0x3e	; 62
    32ea:	9a 83       	std	Y+2, r25	; 0x02
    32ec:	89 83       	std	Y+1, r24	; 0x01
    32ee:	6b 83       	std	Y+3, r22	; 0x03
    32f0:	4c 83       	std	Y+4, r20	; 0x04
	LCD_setCusor(copyu8_row, copy_u8_column);
    32f2:	8b 81       	ldd	r24, Y+3	; 0x03
    32f4:	6c 81       	ldd	r22, Y+4	; 0x04
    32f6:	0e 94 1b 19 	call	0x3236	; 0x3236 <LCD_setCusor>
	LCD_enuDisplayString(pcopy_u8string);
    32fa:	89 81       	ldd	r24, Y+1	; 0x01
    32fc:	9a 81       	ldd	r25, Y+2	; 0x02
    32fe:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <LCD_enuDisplayString>
	return ES_OK;
    3302:	80 e0       	ldi	r24, 0x00	; 0
}
    3304:	0f 90       	pop	r0
    3306:	0f 90       	pop	r0
    3308:	0f 90       	pop	r0
    330a:	0f 90       	pop	r0
    330c:	cf 91       	pop	r28
    330e:	df 91       	pop	r29
    3310:	08 95       	ret

00003312 <LCD_enuDisplayNumPOS>:

ES_ERROR LCD_enuDisplayNumPOS(u32 copyu32_num,u8 copyu8_row,u8 copy_u8_column){
    3312:	df 93       	push	r29
    3314:	cf 93       	push	r28
    3316:	00 d0       	rcall	.+0      	; 0x3318 <LCD_enuDisplayNumPOS+0x6>
    3318:	00 d0       	rcall	.+0      	; 0x331a <LCD_enuDisplayNumPOS+0x8>
    331a:	00 d0       	rcall	.+0      	; 0x331c <LCD_enuDisplayNumPOS+0xa>
    331c:	cd b7       	in	r28, 0x3d	; 61
    331e:	de b7       	in	r29, 0x3e	; 62
    3320:	69 83       	std	Y+1, r22	; 0x01
    3322:	7a 83       	std	Y+2, r23	; 0x02
    3324:	8b 83       	std	Y+3, r24	; 0x03
    3326:	9c 83       	std	Y+4, r25	; 0x04
    3328:	4d 83       	std	Y+5, r20	; 0x05
    332a:	2e 83       	std	Y+6, r18	; 0x06
	LCD_setCusor(copyu8_row, copy_u8_column);
    332c:	8d 81       	ldd	r24, Y+5	; 0x05
    332e:	6e 81       	ldd	r22, Y+6	; 0x06
    3330:	0e 94 1b 19 	call	0x3236	; 0x3236 <LCD_setCusor>
	LCD_enuDisplayNum(copyu32_num);
    3334:	89 81       	ldd	r24, Y+1	; 0x01
    3336:	9a 81       	ldd	r25, Y+2	; 0x02
    3338:	ab 81       	ldd	r26, Y+3	; 0x03
    333a:	bc 81       	ldd	r27, Y+4	; 0x04
    333c:	bc 01       	movw	r22, r24
    333e:	cd 01       	movw	r24, r26
    3340:	0e 94 9c 18 	call	0x3138	; 0x3138 <LCD_enuDisplayNum>
	return ES_OK;
    3344:	80 e0       	ldi	r24, 0x00	; 0
}
    3346:	26 96       	adiw	r28, 0x06	; 6
    3348:	0f b6       	in	r0, 0x3f	; 63
    334a:	f8 94       	cli
    334c:	de bf       	out	0x3e, r29	; 62
    334e:	0f be       	out	0x3f, r0	; 63
    3350:	cd bf       	out	0x3d, r28	; 61
    3352:	cf 91       	pop	r28
    3354:	df 91       	pop	r29
    3356:	08 95       	ret

00003358 <main>:
#include"errorState.h"
#include"MCAL\DIO_int.h"
#include"HAL\KEYPAD_int.h"
#include"HAL\LCD_int.h"
#include"application\app.h"
int main(void){
    3358:	df 93       	push	r29
    335a:	cf 93       	push	r28
    335c:	cd b7       	in	r28, 0x3d	; 61
    335e:	de b7       	in	r29, 0x3e	; 62

app();
    3360:	0e 94 9b 05 	call	0xb36	; 0xb36 <app>
	//LCD_enuDisplayString("MANAR");
	LCD_enuDisplayNumPOS(56,2,5);
	while(1);*/


	return 1;
    3364:	81 e0       	ldi	r24, 0x01	; 1
    3366:	90 e0       	ldi	r25, 0x00	; 0
}
    3368:	cf 91       	pop	r28
    336a:	df 91       	pop	r29
    336c:	08 95       	ret

0000336e <__divmodhi4>:
    336e:	97 fb       	bst	r25, 7
    3370:	09 2e       	mov	r0, r25
    3372:	07 26       	eor	r0, r23
    3374:	0a d0       	rcall	.+20     	; 0x338a <__divmodhi4_neg1>
    3376:	77 fd       	sbrc	r23, 7
    3378:	04 d0       	rcall	.+8      	; 0x3382 <__divmodhi4_neg2>
    337a:	2e d0       	rcall	.+92     	; 0x33d8 <__udivmodhi4>
    337c:	06 d0       	rcall	.+12     	; 0x338a <__divmodhi4_neg1>
    337e:	00 20       	and	r0, r0
    3380:	1a f4       	brpl	.+6      	; 0x3388 <__divmodhi4_exit>

00003382 <__divmodhi4_neg2>:
    3382:	70 95       	com	r23
    3384:	61 95       	neg	r22
    3386:	7f 4f       	sbci	r23, 0xFF	; 255

00003388 <__divmodhi4_exit>:
    3388:	08 95       	ret

0000338a <__divmodhi4_neg1>:
    338a:	f6 f7       	brtc	.-4      	; 0x3388 <__divmodhi4_exit>
    338c:	90 95       	com	r25
    338e:	81 95       	neg	r24
    3390:	9f 4f       	sbci	r25, 0xFF	; 255
    3392:	08 95       	ret

00003394 <__udivmodsi4>:
    3394:	a1 e2       	ldi	r26, 0x21	; 33
    3396:	1a 2e       	mov	r1, r26
    3398:	aa 1b       	sub	r26, r26
    339a:	bb 1b       	sub	r27, r27
    339c:	fd 01       	movw	r30, r26
    339e:	0d c0       	rjmp	.+26     	; 0x33ba <__udivmodsi4_ep>

000033a0 <__udivmodsi4_loop>:
    33a0:	aa 1f       	adc	r26, r26
    33a2:	bb 1f       	adc	r27, r27
    33a4:	ee 1f       	adc	r30, r30
    33a6:	ff 1f       	adc	r31, r31
    33a8:	a2 17       	cp	r26, r18
    33aa:	b3 07       	cpc	r27, r19
    33ac:	e4 07       	cpc	r30, r20
    33ae:	f5 07       	cpc	r31, r21
    33b0:	20 f0       	brcs	.+8      	; 0x33ba <__udivmodsi4_ep>
    33b2:	a2 1b       	sub	r26, r18
    33b4:	b3 0b       	sbc	r27, r19
    33b6:	e4 0b       	sbc	r30, r20
    33b8:	f5 0b       	sbc	r31, r21

000033ba <__udivmodsi4_ep>:
    33ba:	66 1f       	adc	r22, r22
    33bc:	77 1f       	adc	r23, r23
    33be:	88 1f       	adc	r24, r24
    33c0:	99 1f       	adc	r25, r25
    33c2:	1a 94       	dec	r1
    33c4:	69 f7       	brne	.-38     	; 0x33a0 <__udivmodsi4_loop>
    33c6:	60 95       	com	r22
    33c8:	70 95       	com	r23
    33ca:	80 95       	com	r24
    33cc:	90 95       	com	r25
    33ce:	9b 01       	movw	r18, r22
    33d0:	ac 01       	movw	r20, r24
    33d2:	bd 01       	movw	r22, r26
    33d4:	cf 01       	movw	r24, r30
    33d6:	08 95       	ret

000033d8 <__udivmodhi4>:
    33d8:	aa 1b       	sub	r26, r26
    33da:	bb 1b       	sub	r27, r27
    33dc:	51 e1       	ldi	r21, 0x11	; 17
    33de:	07 c0       	rjmp	.+14     	; 0x33ee <__udivmodhi4_ep>

000033e0 <__udivmodhi4_loop>:
    33e0:	aa 1f       	adc	r26, r26
    33e2:	bb 1f       	adc	r27, r27
    33e4:	a6 17       	cp	r26, r22
    33e6:	b7 07       	cpc	r27, r23
    33e8:	10 f0       	brcs	.+4      	; 0x33ee <__udivmodhi4_ep>
    33ea:	a6 1b       	sub	r26, r22
    33ec:	b7 0b       	sbc	r27, r23

000033ee <__udivmodhi4_ep>:
    33ee:	88 1f       	adc	r24, r24
    33f0:	99 1f       	adc	r25, r25
    33f2:	5a 95       	dec	r21
    33f4:	a9 f7       	brne	.-22     	; 0x33e0 <__udivmodhi4_loop>
    33f6:	80 95       	com	r24
    33f8:	90 95       	com	r25
    33fa:	bc 01       	movw	r22, r24
    33fc:	cd 01       	movw	r24, r26
    33fe:	08 95       	ret

00003400 <__prologue_saves__>:
    3400:	2f 92       	push	r2
    3402:	3f 92       	push	r3
    3404:	4f 92       	push	r4
    3406:	5f 92       	push	r5
    3408:	6f 92       	push	r6
    340a:	7f 92       	push	r7
    340c:	8f 92       	push	r8
    340e:	9f 92       	push	r9
    3410:	af 92       	push	r10
    3412:	bf 92       	push	r11
    3414:	cf 92       	push	r12
    3416:	df 92       	push	r13
    3418:	ef 92       	push	r14
    341a:	ff 92       	push	r15
    341c:	0f 93       	push	r16
    341e:	1f 93       	push	r17
    3420:	cf 93       	push	r28
    3422:	df 93       	push	r29
    3424:	cd b7       	in	r28, 0x3d	; 61
    3426:	de b7       	in	r29, 0x3e	; 62
    3428:	ca 1b       	sub	r28, r26
    342a:	db 0b       	sbc	r29, r27
    342c:	0f b6       	in	r0, 0x3f	; 63
    342e:	f8 94       	cli
    3430:	de bf       	out	0x3e, r29	; 62
    3432:	0f be       	out	0x3f, r0	; 63
    3434:	cd bf       	out	0x3d, r28	; 61
    3436:	09 94       	ijmp

00003438 <__epilogue_restores__>:
    3438:	2a 88       	ldd	r2, Y+18	; 0x12
    343a:	39 88       	ldd	r3, Y+17	; 0x11
    343c:	48 88       	ldd	r4, Y+16	; 0x10
    343e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3440:	6e 84       	ldd	r6, Y+14	; 0x0e
    3442:	7d 84       	ldd	r7, Y+13	; 0x0d
    3444:	8c 84       	ldd	r8, Y+12	; 0x0c
    3446:	9b 84       	ldd	r9, Y+11	; 0x0b
    3448:	aa 84       	ldd	r10, Y+10	; 0x0a
    344a:	b9 84       	ldd	r11, Y+9	; 0x09
    344c:	c8 84       	ldd	r12, Y+8	; 0x08
    344e:	df 80       	ldd	r13, Y+7	; 0x07
    3450:	ee 80       	ldd	r14, Y+6	; 0x06
    3452:	fd 80       	ldd	r15, Y+5	; 0x05
    3454:	0c 81       	ldd	r16, Y+4	; 0x04
    3456:	1b 81       	ldd	r17, Y+3	; 0x03
    3458:	aa 81       	ldd	r26, Y+2	; 0x02
    345a:	b9 81       	ldd	r27, Y+1	; 0x01
    345c:	ce 0f       	add	r28, r30
    345e:	d1 1d       	adc	r29, r1
    3460:	0f b6       	in	r0, 0x3f	; 63
    3462:	f8 94       	cli
    3464:	de bf       	out	0x3e, r29	; 62
    3466:	0f be       	out	0x3f, r0	; 63
    3468:	cd bf       	out	0x3d, r28	; 61
    346a:	ed 01       	movw	r28, r26
    346c:	08 95       	ret

0000346e <_exit>:
    346e:	f8 94       	cli

00003470 <__stop_program>:
    3470:	ff cf       	rjmp	.-2      	; 0x3470 <__stop_program>

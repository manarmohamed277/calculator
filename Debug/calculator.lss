
calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000341e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000066  00800060  0000341e  00003492  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002bc8  00000000  00000000  000034f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e8b  00000000  00000000  000060c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00006f4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  0000708b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  000071fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00008e44  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00009d2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000aadc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000ac3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000aec9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b697  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e1       	ldi	r30, 0x1E	; 30
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3c       	cpi	r26, 0xC6	; 198
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 82 19 	call	0x3304	; 0x3304 <main>
      7a:	0c 94 0d 1a 	jmp	0x341a	; 0x341a <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 d6 19 	jmp	0x33ac	; 0x33ac <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a5 ea       	ldi	r26, 0xA5	; 165
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 f2 19 	jmp	0x33e4	; 0x33e4 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 e2 19 	jmp	0x33c4	; 0x33c4 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 fe 19 	jmp	0x33fc	; 0x33fc <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 e2 19 	jmp	0x33c4	; 0x33c4 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 fe 19 	jmp	0x33fc	; 0x33fc <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 d6 19 	jmp	0x33ac	; 0x33ac <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	85 ea       	ldi	r24, 0xA5	; 165
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 f2 19 	jmp	0x33e4	; 0x33e4 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 e2 19 	jmp	0x33c4	; 0x33c4 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 fe 19 	jmp	0x33fc	; 0x33fc <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 e2 19 	jmp	0x33c4	; 0x33c4 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 fe 19 	jmp	0x33fc	; 0x33fc <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 e2 19 	jmp	0x33c4	; 0x33c4 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 fe 19 	jmp	0x33fc	; 0x33fc <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 e6 19 	jmp	0x33cc	; 0x33cc <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 02 1a 	jmp	0x3404	; 0x3404 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <DIO_enuInit>:
#include"DIO_cofig.h"
#include"errorState.h"
#include "stdTypes.h"


ES_ERROR DIO_enuInit(void){
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	0f 92       	push	r0
     b3c:	cd b7       	in	r28, 0x3d	; 61
     b3e:	de b7       	in	r29, 0x3e	; 62
ES_ERROR local_enuerrorstate=ES_NOK;
     b40:	81 e0       	ldi	r24, 0x01	; 1
     b42:	89 83       	std	Y+1, r24	; 0x01

DDRA=conc(PA_PIN7_DIR,PA_PIN6_DIR,PA_PIN5_DIR,PA_PIN4_DIR,PA_PIN3_DIR,PA_PIN2_DIR,PA_PIN1_DIR,PA_PIN0_DIR);
     b44:	ea e3       	ldi	r30, 0x3A	; 58
     b46:	f0 e0       	ldi	r31, 0x00	; 0
     b48:	8f ef       	ldi	r24, 0xFF	; 255
     b4a:	80 83       	st	Z, r24
DDRB=conc(PB_PIN7_DIR,PB_PIN6_DIR,PB_PIN5_DIR,PB_PIN4_DIR,PB_PIN3_DIR,PB_PIN2_DIR,PB_PIN1_DIR,PB_PIN0_DIR);
     b4c:	e7 e3       	ldi	r30, 0x37	; 55
     b4e:	f0 e0       	ldi	r31, 0x00	; 0
     b50:	8f ef       	ldi	r24, 0xFF	; 255
     b52:	80 83       	st	Z, r24
DDRC=conc(PC_PIN7_DIR,PC_PIN6_DIR,PC_PIN5_DIR,PC_PIN4_DIR,PC_PIN3_DIR,PC_PIN2_DIR,PC_PIN1_DIR,PC_PIN0_DIR);
     b54:	e4 e3       	ldi	r30, 0x34	; 52
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	8f e0       	ldi	r24, 0x0F	; 15
     b5a:	80 83       	st	Z, r24
DDRD=conc(PD_PIN7_DIR,PD_PIN6_DIR,PD_PIN5_DIR,PD_PIN4_DIR,PD_PIN3_DIR,PD_PIN2_DIR,PD_PIN1_DIR,PD_PIN0_DIR);
     b5c:	e1 e3       	ldi	r30, 0x31	; 49
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	85 ed       	ldi	r24, 0xD5	; 213
     b62:	80 83       	st	Z, r24

PORTA=conc(PA_PIN7_VAL,PA_PIN6_VAL,PA_PIN5_VAL,PA_PIN4_VAL,PA_PIN3_VAL,PA_PIN2_VAL,PA_PIN1_VAL,PA_PIN0_VAL);
     b64:	eb e3       	ldi	r30, 0x3B	; 59
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	10 82       	st	Z, r1
PORTB=conc(PB_PIN7_VAL,PB_PIN6_VAL,PB_PIN5_VAL,PB_PIN4_VAL,PB_PIN3_VAL,PB_PIN2_VAL,PB_PIN1_VAL,PB_PIN0_VAL);
     b6a:	e8 e3       	ldi	r30, 0x38	; 56
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	10 82       	st	Z, r1
PORTC=conc(PC_PIN7_VAL,PC_PIN6_VAL,PC_PIN5_VAL,PC_PIN4_VAL,PC_PIN3_VAL,PC_PIN2_VAL,PC_PIN1_VAL,PC_PIN0_VAL);
     b70:	e5 e3       	ldi	r30, 0x35	; 53
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	8f ef       	ldi	r24, 0xFF	; 255
     b76:	80 83       	st	Z, r24
PORTD=conc(PD_PIN7_VAL,PD_PIN6_VAL,PD_PIN5_VAL,PD_PIN4_VAL,PD_PIN3_VAL,PD_PIN2_VAL,PD_PIN1_VAL,PD_PIN0_VAL);
     b78:	e2 e3       	ldi	r30, 0x32	; 50
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	10 82       	st	Z, r1

    local_enuerrorstate=ES_OK;
     b7e:	19 82       	std	Y+1, r1	; 0x01

return local_enuerrorstate;
     b80:	89 81       	ldd	r24, Y+1	; 0x01
}
     b82:	0f 90       	pop	r0
     b84:	cf 91       	pop	r28
     b86:	df 91       	pop	r29
     b88:	08 95       	ret

00000b8a <DIO_enuSetportdir>:

ES_ERROR DIO_enuSetportdir(u8 copy_u8portid,u8 copy_u8value){
     b8a:	df 93       	push	r29
     b8c:	cf 93       	push	r28
     b8e:	00 d0       	rcall	.+0      	; 0xb90 <DIO_enuSetportdir+0x6>
     b90:	00 d0       	rcall	.+0      	; 0xb92 <DIO_enuSetportdir+0x8>
     b92:	0f 92       	push	r0
     b94:	cd b7       	in	r28, 0x3d	; 61
     b96:	de b7       	in	r29, 0x3e	; 62
     b98:	8a 83       	std	Y+2, r24	; 0x02
     b9a:	6b 83       	std	Y+3, r22	; 0x03
	ES_ERROR local_enuerrorstate=ES_NOK;
     b9c:	81 e0       	ldi	r24, 0x01	; 1
     b9e:	89 83       	std	Y+1, r24	; 0x01

	 if( copy_u8portid<=DIO_PORTD){
     ba0:	8a 81       	ldd	r24, Y+2	; 0x02
     ba2:	84 30       	cpi	r24, 0x04	; 4
     ba4:	a0 f5       	brcc	.+104    	; 0xc0e <DIO_enuSetportdir+0x84>
		 switch(copy_u8portid){
     ba6:	8a 81       	ldd	r24, Y+2	; 0x02
     ba8:	28 2f       	mov	r18, r24
     baa:	30 e0       	ldi	r19, 0x00	; 0
     bac:	3d 83       	std	Y+5, r19	; 0x05
     bae:	2c 83       	std	Y+4, r18	; 0x04
     bb0:	8c 81       	ldd	r24, Y+4	; 0x04
     bb2:	9d 81       	ldd	r25, Y+5	; 0x05
     bb4:	81 30       	cpi	r24, 0x01	; 1
     bb6:	91 05       	cpc	r25, r1
     bb8:	d1 f0       	breq	.+52     	; 0xbee <DIO_enuSetportdir+0x64>
     bba:	2c 81       	ldd	r18, Y+4	; 0x04
     bbc:	3d 81       	ldd	r19, Y+5	; 0x05
     bbe:	22 30       	cpi	r18, 0x02	; 2
     bc0:	31 05       	cpc	r19, r1
     bc2:	2c f4       	brge	.+10     	; 0xbce <DIO_enuSetportdir+0x44>
     bc4:	8c 81       	ldd	r24, Y+4	; 0x04
     bc6:	9d 81       	ldd	r25, Y+5	; 0x05
     bc8:	00 97       	sbiw	r24, 0x00	; 0
     bca:	61 f0       	breq	.+24     	; 0xbe4 <DIO_enuSetportdir+0x5a>
     bcc:	1e c0       	rjmp	.+60     	; 0xc0a <DIO_enuSetportdir+0x80>
     bce:	2c 81       	ldd	r18, Y+4	; 0x04
     bd0:	3d 81       	ldd	r19, Y+5	; 0x05
     bd2:	22 30       	cpi	r18, 0x02	; 2
     bd4:	31 05       	cpc	r19, r1
     bd6:	81 f0       	breq	.+32     	; 0xbf8 <DIO_enuSetportdir+0x6e>
     bd8:	8c 81       	ldd	r24, Y+4	; 0x04
     bda:	9d 81       	ldd	r25, Y+5	; 0x05
     bdc:	83 30       	cpi	r24, 0x03	; 3
     bde:	91 05       	cpc	r25, r1
     be0:	81 f0       	breq	.+32     	; 0xc02 <DIO_enuSetportdir+0x78>
     be2:	13 c0       	rjmp	.+38     	; 0xc0a <DIO_enuSetportdir+0x80>
		 case DIO_PORTA :
			DDRA=copy_u8value;
     be4:	ea e3       	ldi	r30, 0x3A	; 58
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	8b 81       	ldd	r24, Y+3	; 0x03
     bea:	80 83       	st	Z, r24
     bec:	0e c0       	rjmp	.+28     	; 0xc0a <DIO_enuSetportdir+0x80>
		   break;
		 case DIO_PORTB :
			DDRB=copy_u8value;
     bee:	e7 e3       	ldi	r30, 0x37	; 55
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	8b 81       	ldd	r24, Y+3	; 0x03
     bf4:	80 83       	st	Z, r24
     bf6:	09 c0       	rjmp	.+18     	; 0xc0a <DIO_enuSetportdir+0x80>
			   break;
		 case DIO_PORTC :
			DDRC=copy_u8value;
     bf8:	e4 e3       	ldi	r30, 0x34	; 52
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	8b 81       	ldd	r24, Y+3	; 0x03
     bfe:	80 83       	st	Z, r24
     c00:	04 c0       	rjmp	.+8      	; 0xc0a <DIO_enuSetportdir+0x80>
			   break;
		 case DIO_PORTD :
			DDRD=copy_u8value;
     c02:	e1 e3       	ldi	r30, 0x31	; 49
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	80 83       	st	Z, r24
			   break;
		 }
		  local_enuerrorstate=ES_OK;
     c0a:	19 82       	std	Y+1, r1	; 0x01
     c0c:	02 c0       	rjmp	.+4      	; 0xc12 <DIO_enuSetportdir+0x88>
	 }
	 else{local_enuerrorstate=ES_OUT_OF_RANGE;}
     c0e:	83 e0       	ldi	r24, 0x03	; 3
     c10:	89 83       	std	Y+1, r24	; 0x01

	return local_enuerrorstate;
     c12:	89 81       	ldd	r24, Y+1	; 0x01
}
     c14:	0f 90       	pop	r0
     c16:	0f 90       	pop	r0
     c18:	0f 90       	pop	r0
     c1a:	0f 90       	pop	r0
     c1c:	0f 90       	pop	r0
     c1e:	cf 91       	pop	r28
     c20:	df 91       	pop	r29
     c22:	08 95       	ret

00000c24 <DIO_enuSetportval>:



ES_ERROR DIO_enuSetportval(u8 copy_u8portid,u8 copy_u8value){
     c24:	df 93       	push	r29
     c26:	cf 93       	push	r28
     c28:	00 d0       	rcall	.+0      	; 0xc2a <DIO_enuSetportval+0x6>
     c2a:	00 d0       	rcall	.+0      	; 0xc2c <DIO_enuSetportval+0x8>
     c2c:	0f 92       	push	r0
     c2e:	cd b7       	in	r28, 0x3d	; 61
     c30:	de b7       	in	r29, 0x3e	; 62
     c32:	8a 83       	std	Y+2, r24	; 0x02
     c34:	6b 83       	std	Y+3, r22	; 0x03
	ES_ERROR local_enuerrorstate=ES_NOK;
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	89 83       	std	Y+1, r24	; 0x01

	 if( copy_u8portid<=DIO_PORTD){
     c3a:	8a 81       	ldd	r24, Y+2	; 0x02
     c3c:	84 30       	cpi	r24, 0x04	; 4
     c3e:	a0 f5       	brcc	.+104    	; 0xca8 <DIO_enuSetportval+0x84>
		 switch(copy_u8portid){
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	3d 83       	std	Y+5, r19	; 0x05
     c48:	2c 83       	std	Y+4, r18	; 0x04
     c4a:	8c 81       	ldd	r24, Y+4	; 0x04
     c4c:	9d 81       	ldd	r25, Y+5	; 0x05
     c4e:	81 30       	cpi	r24, 0x01	; 1
     c50:	91 05       	cpc	r25, r1
     c52:	d1 f0       	breq	.+52     	; 0xc88 <DIO_enuSetportval+0x64>
     c54:	2c 81       	ldd	r18, Y+4	; 0x04
     c56:	3d 81       	ldd	r19, Y+5	; 0x05
     c58:	22 30       	cpi	r18, 0x02	; 2
     c5a:	31 05       	cpc	r19, r1
     c5c:	2c f4       	brge	.+10     	; 0xc68 <DIO_enuSetportval+0x44>
     c5e:	8c 81       	ldd	r24, Y+4	; 0x04
     c60:	9d 81       	ldd	r25, Y+5	; 0x05
     c62:	00 97       	sbiw	r24, 0x00	; 0
     c64:	61 f0       	breq	.+24     	; 0xc7e <DIO_enuSetportval+0x5a>
     c66:	1e c0       	rjmp	.+60     	; 0xca4 <DIO_enuSetportval+0x80>
     c68:	2c 81       	ldd	r18, Y+4	; 0x04
     c6a:	3d 81       	ldd	r19, Y+5	; 0x05
     c6c:	22 30       	cpi	r18, 0x02	; 2
     c6e:	31 05       	cpc	r19, r1
     c70:	81 f0       	breq	.+32     	; 0xc92 <DIO_enuSetportval+0x6e>
     c72:	8c 81       	ldd	r24, Y+4	; 0x04
     c74:	9d 81       	ldd	r25, Y+5	; 0x05
     c76:	83 30       	cpi	r24, 0x03	; 3
     c78:	91 05       	cpc	r25, r1
     c7a:	81 f0       	breq	.+32     	; 0xc9c <DIO_enuSetportval+0x78>
     c7c:	13 c0       	rjmp	.+38     	; 0xca4 <DIO_enuSetportval+0x80>
		 case DIO_PORTA :
			PORTA=copy_u8value;
     c7e:	eb e3       	ldi	r30, 0x3B	; 59
     c80:	f0 e0       	ldi	r31, 0x00	; 0
     c82:	8b 81       	ldd	r24, Y+3	; 0x03
     c84:	80 83       	st	Z, r24
     c86:	0e c0       	rjmp	.+28     	; 0xca4 <DIO_enuSetportval+0x80>
		   break;
		 case DIO_PORTB :
			PORTB=copy_u8value;
     c88:	e8 e3       	ldi	r30, 0x38	; 56
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	8b 81       	ldd	r24, Y+3	; 0x03
     c8e:	80 83       	st	Z, r24
     c90:	09 c0       	rjmp	.+18     	; 0xca4 <DIO_enuSetportval+0x80>
			   break;
		 case DIO_PORTC :
			PORTC=copy_u8value;
     c92:	e5 e3       	ldi	r30, 0x35	; 53
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	8b 81       	ldd	r24, Y+3	; 0x03
     c98:	80 83       	st	Z, r24
     c9a:	04 c0       	rjmp	.+8      	; 0xca4 <DIO_enuSetportval+0x80>
			   break;
		 case DIO_PORTD :
			PORTD=copy_u8value;
     c9c:	e2 e3       	ldi	r30, 0x32	; 50
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	8b 81       	ldd	r24, Y+3	; 0x03
     ca2:	80 83       	st	Z, r24
			   break;
		 }
		  local_enuerrorstate=ES_OK;
     ca4:	19 82       	std	Y+1, r1	; 0x01
     ca6:	02 c0       	rjmp	.+4      	; 0xcac <DIO_enuSetportval+0x88>
	 }
	 else{local_enuerrorstate=ES_OUT_OF_RANGE;}
     ca8:	83 e0       	ldi	r24, 0x03	; 3
     caa:	89 83       	std	Y+1, r24	; 0x01

	return local_enuerrorstate;
     cac:	89 81       	ldd	r24, Y+1	; 0x01
}
     cae:	0f 90       	pop	r0
     cb0:	0f 90       	pop	r0
     cb2:	0f 90       	pop	r0
     cb4:	0f 90       	pop	r0
     cb6:	0f 90       	pop	r0
     cb8:	cf 91       	pop	r28
     cba:	df 91       	pop	r29
     cbc:	08 95       	ret

00000cbe <DIO_enuSetpindir>:
ES_ERROR DIO_enuSetpindir(u8 copy_u8portid,u8 copy_u8pinid,u8 copy_u8value){
     cbe:	df 93       	push	r29
     cc0:	cf 93       	push	r28
     cc2:	00 d0       	rcall	.+0      	; 0xcc4 <DIO_enuSetpindir+0x6>
     cc4:	00 d0       	rcall	.+0      	; 0xcc6 <DIO_enuSetpindir+0x8>
     cc6:	00 d0       	rcall	.+0      	; 0xcc8 <DIO_enuSetpindir+0xa>
     cc8:	cd b7       	in	r28, 0x3d	; 61
     cca:	de b7       	in	r29, 0x3e	; 62
     ccc:	8a 83       	std	Y+2, r24	; 0x02
     cce:	6b 83       	std	Y+3, r22	; 0x03
     cd0:	4c 83       	std	Y+4, r20	; 0x04
	ES_ERROR local_enuerrorstate=ES_NOK;
     cd2:	81 e0       	ldi	r24, 0x01	; 1
     cd4:	89 83       	std	Y+1, r24	; 0x01

if(copy_u8portid<=DIO_PORTD&& copy_u8pinid<=DIO_PIN7&&copy_u8value<=OUTPUT ){
     cd6:	8a 81       	ldd	r24, Y+2	; 0x02
     cd8:	84 30       	cpi	r24, 0x04	; 4
     cda:	08 f0       	brcs	.+2      	; 0xcde <DIO_enuSetpindir+0x20>
     cdc:	d4 c0       	rjmp	.+424    	; 0xe86 <DIO_enuSetpindir+0x1c8>
     cde:	8b 81       	ldd	r24, Y+3	; 0x03
     ce0:	88 30       	cpi	r24, 0x08	; 8
     ce2:	08 f0       	brcs	.+2      	; 0xce6 <DIO_enuSetpindir+0x28>
     ce4:	d0 c0       	rjmp	.+416    	; 0xe86 <DIO_enuSetpindir+0x1c8>
     ce6:	8c 81       	ldd	r24, Y+4	; 0x04
     ce8:	82 30       	cpi	r24, 0x02	; 2
     cea:	08 f0       	brcs	.+2      	; 0xcee <DIO_enuSetpindir+0x30>
     cec:	cc c0       	rjmp	.+408    	; 0xe86 <DIO_enuSetpindir+0x1c8>
	 if( copy_u8portid<=DIO_PORTD){
     cee:	8a 81       	ldd	r24, Y+2	; 0x02
     cf0:	84 30       	cpi	r24, 0x04	; 4
     cf2:	08 f0       	brcs	.+2      	; 0xcf6 <DIO_enuSetpindir+0x38>
     cf4:	ca c0       	rjmp	.+404    	; 0xe8a <DIO_enuSetpindir+0x1cc>
			 switch(copy_u8portid){
     cf6:	8a 81       	ldd	r24, Y+2	; 0x02
     cf8:	28 2f       	mov	r18, r24
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	3e 83       	std	Y+6, r19	; 0x06
     cfe:	2d 83       	std	Y+5, r18	; 0x05
     d00:	6d 81       	ldd	r22, Y+5	; 0x05
     d02:	7e 81       	ldd	r23, Y+6	; 0x06
     d04:	61 30       	cpi	r22, 0x01	; 1
     d06:	71 05       	cpc	r23, r1
     d08:	09 f4       	brne	.+2      	; 0xd0c <DIO_enuSetpindir+0x4e>
     d0a:	41 c0       	rjmp	.+130    	; 0xd8e <DIO_enuSetpindir+0xd0>
     d0c:	8d 81       	ldd	r24, Y+5	; 0x05
     d0e:	9e 81       	ldd	r25, Y+6	; 0x06
     d10:	82 30       	cpi	r24, 0x02	; 2
     d12:	91 05       	cpc	r25, r1
     d14:	34 f4       	brge	.+12     	; 0xd22 <DIO_enuSetpindir+0x64>
     d16:	2d 81       	ldd	r18, Y+5	; 0x05
     d18:	3e 81       	ldd	r19, Y+6	; 0x06
     d1a:	21 15       	cp	r18, r1
     d1c:	31 05       	cpc	r19, r1
     d1e:	71 f0       	breq	.+28     	; 0xd3c <DIO_enuSetpindir+0x7e>
     d20:	b0 c0       	rjmp	.+352    	; 0xe82 <DIO_enuSetpindir+0x1c4>
     d22:	6d 81       	ldd	r22, Y+5	; 0x05
     d24:	7e 81       	ldd	r23, Y+6	; 0x06
     d26:	62 30       	cpi	r22, 0x02	; 2
     d28:	71 05       	cpc	r23, r1
     d2a:	09 f4       	brne	.+2      	; 0xd2e <DIO_enuSetpindir+0x70>
     d2c:	59 c0       	rjmp	.+178    	; 0xde0 <DIO_enuSetpindir+0x122>
     d2e:	8d 81       	ldd	r24, Y+5	; 0x05
     d30:	9e 81       	ldd	r25, Y+6	; 0x06
     d32:	83 30       	cpi	r24, 0x03	; 3
     d34:	91 05       	cpc	r25, r1
     d36:	09 f4       	brne	.+2      	; 0xd3a <DIO_enuSetpindir+0x7c>
     d38:	7c c0       	rjmp	.+248    	; 0xe32 <DIO_enuSetpindir+0x174>
     d3a:	a3 c0       	rjmp	.+326    	; 0xe82 <DIO_enuSetpindir+0x1c4>
			 case DIO_PORTA :
				DDRA&=~(MASK_BIT<<copy_u8pinid);
     d3c:	aa e3       	ldi	r26, 0x3A	; 58
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	ea e3       	ldi	r30, 0x3A	; 58
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	80 81       	ld	r24, Z
     d46:	48 2f       	mov	r20, r24
     d48:	8b 81       	ldd	r24, Y+3	; 0x03
     d4a:	28 2f       	mov	r18, r24
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	02 c0       	rjmp	.+4      	; 0xd58 <DIO_enuSetpindir+0x9a>
     d54:	88 0f       	add	r24, r24
     d56:	99 1f       	adc	r25, r25
     d58:	2a 95       	dec	r18
     d5a:	e2 f7       	brpl	.-8      	; 0xd54 <DIO_enuSetpindir+0x96>
     d5c:	80 95       	com	r24
     d5e:	84 23       	and	r24, r20
     d60:	8c 93       	st	X, r24
				DDRA|=(copy_u8value<<copy_u8pinid);
     d62:	aa e3       	ldi	r26, 0x3A	; 58
     d64:	b0 e0       	ldi	r27, 0x00	; 0
     d66:	ea e3       	ldi	r30, 0x3A	; 58
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	80 81       	ld	r24, Z
     d6c:	48 2f       	mov	r20, r24
     d6e:	8c 81       	ldd	r24, Y+4	; 0x04
     d70:	28 2f       	mov	r18, r24
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	8b 81       	ldd	r24, Y+3	; 0x03
     d76:	88 2f       	mov	r24, r24
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	b9 01       	movw	r22, r18
     d7c:	02 c0       	rjmp	.+4      	; 0xd82 <DIO_enuSetpindir+0xc4>
     d7e:	66 0f       	add	r22, r22
     d80:	77 1f       	adc	r23, r23
     d82:	8a 95       	dec	r24
     d84:	e2 f7       	brpl	.-8      	; 0xd7e <DIO_enuSetpindir+0xc0>
     d86:	cb 01       	movw	r24, r22
     d88:	84 2b       	or	r24, r20
     d8a:	8c 93       	st	X, r24
     d8c:	7a c0       	rjmp	.+244    	; 0xe82 <DIO_enuSetpindir+0x1c4>
			   break;
			 case DIO_PORTB :
					DDRB&=~(MASK_BIT<<copy_u8pinid);
     d8e:	a7 e3       	ldi	r26, 0x37	; 55
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	e7 e3       	ldi	r30, 0x37	; 55
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	48 2f       	mov	r20, r24
     d9a:	8b 81       	ldd	r24, Y+3	; 0x03
     d9c:	28 2f       	mov	r18, r24
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	02 c0       	rjmp	.+4      	; 0xdaa <DIO_enuSetpindir+0xec>
     da6:	88 0f       	add	r24, r24
     da8:	99 1f       	adc	r25, r25
     daa:	2a 95       	dec	r18
     dac:	e2 f7       	brpl	.-8      	; 0xda6 <DIO_enuSetpindir+0xe8>
     dae:	80 95       	com	r24
     db0:	84 23       	and	r24, r20
     db2:	8c 93       	st	X, r24
				    DDRB|=(copy_u8value<<copy_u8pinid);
     db4:	a7 e3       	ldi	r26, 0x37	; 55
     db6:	b0 e0       	ldi	r27, 0x00	; 0
     db8:	e7 e3       	ldi	r30, 0x37	; 55
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 81       	ld	r24, Z
     dbe:	48 2f       	mov	r20, r24
     dc0:	8c 81       	ldd	r24, Y+4	; 0x04
     dc2:	28 2f       	mov	r18, r24
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	8b 81       	ldd	r24, Y+3	; 0x03
     dc8:	88 2f       	mov	r24, r24
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	b9 01       	movw	r22, r18
     dce:	02 c0       	rjmp	.+4      	; 0xdd4 <DIO_enuSetpindir+0x116>
     dd0:	66 0f       	add	r22, r22
     dd2:	77 1f       	adc	r23, r23
     dd4:	8a 95       	dec	r24
     dd6:	e2 f7       	brpl	.-8      	; 0xdd0 <DIO_enuSetpindir+0x112>
     dd8:	cb 01       	movw	r24, r22
     dda:	84 2b       	or	r24, r20
     ddc:	8c 93       	st	X, r24
     dde:	51 c0       	rjmp	.+162    	; 0xe82 <DIO_enuSetpindir+0x1c4>
				   break;
			 case DIO_PORTC :
				 DDRC&=~(MASK_BIT<<copy_u8pinid);
     de0:	a4 e3       	ldi	r26, 0x34	; 52
     de2:	b0 e0       	ldi	r27, 0x00	; 0
     de4:	e4 e3       	ldi	r30, 0x34	; 52
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	48 2f       	mov	r20, r24
     dec:	8b 81       	ldd	r24, Y+3	; 0x03
     dee:	28 2f       	mov	r18, r24
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	02 c0       	rjmp	.+4      	; 0xdfc <DIO_enuSetpindir+0x13e>
     df8:	88 0f       	add	r24, r24
     dfa:	99 1f       	adc	r25, r25
     dfc:	2a 95       	dec	r18
     dfe:	e2 f7       	brpl	.-8      	; 0xdf8 <DIO_enuSetpindir+0x13a>
     e00:	80 95       	com	r24
     e02:	84 23       	and	r24, r20
     e04:	8c 93       	st	X, r24
				 DDRC|=(copy_u8value<<copy_u8pinid);
     e06:	a4 e3       	ldi	r26, 0x34	; 52
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	e4 e3       	ldi	r30, 0x34	; 52
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	48 2f       	mov	r20, r24
     e12:	8c 81       	ldd	r24, Y+4	; 0x04
     e14:	28 2f       	mov	r18, r24
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	8b 81       	ldd	r24, Y+3	; 0x03
     e1a:	88 2f       	mov	r24, r24
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	b9 01       	movw	r22, r18
     e20:	02 c0       	rjmp	.+4      	; 0xe26 <DIO_enuSetpindir+0x168>
     e22:	66 0f       	add	r22, r22
     e24:	77 1f       	adc	r23, r23
     e26:	8a 95       	dec	r24
     e28:	e2 f7       	brpl	.-8      	; 0xe22 <DIO_enuSetpindir+0x164>
     e2a:	cb 01       	movw	r24, r22
     e2c:	84 2b       	or	r24, r20
     e2e:	8c 93       	st	X, r24
     e30:	28 c0       	rjmp	.+80     	; 0xe82 <DIO_enuSetpindir+0x1c4>
				   break;
			 case DIO_PORTD :
				 DDRD&=~(MASK_BIT<<copy_u8pinid);
     e32:	a1 e3       	ldi	r26, 0x31	; 49
     e34:	b0 e0       	ldi	r27, 0x00	; 0
     e36:	e1 e3       	ldi	r30, 0x31	; 49
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	48 2f       	mov	r20, r24
     e3e:	8b 81       	ldd	r24, Y+3	; 0x03
     e40:	28 2f       	mov	r18, r24
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	02 c0       	rjmp	.+4      	; 0xe4e <DIO_enuSetpindir+0x190>
     e4a:	88 0f       	add	r24, r24
     e4c:	99 1f       	adc	r25, r25
     e4e:	2a 95       	dec	r18
     e50:	e2 f7       	brpl	.-8      	; 0xe4a <DIO_enuSetpindir+0x18c>
     e52:	80 95       	com	r24
     e54:	84 23       	and	r24, r20
     e56:	8c 93       	st	X, r24
				 DDRD|=(copy_u8value<<copy_u8pinid);
     e58:	a1 e3       	ldi	r26, 0x31	; 49
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	e1 e3       	ldi	r30, 0x31	; 49
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	48 2f       	mov	r20, r24
     e64:	8c 81       	ldd	r24, Y+4	; 0x04
     e66:	28 2f       	mov	r18, r24
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	8b 81       	ldd	r24, Y+3	; 0x03
     e6c:	88 2f       	mov	r24, r24
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	b9 01       	movw	r22, r18
     e72:	02 c0       	rjmp	.+4      	; 0xe78 <DIO_enuSetpindir+0x1ba>
     e74:	66 0f       	add	r22, r22
     e76:	77 1f       	adc	r23, r23
     e78:	8a 95       	dec	r24
     e7a:	e2 f7       	brpl	.-8      	; 0xe74 <DIO_enuSetpindir+0x1b6>
     e7c:	cb 01       	movw	r24, r22
     e7e:	84 2b       	or	r24, r20
     e80:	8c 93       	st	X, r24
				   break;
			 }
			 local_enuerrorstate=ES_OK;
     e82:	19 82       	std	Y+1, r1	; 0x01
     e84:	02 c0       	rjmp	.+4      	; 0xe8a <DIO_enuSetpindir+0x1cc>
		 }
}
else  {local_enuerrorstate=ES_OUT_OF_RANGE;}
     e86:	83 e0       	ldi	r24, 0x03	; 3
     e88:	89 83       	std	Y+1, r24	; 0x01

		return local_enuerrorstate;
     e8a:	89 81       	ldd	r24, Y+1	; 0x01
}
     e8c:	26 96       	adiw	r28, 0x06	; 6
     e8e:	0f b6       	in	r0, 0x3f	; 63
     e90:	f8 94       	cli
     e92:	de bf       	out	0x3e, r29	; 62
     e94:	0f be       	out	0x3f, r0	; 63
     e96:	cd bf       	out	0x3d, r28	; 61
     e98:	cf 91       	pop	r28
     e9a:	df 91       	pop	r29
     e9c:	08 95       	ret

00000e9e <DIO_enuSetpinval>:

ES_ERROR DIO_enuSetpinval(u8 copy_u8portid,u8 copy_u8pinid,u8 copy_u8value){
     e9e:	df 93       	push	r29
     ea0:	cf 93       	push	r28
     ea2:	00 d0       	rcall	.+0      	; 0xea4 <DIO_enuSetpinval+0x6>
     ea4:	00 d0       	rcall	.+0      	; 0xea6 <DIO_enuSetpinval+0x8>
     ea6:	00 d0       	rcall	.+0      	; 0xea8 <DIO_enuSetpinval+0xa>
     ea8:	cd b7       	in	r28, 0x3d	; 61
     eaa:	de b7       	in	r29, 0x3e	; 62
     eac:	8a 83       	std	Y+2, r24	; 0x02
     eae:	6b 83       	std	Y+3, r22	; 0x03
     eb0:	4c 83       	std	Y+4, r20	; 0x04
	ES_ERROR local_enuerrorstate=ES_NOK;
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	89 83       	std	Y+1, r24	; 0x01

	if(copy_u8portid<=DIO_PORTD&& copy_u8pinid<=DIO_PIN7&&copy_u8value<=OUTPUT ){
     eb6:	8a 81       	ldd	r24, Y+2	; 0x02
     eb8:	84 30       	cpi	r24, 0x04	; 4
     eba:	08 f0       	brcs	.+2      	; 0xebe <DIO_enuSetpinval+0x20>
     ebc:	d0 c0       	rjmp	.+416    	; 0x105e <DIO_enuSetpinval+0x1c0>
     ebe:	8b 81       	ldd	r24, Y+3	; 0x03
     ec0:	88 30       	cpi	r24, 0x08	; 8
     ec2:	08 f0       	brcs	.+2      	; 0xec6 <DIO_enuSetpinval+0x28>
     ec4:	cc c0       	rjmp	.+408    	; 0x105e <DIO_enuSetpinval+0x1c0>
     ec6:	8c 81       	ldd	r24, Y+4	; 0x04
     ec8:	82 30       	cpi	r24, 0x02	; 2
     eca:	08 f0       	brcs	.+2      	; 0xece <DIO_enuSetpinval+0x30>
     ecc:	c8 c0       	rjmp	.+400    	; 0x105e <DIO_enuSetpinval+0x1c0>

				 switch(copy_u8portid){
     ece:	8a 81       	ldd	r24, Y+2	; 0x02
     ed0:	28 2f       	mov	r18, r24
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	3e 83       	std	Y+6, r19	; 0x06
     ed6:	2d 83       	std	Y+5, r18	; 0x05
     ed8:	6d 81       	ldd	r22, Y+5	; 0x05
     eda:	7e 81       	ldd	r23, Y+6	; 0x06
     edc:	61 30       	cpi	r22, 0x01	; 1
     ede:	71 05       	cpc	r23, r1
     ee0:	09 f4       	brne	.+2      	; 0xee4 <DIO_enuSetpinval+0x46>
     ee2:	41 c0       	rjmp	.+130    	; 0xf66 <DIO_enuSetpinval+0xc8>
     ee4:	8d 81       	ldd	r24, Y+5	; 0x05
     ee6:	9e 81       	ldd	r25, Y+6	; 0x06
     ee8:	82 30       	cpi	r24, 0x02	; 2
     eea:	91 05       	cpc	r25, r1
     eec:	34 f4       	brge	.+12     	; 0xefa <DIO_enuSetpinval+0x5c>
     eee:	2d 81       	ldd	r18, Y+5	; 0x05
     ef0:	3e 81       	ldd	r19, Y+6	; 0x06
     ef2:	21 15       	cp	r18, r1
     ef4:	31 05       	cpc	r19, r1
     ef6:	71 f0       	breq	.+28     	; 0xf14 <DIO_enuSetpinval+0x76>
     ef8:	b0 c0       	rjmp	.+352    	; 0x105a <DIO_enuSetpinval+0x1bc>
     efa:	6d 81       	ldd	r22, Y+5	; 0x05
     efc:	7e 81       	ldd	r23, Y+6	; 0x06
     efe:	62 30       	cpi	r22, 0x02	; 2
     f00:	71 05       	cpc	r23, r1
     f02:	09 f4       	brne	.+2      	; 0xf06 <DIO_enuSetpinval+0x68>
     f04:	59 c0       	rjmp	.+178    	; 0xfb8 <DIO_enuSetpinval+0x11a>
     f06:	8d 81       	ldd	r24, Y+5	; 0x05
     f08:	9e 81       	ldd	r25, Y+6	; 0x06
     f0a:	83 30       	cpi	r24, 0x03	; 3
     f0c:	91 05       	cpc	r25, r1
     f0e:	09 f4       	brne	.+2      	; 0xf12 <DIO_enuSetpinval+0x74>
     f10:	7c c0       	rjmp	.+248    	; 0x100a <DIO_enuSetpinval+0x16c>
     f12:	a3 c0       	rjmp	.+326    	; 0x105a <DIO_enuSetpinval+0x1bc>
				 case DIO_PORTA :
					PORTA&=~(MASK_BIT<<copy_u8pinid);
     f14:	ab e3       	ldi	r26, 0x3B	; 59
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	eb e3       	ldi	r30, 0x3B	; 59
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	48 2f       	mov	r20, r24
     f20:	8b 81       	ldd	r24, Y+3	; 0x03
     f22:	28 2f       	mov	r18, r24
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	02 c0       	rjmp	.+4      	; 0xf30 <DIO_enuSetpinval+0x92>
     f2c:	88 0f       	add	r24, r24
     f2e:	99 1f       	adc	r25, r25
     f30:	2a 95       	dec	r18
     f32:	e2 f7       	brpl	.-8      	; 0xf2c <DIO_enuSetpinval+0x8e>
     f34:	80 95       	com	r24
     f36:	84 23       	and	r24, r20
     f38:	8c 93       	st	X, r24
					PORTA|=(copy_u8value<<copy_u8pinid);
     f3a:	ab e3       	ldi	r26, 0x3B	; 59
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	eb e3       	ldi	r30, 0x3B	; 59
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	48 2f       	mov	r20, r24
     f46:	8c 81       	ldd	r24, Y+4	; 0x04
     f48:	28 2f       	mov	r18, r24
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	8b 81       	ldd	r24, Y+3	; 0x03
     f4e:	88 2f       	mov	r24, r24
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	b9 01       	movw	r22, r18
     f54:	02 c0       	rjmp	.+4      	; 0xf5a <DIO_enuSetpinval+0xbc>
     f56:	66 0f       	add	r22, r22
     f58:	77 1f       	adc	r23, r23
     f5a:	8a 95       	dec	r24
     f5c:	e2 f7       	brpl	.-8      	; 0xf56 <DIO_enuSetpinval+0xb8>
     f5e:	cb 01       	movw	r24, r22
     f60:	84 2b       	or	r24, r20
     f62:	8c 93       	st	X, r24
     f64:	7a c0       	rjmp	.+244    	; 0x105a <DIO_enuSetpinval+0x1bc>
				   break;
				 case DIO_PORTB :
						PORTB&=~(MASK_BIT<<copy_u8pinid);
     f66:	a8 e3       	ldi	r26, 0x38	; 56
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	e8 e3       	ldi	r30, 0x38	; 56
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	48 2f       	mov	r20, r24
     f72:	8b 81       	ldd	r24, Y+3	; 0x03
     f74:	28 2f       	mov	r18, r24
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <DIO_enuSetpinval+0xe4>
     f7e:	88 0f       	add	r24, r24
     f80:	99 1f       	adc	r25, r25
     f82:	2a 95       	dec	r18
     f84:	e2 f7       	brpl	.-8      	; 0xf7e <DIO_enuSetpinval+0xe0>
     f86:	80 95       	com	r24
     f88:	84 23       	and	r24, r20
     f8a:	8c 93       	st	X, r24
					    PORTB|=(copy_u8value<<copy_u8pinid);
     f8c:	a8 e3       	ldi	r26, 0x38	; 56
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	e8 e3       	ldi	r30, 0x38	; 56
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	48 2f       	mov	r20, r24
     f98:	8c 81       	ldd	r24, Y+4	; 0x04
     f9a:	28 2f       	mov	r18, r24
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	8b 81       	ldd	r24, Y+3	; 0x03
     fa0:	88 2f       	mov	r24, r24
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	b9 01       	movw	r22, r18
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <DIO_enuSetpinval+0x10e>
     fa8:	66 0f       	add	r22, r22
     faa:	77 1f       	adc	r23, r23
     fac:	8a 95       	dec	r24
     fae:	e2 f7       	brpl	.-8      	; 0xfa8 <DIO_enuSetpinval+0x10a>
     fb0:	cb 01       	movw	r24, r22
     fb2:	84 2b       	or	r24, r20
     fb4:	8c 93       	st	X, r24
     fb6:	51 c0       	rjmp	.+162    	; 0x105a <DIO_enuSetpinval+0x1bc>
					   break;
				 case DIO_PORTC :
					 PORTC&=~(MASK_BIT<<copy_u8pinid);
     fb8:	a5 e3       	ldi	r26, 0x35	; 53
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	e5 e3       	ldi	r30, 0x35	; 53
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	48 2f       	mov	r20, r24
     fc4:	8b 81       	ldd	r24, Y+3	; 0x03
     fc6:	28 2f       	mov	r18, r24
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	02 c0       	rjmp	.+4      	; 0xfd4 <DIO_enuSetpinval+0x136>
     fd0:	88 0f       	add	r24, r24
     fd2:	99 1f       	adc	r25, r25
     fd4:	2a 95       	dec	r18
     fd6:	e2 f7       	brpl	.-8      	; 0xfd0 <DIO_enuSetpinval+0x132>
     fd8:	80 95       	com	r24
     fda:	84 23       	and	r24, r20
     fdc:	8c 93       	st	X, r24
					 PORTC|=(copy_u8value<<copy_u8pinid);
     fde:	a5 e3       	ldi	r26, 0x35	; 53
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	e5 e3       	ldi	r30, 0x35	; 53
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	48 2f       	mov	r20, r24
     fea:	8c 81       	ldd	r24, Y+4	; 0x04
     fec:	28 2f       	mov	r18, r24
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	8b 81       	ldd	r24, Y+3	; 0x03
     ff2:	88 2f       	mov	r24, r24
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	b9 01       	movw	r22, r18
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <DIO_enuSetpinval+0x160>
     ffa:	66 0f       	add	r22, r22
     ffc:	77 1f       	adc	r23, r23
     ffe:	8a 95       	dec	r24
    1000:	e2 f7       	brpl	.-8      	; 0xffa <DIO_enuSetpinval+0x15c>
    1002:	cb 01       	movw	r24, r22
    1004:	84 2b       	or	r24, r20
    1006:	8c 93       	st	X, r24
    1008:	28 c0       	rjmp	.+80     	; 0x105a <DIO_enuSetpinval+0x1bc>
					   break;
				 case DIO_PORTD :
					 PORTD&=~(MASK_BIT<<copy_u8pinid);
    100a:	a2 e3       	ldi	r26, 0x32	; 50
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	e2 e3       	ldi	r30, 0x32	; 50
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	48 2f       	mov	r20, r24
    1016:	8b 81       	ldd	r24, Y+3	; 0x03
    1018:	28 2f       	mov	r18, r24
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <DIO_enuSetpinval+0x188>
    1022:	88 0f       	add	r24, r24
    1024:	99 1f       	adc	r25, r25
    1026:	2a 95       	dec	r18
    1028:	e2 f7       	brpl	.-8      	; 0x1022 <DIO_enuSetpinval+0x184>
    102a:	80 95       	com	r24
    102c:	84 23       	and	r24, r20
    102e:	8c 93       	st	X, r24
					 PORTD|=(copy_u8value<<copy_u8pinid);
    1030:	a2 e3       	ldi	r26, 0x32	; 50
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	e2 e3       	ldi	r30, 0x32	; 50
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	48 2f       	mov	r20, r24
    103c:	8c 81       	ldd	r24, Y+4	; 0x04
    103e:	28 2f       	mov	r18, r24
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	8b 81       	ldd	r24, Y+3	; 0x03
    1044:	88 2f       	mov	r24, r24
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	b9 01       	movw	r22, r18
    104a:	02 c0       	rjmp	.+4      	; 0x1050 <DIO_enuSetpinval+0x1b2>
    104c:	66 0f       	add	r22, r22
    104e:	77 1f       	adc	r23, r23
    1050:	8a 95       	dec	r24
    1052:	e2 f7       	brpl	.-8      	; 0x104c <DIO_enuSetpinval+0x1ae>
    1054:	cb 01       	movw	r24, r22
    1056:	84 2b       	or	r24, r20
    1058:	8c 93       	st	X, r24
					   break;
				 }
				  local_enuerrorstate=ES_OK;
    105a:	19 82       	std	Y+1, r1	; 0x01
    105c:	02 c0       	rjmp	.+4      	; 0x1062 <DIO_enuSetpinval+0x1c4>

	}
	else  {local_enuerrorstate=ES_OUT_OF_RANGE;}
    105e:	83 e0       	ldi	r24, 0x03	; 3
    1060:	89 83       	std	Y+1, r24	; 0x01

		return local_enuerrorstate;
    1062:	89 81       	ldd	r24, Y+1	; 0x01
}
    1064:	26 96       	adiw	r28, 0x06	; 6
    1066:	0f b6       	in	r0, 0x3f	; 63
    1068:	f8 94       	cli
    106a:	de bf       	out	0x3e, r29	; 62
    106c:	0f be       	out	0x3f, r0	; 63
    106e:	cd bf       	out	0x3d, r28	; 61
    1070:	cf 91       	pop	r28
    1072:	df 91       	pop	r29
    1074:	08 95       	ret

00001076 <DIO_enutogport>:

ES_ERROR DIO_enutogport(u8 copy_u8portid){
    1076:	df 93       	push	r29
    1078:	cf 93       	push	r28
    107a:	00 d0       	rcall	.+0      	; 0x107c <DIO_enutogport+0x6>
    107c:	00 d0       	rcall	.+0      	; 0x107e <DIO_enutogport+0x8>
    107e:	cd b7       	in	r28, 0x3d	; 61
    1080:	de b7       	in	r29, 0x3e	; 62
    1082:	8a 83       	std	Y+2, r24	; 0x02
	ES_ERROR local_enuerrorstate=ES_NOK;
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	89 83       	std	Y+1, r24	; 0x01


	 if( copy_u8portid<=DIO_PORTD){
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	84 30       	cpi	r24, 0x04	; 4
    108c:	08 f0       	brcs	.+2      	; 0x1090 <DIO_enutogport+0x1a>
    108e:	40 c0       	rjmp	.+128    	; 0x1110 <DIO_enutogport+0x9a>
			 switch(copy_u8portid){
    1090:	8a 81       	ldd	r24, Y+2	; 0x02
    1092:	28 2f       	mov	r18, r24
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	3c 83       	std	Y+4, r19	; 0x04
    1098:	2b 83       	std	Y+3, r18	; 0x03
    109a:	8b 81       	ldd	r24, Y+3	; 0x03
    109c:	9c 81       	ldd	r25, Y+4	; 0x04
    109e:	81 30       	cpi	r24, 0x01	; 1
    10a0:	91 05       	cpc	r25, r1
    10a2:	e9 f0       	breq	.+58     	; 0x10de <DIO_enutogport+0x68>
    10a4:	2b 81       	ldd	r18, Y+3	; 0x03
    10a6:	3c 81       	ldd	r19, Y+4	; 0x04
    10a8:	22 30       	cpi	r18, 0x02	; 2
    10aa:	31 05       	cpc	r19, r1
    10ac:	2c f4       	brge	.+10     	; 0x10b8 <DIO_enutogport+0x42>
    10ae:	8b 81       	ldd	r24, Y+3	; 0x03
    10b0:	9c 81       	ldd	r25, Y+4	; 0x04
    10b2:	00 97       	sbiw	r24, 0x00	; 0
    10b4:	61 f0       	breq	.+24     	; 0x10ce <DIO_enutogport+0x58>
    10b6:	2a c0       	rjmp	.+84     	; 0x110c <DIO_enutogport+0x96>
    10b8:	2b 81       	ldd	r18, Y+3	; 0x03
    10ba:	3c 81       	ldd	r19, Y+4	; 0x04
    10bc:	22 30       	cpi	r18, 0x02	; 2
    10be:	31 05       	cpc	r19, r1
    10c0:	b1 f0       	breq	.+44     	; 0x10ee <DIO_enutogport+0x78>
    10c2:	8b 81       	ldd	r24, Y+3	; 0x03
    10c4:	9c 81       	ldd	r25, Y+4	; 0x04
    10c6:	83 30       	cpi	r24, 0x03	; 3
    10c8:	91 05       	cpc	r25, r1
    10ca:	c9 f0       	breq	.+50     	; 0x10fe <DIO_enutogport+0x88>
    10cc:	1f c0       	rjmp	.+62     	; 0x110c <DIO_enutogport+0x96>
			 case DIO_PORTA :
				PORTA=~PORTA;
    10ce:	ab e3       	ldi	r26, 0x3B	; 59
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	eb e3       	ldi	r30, 0x3B	; 59
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	80 95       	com	r24
    10da:	8c 93       	st	X, r24
    10dc:	17 c0       	rjmp	.+46     	; 0x110c <DIO_enutogport+0x96>
			   break;
			 case DIO_PORTB :
				PORTB=~PORTB;
    10de:	a8 e3       	ldi	r26, 0x38	; 56
    10e0:	b0 e0       	ldi	r27, 0x00	; 0
    10e2:	e8 e3       	ldi	r30, 0x38	; 56
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	80 95       	com	r24
    10ea:	8c 93       	st	X, r24
    10ec:	0f c0       	rjmp	.+30     	; 0x110c <DIO_enutogport+0x96>
				   break;
			 case DIO_PORTC :
				PORTC=~PORTC;
    10ee:	a5 e3       	ldi	r26, 0x35	; 53
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	e5 e3       	ldi	r30, 0x35	; 53
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	80 95       	com	r24
    10fa:	8c 93       	st	X, r24
    10fc:	07 c0       	rjmp	.+14     	; 0x110c <DIO_enutogport+0x96>
				   break;
			 case DIO_PORTD :
				PORTD=~PORTD;
    10fe:	a2 e3       	ldi	r26, 0x32	; 50
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	e2 e3       	ldi	r30, 0x32	; 50
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	80 95       	com	r24
    110a:	8c 93       	st	X, r24
				   break;
			 }
			  local_enuerrorstate=ES_OK;
    110c:	19 82       	std	Y+1, r1	; 0x01
    110e:	02 c0       	rjmp	.+4      	; 0x1114 <DIO_enutogport+0x9e>
		 }
		 else{local_enuerrorstate=ES_OUT_OF_RANGE;}
    1110:	83 e0       	ldi	r24, 0x03	; 3
    1112:	89 83       	std	Y+1, r24	; 0x01


		return local_enuerrorstate;
    1114:	89 81       	ldd	r24, Y+1	; 0x01
}
    1116:	0f 90       	pop	r0
    1118:	0f 90       	pop	r0
    111a:	0f 90       	pop	r0
    111c:	0f 90       	pop	r0
    111e:	cf 91       	pop	r28
    1120:	df 91       	pop	r29
    1122:	08 95       	ret

00001124 <DIO_enutogpin>:

ES_ERROR DIO_enutogpin(u8 copy_u8portid,u8 copy_u8pinid){
    1124:	df 93       	push	r29
    1126:	cf 93       	push	r28
    1128:	00 d0       	rcall	.+0      	; 0x112a <DIO_enutogpin+0x6>
    112a:	00 d0       	rcall	.+0      	; 0x112c <DIO_enutogpin+0x8>
    112c:	0f 92       	push	r0
    112e:	cd b7       	in	r28, 0x3d	; 61
    1130:	de b7       	in	r29, 0x3e	; 62
    1132:	8a 83       	std	Y+2, r24	; 0x02
    1134:	6b 83       	std	Y+3, r22	; 0x03
	ES_ERROR local_enuerrorstate=ES_OK;
    1136:	19 82       	std	Y+1, r1	; 0x01

	if(copy_u8portid<=DIO_PORTD&& copy_u8pinid<=DIO_PIN7 ){
    1138:	8a 81       	ldd	r24, Y+2	; 0x02
    113a:	84 30       	cpi	r24, 0x04	; 4
    113c:	08 f0       	brcs	.+2      	; 0x1140 <DIO_enutogpin+0x1c>
    113e:	74 c0       	rjmp	.+232    	; 0x1228 <DIO_enutogpin+0x104>
    1140:	8b 81       	ldd	r24, Y+3	; 0x03
    1142:	88 30       	cpi	r24, 0x08	; 8
    1144:	08 f0       	brcs	.+2      	; 0x1148 <DIO_enutogpin+0x24>
    1146:	70 c0       	rjmp	.+224    	; 0x1228 <DIO_enutogpin+0x104>

					 switch(copy_u8portid){
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	3d 83       	std	Y+5, r19	; 0x05
    1150:	2c 83       	std	Y+4, r18	; 0x04
    1152:	8c 81       	ldd	r24, Y+4	; 0x04
    1154:	9d 81       	ldd	r25, Y+5	; 0x05
    1156:	81 30       	cpi	r24, 0x01	; 1
    1158:	91 05       	cpc	r25, r1
    115a:	49 f1       	breq	.+82     	; 0x11ae <DIO_enutogpin+0x8a>
    115c:	2c 81       	ldd	r18, Y+4	; 0x04
    115e:	3d 81       	ldd	r19, Y+5	; 0x05
    1160:	22 30       	cpi	r18, 0x02	; 2
    1162:	31 05       	cpc	r19, r1
    1164:	2c f4       	brge	.+10     	; 0x1170 <DIO_enutogpin+0x4c>
    1166:	8c 81       	ldd	r24, Y+4	; 0x04
    1168:	9d 81       	ldd	r25, Y+5	; 0x05
    116a:	00 97       	sbiw	r24, 0x00	; 0
    116c:	61 f0       	breq	.+24     	; 0x1186 <DIO_enutogpin+0x62>
    116e:	5a c0       	rjmp	.+180    	; 0x1224 <DIO_enutogpin+0x100>
    1170:	2c 81       	ldd	r18, Y+4	; 0x04
    1172:	3d 81       	ldd	r19, Y+5	; 0x05
    1174:	22 30       	cpi	r18, 0x02	; 2
    1176:	31 05       	cpc	r19, r1
    1178:	71 f1       	breq	.+92     	; 0x11d6 <DIO_enutogpin+0xb2>
    117a:	8c 81       	ldd	r24, Y+4	; 0x04
    117c:	9d 81       	ldd	r25, Y+5	; 0x05
    117e:	83 30       	cpi	r24, 0x03	; 3
    1180:	91 05       	cpc	r25, r1
    1182:	e9 f1       	breq	.+122    	; 0x11fe <DIO_enutogpin+0xda>
    1184:	4f c0       	rjmp	.+158    	; 0x1224 <DIO_enutogpin+0x100>
					 case DIO_PORTA :
						PORTA^=(MASK_BIT<<copy_u8pinid);
    1186:	ab e3       	ldi	r26, 0x3B	; 59
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	eb e3       	ldi	r30, 0x3B	; 59
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	48 2f       	mov	r20, r24
    1192:	8b 81       	ldd	r24, Y+3	; 0x03
    1194:	28 2f       	mov	r18, r24
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	02 2e       	mov	r0, r18
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <DIO_enutogpin+0x80>
    11a0:	88 0f       	add	r24, r24
    11a2:	99 1f       	adc	r25, r25
    11a4:	0a 94       	dec	r0
    11a6:	e2 f7       	brpl	.-8      	; 0x11a0 <DIO_enutogpin+0x7c>
    11a8:	84 27       	eor	r24, r20
    11aa:	8c 93       	st	X, r24
    11ac:	3b c0       	rjmp	.+118    	; 0x1224 <DIO_enutogpin+0x100>

					   break;
					 case DIO_PORTB :
						 PORTB^=(MASK_BIT<<copy_u8pinid);
    11ae:	a8 e3       	ldi	r26, 0x38	; 56
    11b0:	b0 e0       	ldi	r27, 0x00	; 0
    11b2:	e8 e3       	ldi	r30, 0x38	; 56
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	80 81       	ld	r24, Z
    11b8:	48 2f       	mov	r20, r24
    11ba:	8b 81       	ldd	r24, Y+3	; 0x03
    11bc:	28 2f       	mov	r18, r24
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	02 2e       	mov	r0, r18
    11c6:	02 c0       	rjmp	.+4      	; 0x11cc <DIO_enutogpin+0xa8>
    11c8:	88 0f       	add	r24, r24
    11ca:	99 1f       	adc	r25, r25
    11cc:	0a 94       	dec	r0
    11ce:	e2 f7       	brpl	.-8      	; 0x11c8 <DIO_enutogpin+0xa4>
    11d0:	84 27       	eor	r24, r20
    11d2:	8c 93       	st	X, r24
    11d4:	27 c0       	rjmp	.+78     	; 0x1224 <DIO_enutogpin+0x100>
						   break;
					 case DIO_PORTC :
						 PORTC^=(MASK_BIT<<copy_u8pinid);
    11d6:	a5 e3       	ldi	r26, 0x35	; 53
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	e5 e3       	ldi	r30, 0x35	; 53
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	48 2f       	mov	r20, r24
    11e2:	8b 81       	ldd	r24, Y+3	; 0x03
    11e4:	28 2f       	mov	r18, r24
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	02 2e       	mov	r0, r18
    11ee:	02 c0       	rjmp	.+4      	; 0x11f4 <DIO_enutogpin+0xd0>
    11f0:	88 0f       	add	r24, r24
    11f2:	99 1f       	adc	r25, r25
    11f4:	0a 94       	dec	r0
    11f6:	e2 f7       	brpl	.-8      	; 0x11f0 <DIO_enutogpin+0xcc>
    11f8:	84 27       	eor	r24, r20
    11fa:	8c 93       	st	X, r24
    11fc:	13 c0       	rjmp	.+38     	; 0x1224 <DIO_enutogpin+0x100>
						   break;
					 case DIO_PORTD :
						 PORTD^=(MASK_BIT<<copy_u8pinid);
    11fe:	a2 e3       	ldi	r26, 0x32	; 50
    1200:	b0 e0       	ldi	r27, 0x00	; 0
    1202:	e2 e3       	ldi	r30, 0x32	; 50
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	48 2f       	mov	r20, r24
    120a:	8b 81       	ldd	r24, Y+3	; 0x03
    120c:	28 2f       	mov	r18, r24
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	02 2e       	mov	r0, r18
    1216:	02 c0       	rjmp	.+4      	; 0x121c <DIO_enutogpin+0xf8>
    1218:	88 0f       	add	r24, r24
    121a:	99 1f       	adc	r25, r25
    121c:	0a 94       	dec	r0
    121e:	e2 f7       	brpl	.-8      	; 0x1218 <DIO_enutogpin+0xf4>
    1220:	84 27       	eor	r24, r20
    1222:	8c 93       	st	X, r24
						   break;
					 }
					  local_enuerrorstate=ES_OK;
    1224:	19 82       	std	Y+1, r1	; 0x01
    1226:	02 c0       	rjmp	.+4      	; 0x122c <DIO_enutogpin+0x108>
				 }

		else  {local_enuerrorstate=ES_OUT_OF_RANGE;}
    1228:	83 e0       	ldi	r24, 0x03	; 3
    122a:	89 83       	std	Y+1, r24	; 0x01


		return local_enuerrorstate;
    122c:	89 81       	ldd	r24, Y+1	; 0x01
}
    122e:	0f 90       	pop	r0
    1230:	0f 90       	pop	r0
    1232:	0f 90       	pop	r0
    1234:	0f 90       	pop	r0
    1236:	0f 90       	pop	r0
    1238:	cf 91       	pop	r28
    123a:	df 91       	pop	r29
    123c:	08 95       	ret

0000123e <DIO_enugetportval>:

ES_ERROR DIO_enugetportval(u8 copy_u8portid,u8* copy_pu8value){
    123e:	df 93       	push	r29
    1240:	cf 93       	push	r28
    1242:	00 d0       	rcall	.+0      	; 0x1244 <DIO_enugetportval+0x6>
    1244:	00 d0       	rcall	.+0      	; 0x1246 <DIO_enugetportval+0x8>
    1246:	00 d0       	rcall	.+0      	; 0x1248 <DIO_enugetportval+0xa>
    1248:	cd b7       	in	r28, 0x3d	; 61
    124a:	de b7       	in	r29, 0x3e	; 62
    124c:	8a 83       	std	Y+2, r24	; 0x02
    124e:	7c 83       	std	Y+4, r23	; 0x04
    1250:	6b 83       	std	Y+3, r22	; 0x03
	ES_ERROR local_enuerrorstate=ES_OK;
    1252:	19 82       	std	Y+1, r1	; 0x01
 if(copy_pu8value!=NULL){
    1254:	8b 81       	ldd	r24, Y+3	; 0x03
    1256:	9c 81       	ldd	r25, Y+4	; 0x04
    1258:	00 97       	sbiw	r24, 0x00	; 0
    125a:	09 f4       	brne	.+2      	; 0x125e <DIO_enugetportval+0x20>
    125c:	42 c0       	rjmp	.+132    	; 0x12e2 <DIO_enugetportval+0xa4>
	 if( copy_u8portid<=DIO_PORTD){
    125e:	8a 81       	ldd	r24, Y+2	; 0x02
    1260:	84 30       	cpi	r24, 0x04	; 4
    1262:	e0 f5       	brcc	.+120    	; 0x12dc <DIO_enugetportval+0x9e>
	 		 switch(copy_u8portid){
    1264:	8a 81       	ldd	r24, Y+2	; 0x02
    1266:	28 2f       	mov	r18, r24
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	3e 83       	std	Y+6, r19	; 0x06
    126c:	2d 83       	std	Y+5, r18	; 0x05
    126e:	8d 81       	ldd	r24, Y+5	; 0x05
    1270:	9e 81       	ldd	r25, Y+6	; 0x06
    1272:	81 30       	cpi	r24, 0x01	; 1
    1274:	91 05       	cpc	r25, r1
    1276:	e1 f0       	breq	.+56     	; 0x12b0 <DIO_enugetportval+0x72>
    1278:	2d 81       	ldd	r18, Y+5	; 0x05
    127a:	3e 81       	ldd	r19, Y+6	; 0x06
    127c:	22 30       	cpi	r18, 0x02	; 2
    127e:	31 05       	cpc	r19, r1
    1280:	2c f4       	brge	.+10     	; 0x128c <DIO_enugetportval+0x4e>
    1282:	8d 81       	ldd	r24, Y+5	; 0x05
    1284:	9e 81       	ldd	r25, Y+6	; 0x06
    1286:	00 97       	sbiw	r24, 0x00	; 0
    1288:	61 f0       	breq	.+24     	; 0x12a2 <DIO_enugetportval+0x64>
    128a:	26 c0       	rjmp	.+76     	; 0x12d8 <DIO_enugetportval+0x9a>
    128c:	2d 81       	ldd	r18, Y+5	; 0x05
    128e:	3e 81       	ldd	r19, Y+6	; 0x06
    1290:	22 30       	cpi	r18, 0x02	; 2
    1292:	31 05       	cpc	r19, r1
    1294:	a1 f0       	breq	.+40     	; 0x12be <DIO_enugetportval+0x80>
    1296:	8d 81       	ldd	r24, Y+5	; 0x05
    1298:	9e 81       	ldd	r25, Y+6	; 0x06
    129a:	83 30       	cpi	r24, 0x03	; 3
    129c:	91 05       	cpc	r25, r1
    129e:	b1 f0       	breq	.+44     	; 0x12cc <DIO_enugetportval+0x8e>
    12a0:	1b c0       	rjmp	.+54     	; 0x12d8 <DIO_enugetportval+0x9a>
	 		 case DIO_PORTA :
	 			* copy_pu8value=PINA;
    12a2:	e9 e3       	ldi	r30, 0x39	; 57
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	80 81       	ld	r24, Z
    12a8:	eb 81       	ldd	r30, Y+3	; 0x03
    12aa:	fc 81       	ldd	r31, Y+4	; 0x04
    12ac:	80 83       	st	Z, r24
    12ae:	14 c0       	rjmp	.+40     	; 0x12d8 <DIO_enugetportval+0x9a>
	 		   break;
	 		 case DIO_PORTB :
	 			* copy_pu8value=PINB;
    12b0:	e6 e3       	ldi	r30, 0x36	; 54
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	80 81       	ld	r24, Z
    12b6:	eb 81       	ldd	r30, Y+3	; 0x03
    12b8:	fc 81       	ldd	r31, Y+4	; 0x04
    12ba:	80 83       	st	Z, r24
    12bc:	0d c0       	rjmp	.+26     	; 0x12d8 <DIO_enugetportval+0x9a>
	 			   break;
	 		 case DIO_PORTC :
	 			* copy_pu8value=PINC;
    12be:	e3 e3       	ldi	r30, 0x33	; 51
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	eb 81       	ldd	r30, Y+3	; 0x03
    12c6:	fc 81       	ldd	r31, Y+4	; 0x04
    12c8:	80 83       	st	Z, r24
    12ca:	06 c0       	rjmp	.+12     	; 0x12d8 <DIO_enugetportval+0x9a>
	 			   break;
	 		 case DIO_PORTD :
	 			* copy_pu8value=PIND;
    12cc:	e0 e3       	ldi	r30, 0x30	; 48
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	80 81       	ld	r24, Z
    12d2:	eb 81       	ldd	r30, Y+3	; 0x03
    12d4:	fc 81       	ldd	r31, Y+4	; 0x04
    12d6:	80 83       	st	Z, r24
	 			   break;
	 		 }
	 		  local_enuerrorstate=ES_OK;
    12d8:	19 82       	std	Y+1, r1	; 0x01
    12da:	05 c0       	rjmp	.+10     	; 0x12e6 <DIO_enugetportval+0xa8>
	 	 }
	 	 else{local_enuerrorstate=ES_OUT_OF_RANGE;}
    12dc:	83 e0       	ldi	r24, 0x03	; 3
    12de:	89 83       	std	Y+1, r24	; 0x01
    12e0:	02 c0       	rjmp	.+4      	; 0x12e6 <DIO_enugetportval+0xa8>

	}


 else{
	 local_enuerrorstate=ES_NULL_POINTER;
    12e2:	82 e0       	ldi	r24, 0x02	; 2
    12e4:	89 83       	std	Y+1, r24	; 0x01
 }


		return local_enuerrorstate;
    12e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    12e8:	26 96       	adiw	r28, 0x06	; 6
    12ea:	0f b6       	in	r0, 0x3f	; 63
    12ec:	f8 94       	cli
    12ee:	de bf       	out	0x3e, r29	; 62
    12f0:	0f be       	out	0x3f, r0	; 63
    12f2:	cd bf       	out	0x3d, r28	; 61
    12f4:	cf 91       	pop	r28
    12f6:	df 91       	pop	r29
    12f8:	08 95       	ret

000012fa <DIO_enugetpinval>:

ES_ERROR DIO_enugetpinval(u8 copy_u8portid,u8 copy_u8pinid,u8* copy_pu8value){
    12fa:	df 93       	push	r29
    12fc:	cf 93       	push	r28
    12fe:	cd b7       	in	r28, 0x3d	; 61
    1300:	de b7       	in	r29, 0x3e	; 62
    1302:	27 97       	sbiw	r28, 0x07	; 7
    1304:	0f b6       	in	r0, 0x3f	; 63
    1306:	f8 94       	cli
    1308:	de bf       	out	0x3e, r29	; 62
    130a:	0f be       	out	0x3f, r0	; 63
    130c:	cd bf       	out	0x3d, r28	; 61
    130e:	8a 83       	std	Y+2, r24	; 0x02
    1310:	6b 83       	std	Y+3, r22	; 0x03
    1312:	5d 83       	std	Y+5, r21	; 0x05
    1314:	4c 83       	std	Y+4, r20	; 0x04
	ES_ERROR local_enuerrorstate=ES_OK;
    1316:	19 82       	std	Y+1, r1	; 0x01
	 if(copy_pu8value!=NULL){
    1318:	8c 81       	ldd	r24, Y+4	; 0x04
    131a:	9d 81       	ldd	r25, Y+5	; 0x05
    131c:	00 97       	sbiw	r24, 0x00	; 0
    131e:	09 f4       	brne	.+2      	; 0x1322 <DIO_enugetpinval+0x28>
    1320:	7d c0       	rjmp	.+250    	; 0x141c <DIO_enugetpinval+0x122>
	if(copy_u8portid<=DIO_PORTD&& copy_u8pinid<=DIO_PIN7 ){
    1322:	8a 81       	ldd	r24, Y+2	; 0x02
    1324:	84 30       	cpi	r24, 0x04	; 4
    1326:	08 f0       	brcs	.+2      	; 0x132a <DIO_enugetpinval+0x30>
    1328:	76 c0       	rjmp	.+236    	; 0x1416 <DIO_enugetpinval+0x11c>
    132a:	8b 81       	ldd	r24, Y+3	; 0x03
    132c:	88 30       	cpi	r24, 0x08	; 8
    132e:	08 f0       	brcs	.+2      	; 0x1332 <DIO_enugetpinval+0x38>
    1330:	72 c0       	rjmp	.+228    	; 0x1416 <DIO_enugetpinval+0x11c>

				 switch(copy_u8portid){
    1332:	8a 81       	ldd	r24, Y+2	; 0x02
    1334:	28 2f       	mov	r18, r24
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	3f 83       	std	Y+7, r19	; 0x07
    133a:	2e 83       	std	Y+6, r18	; 0x06
    133c:	4e 81       	ldd	r20, Y+6	; 0x06
    133e:	5f 81       	ldd	r21, Y+7	; 0x07
    1340:	41 30       	cpi	r20, 0x01	; 1
    1342:	51 05       	cpc	r21, r1
    1344:	59 f1       	breq	.+86     	; 0x139c <DIO_enugetpinval+0xa2>
    1346:	8e 81       	ldd	r24, Y+6	; 0x06
    1348:	9f 81       	ldd	r25, Y+7	; 0x07
    134a:	82 30       	cpi	r24, 0x02	; 2
    134c:	91 05       	cpc	r25, r1
    134e:	34 f4       	brge	.+12     	; 0x135c <DIO_enugetpinval+0x62>
    1350:	2e 81       	ldd	r18, Y+6	; 0x06
    1352:	3f 81       	ldd	r19, Y+7	; 0x07
    1354:	21 15       	cp	r18, r1
    1356:	31 05       	cpc	r19, r1
    1358:	69 f0       	breq	.+26     	; 0x1374 <DIO_enugetpinval+0x7a>
    135a:	5b c0       	rjmp	.+182    	; 0x1412 <DIO_enugetpinval+0x118>
    135c:	4e 81       	ldd	r20, Y+6	; 0x06
    135e:	5f 81       	ldd	r21, Y+7	; 0x07
    1360:	42 30       	cpi	r20, 0x02	; 2
    1362:	51 05       	cpc	r21, r1
    1364:	79 f1       	breq	.+94     	; 0x13c4 <DIO_enugetpinval+0xca>
    1366:	8e 81       	ldd	r24, Y+6	; 0x06
    1368:	9f 81       	ldd	r25, Y+7	; 0x07
    136a:	83 30       	cpi	r24, 0x03	; 3
    136c:	91 05       	cpc	r25, r1
    136e:	09 f4       	brne	.+2      	; 0x1372 <DIO_enugetpinval+0x78>
    1370:	3d c0       	rjmp	.+122    	; 0x13ec <DIO_enugetpinval+0xf2>
    1372:	4f c0       	rjmp	.+158    	; 0x1412 <DIO_enugetpinval+0x118>
				 case DIO_PORTA :
					 * copy_pu8value=	(PINA>>copy_u8pinid)&MASK_BIT;
    1374:	e9 e3       	ldi	r30, 0x39	; 57
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	28 2f       	mov	r18, r24
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	8b 81       	ldd	r24, Y+3	; 0x03
    1380:	88 2f       	mov	r24, r24
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	a9 01       	movw	r20, r18
    1386:	02 c0       	rjmp	.+4      	; 0x138c <DIO_enugetpinval+0x92>
    1388:	55 95       	asr	r21
    138a:	47 95       	ror	r20
    138c:	8a 95       	dec	r24
    138e:	e2 f7       	brpl	.-8      	; 0x1388 <DIO_enugetpinval+0x8e>
    1390:	ca 01       	movw	r24, r20
    1392:	81 70       	andi	r24, 0x01	; 1
    1394:	ec 81       	ldd	r30, Y+4	; 0x04
    1396:	fd 81       	ldd	r31, Y+5	; 0x05
    1398:	80 83       	st	Z, r24
    139a:	3b c0       	rjmp	.+118    	; 0x1412 <DIO_enugetpinval+0x118>
				   break;
				 case DIO_PORTB :
					 * copy_pu8value=	(PINB>>copy_u8pinid)&MASK_BIT;
    139c:	e6 e3       	ldi	r30, 0x36	; 54
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	28 2f       	mov	r18, r24
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	8b 81       	ldd	r24, Y+3	; 0x03
    13a8:	88 2f       	mov	r24, r24
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	a9 01       	movw	r20, r18
    13ae:	02 c0       	rjmp	.+4      	; 0x13b4 <DIO_enugetpinval+0xba>
    13b0:	55 95       	asr	r21
    13b2:	47 95       	ror	r20
    13b4:	8a 95       	dec	r24
    13b6:	e2 f7       	brpl	.-8      	; 0x13b0 <DIO_enugetpinval+0xb6>
    13b8:	ca 01       	movw	r24, r20
    13ba:	81 70       	andi	r24, 0x01	; 1
    13bc:	ec 81       	ldd	r30, Y+4	; 0x04
    13be:	fd 81       	ldd	r31, Y+5	; 0x05
    13c0:	80 83       	st	Z, r24
    13c2:	27 c0       	rjmp	.+78     	; 0x1412 <DIO_enugetpinval+0x118>
					   break;
				 case DIO_PORTC :
					 * copy_pu8value=	(PINC>>copy_u8pinid)&MASK_BIT;
    13c4:	e3 e3       	ldi	r30, 0x33	; 51
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	28 2f       	mov	r18, r24
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	8b 81       	ldd	r24, Y+3	; 0x03
    13d0:	88 2f       	mov	r24, r24
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	a9 01       	movw	r20, r18
    13d6:	02 c0       	rjmp	.+4      	; 0x13dc <DIO_enugetpinval+0xe2>
    13d8:	55 95       	asr	r21
    13da:	47 95       	ror	r20
    13dc:	8a 95       	dec	r24
    13de:	e2 f7       	brpl	.-8      	; 0x13d8 <DIO_enugetpinval+0xde>
    13e0:	ca 01       	movw	r24, r20
    13e2:	81 70       	andi	r24, 0x01	; 1
    13e4:	ec 81       	ldd	r30, Y+4	; 0x04
    13e6:	fd 81       	ldd	r31, Y+5	; 0x05
    13e8:	80 83       	st	Z, r24
    13ea:	13 c0       	rjmp	.+38     	; 0x1412 <DIO_enugetpinval+0x118>
					   break;
				 case DIO_PORTD :
					 * copy_pu8value=	(PIND>>copy_u8pinid)&MASK_BIT;
    13ec:	e0 e3       	ldi	r30, 0x30	; 48
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	28 2f       	mov	r18, r24
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	8b 81       	ldd	r24, Y+3	; 0x03
    13f8:	88 2f       	mov	r24, r24
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	a9 01       	movw	r20, r18
    13fe:	02 c0       	rjmp	.+4      	; 0x1404 <DIO_enugetpinval+0x10a>
    1400:	55 95       	asr	r21
    1402:	47 95       	ror	r20
    1404:	8a 95       	dec	r24
    1406:	e2 f7       	brpl	.-8      	; 0x1400 <DIO_enugetpinval+0x106>
    1408:	ca 01       	movw	r24, r20
    140a:	81 70       	andi	r24, 0x01	; 1
    140c:	ec 81       	ldd	r30, Y+4	; 0x04
    140e:	fd 81       	ldd	r31, Y+5	; 0x05
    1410:	80 83       	st	Z, r24
					   break;
				 }
				  local_enuerrorstate=ES_OK;
    1412:	19 82       	std	Y+1, r1	; 0x01
    1414:	05 c0       	rjmp	.+10     	; 0x1420 <DIO_enugetpinval+0x126>
			 }

	else  {local_enuerrorstate=ES_OUT_OF_RANGE;}}
    1416:	83 e0       	ldi	r24, 0x03	; 3
    1418:	89 83       	std	Y+1, r24	; 0x01
    141a:	02 c0       	rjmp	.+4      	; 0x1420 <DIO_enugetpinval+0x126>
	else local_enuerrorstate=ES_NULL_POINTER;
    141c:	82 e0       	ldi	r24, 0x02	; 2
    141e:	89 83       	std	Y+1, r24	; 0x01

		return local_enuerrorstate;
    1420:	89 81       	ldd	r24, Y+1	; 0x01
}
    1422:	27 96       	adiw	r28, 0x07	; 7
    1424:	0f b6       	in	r0, 0x3f	; 63
    1426:	f8 94       	cli
    1428:	de bf       	out	0x3e, r29	; 62
    142a:	0f be       	out	0x3f, r0	; 63
    142c:	cd bf       	out	0x3d, r28	; 61
    142e:	cf 91       	pop	r28
    1430:	df 91       	pop	r29
    1432:	08 95       	ret

00001434 <KEYPAD_Init>:
#include "KEYPAD_config.h"
#include "KEYPAD_priv.h"



void KEYPAD_Init(void) {
    1434:	df 93       	push	r29
    1436:	cf 93       	push	r28
    1438:	cd b7       	in	r28, 0x3d	; 61
    143a:	de b7       	in	r29, 0x3e	; 62

    DIO_enuSetpindir(DIO_u8PORTC, DIO_u8PIN4, DIO_u8INPUT);
    143c:	82 e0       	ldi	r24, 0x02	; 2
    143e:	64 e0       	ldi	r22, 0x04	; 4
    1440:	40 e0       	ldi	r20, 0x00	; 0
    1442:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_enuSetpindir>
    DIO_enuSetpindir(DIO_u8PORTC, DIO_u8PIN5, DIO_u8INPUT);
    1446:	82 e0       	ldi	r24, 0x02	; 2
    1448:	65 e0       	ldi	r22, 0x05	; 5
    144a:	40 e0       	ldi	r20, 0x00	; 0
    144c:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_enuSetpindir>
    DIO_enuSetpindir(DIO_u8PORTC, DIO_u8PIN6, DIO_u8INPUT);
    1450:	82 e0       	ldi	r24, 0x02	; 2
    1452:	66 e0       	ldi	r22, 0x06	; 6
    1454:	40 e0       	ldi	r20, 0x00	; 0
    1456:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_enuSetpindir>
    DIO_enuSetpindir(DIO_u8PORTC, DIO_u8PIN7, DIO_u8INPUT);
    145a:	82 e0       	ldi	r24, 0x02	; 2
    145c:	67 e0       	ldi	r22, 0x07	; 7
    145e:	40 e0       	ldi	r20, 0x00	; 0
    1460:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_enuSetpindir>

    DIO_enuSetpindir(DIO_u8PORTC, DIO_u8PIN0,  DIO_u8OUTPUT);
    1464:	82 e0       	ldi	r24, 0x02	; 2
    1466:	60 e0       	ldi	r22, 0x00	; 0
    1468:	41 e0       	ldi	r20, 0x01	; 1
    146a:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_enuSetpindir>
    DIO_enuSetpindir(DIO_u8PORTC, DIO_u8PIN1, DIO_u8OUTPUT );
    146e:	82 e0       	ldi	r24, 0x02	; 2
    1470:	61 e0       	ldi	r22, 0x01	; 1
    1472:	41 e0       	ldi	r20, 0x01	; 1
    1474:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_enuSetpindir>
    DIO_enuSetpindir(DIO_u8PORTC, DIO_u8PIN2, DIO_u8OUTPUT );
    1478:	82 e0       	ldi	r24, 0x02	; 2
    147a:	62 e0       	ldi	r22, 0x02	; 2
    147c:	41 e0       	ldi	r20, 0x01	; 1
    147e:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_enuSetpindir>
    DIO_enuSetpindir(DIO_u8PORTC, DIO_u8PIN3, DIO_u8OUTPUT );
    1482:	82 e0       	ldi	r24, 0x02	; 2
    1484:	63 e0       	ldi	r22, 0x03	; 3
    1486:	41 e0       	ldi	r20, 0x01	; 1
    1488:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_enuSetpindir>

    DIO_enuSetpinval(DIO_u8PORTC, DIO_u8PIN4, DIO_u8PULLUP);
    148c:	82 e0       	ldi	r24, 0x02	; 2
    148e:	64 e0       	ldi	r22, 0x04	; 4
    1490:	41 e0       	ldi	r20, 0x01	; 1
    1492:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_enuSetpinval>
    DIO_enuSetpinval(DIO_u8PORTC, DIO_u8PIN5, DIO_u8PULLUP);
    1496:	82 e0       	ldi	r24, 0x02	; 2
    1498:	65 e0       	ldi	r22, 0x05	; 5
    149a:	41 e0       	ldi	r20, 0x01	; 1
    149c:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_enuSetpinval>
    DIO_enuSetpinval(DIO_u8PORTC, DIO_u8PIN6, DIO_u8PULLUP);
    14a0:	82 e0       	ldi	r24, 0x02	; 2
    14a2:	66 e0       	ldi	r22, 0x06	; 6
    14a4:	41 e0       	ldi	r20, 0x01	; 1
    14a6:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_enuSetpinval>
    DIO_enuSetpinval(DIO_u8PORTC, DIO_u8PIN7, DIO_u8PULLUP);
    14aa:	82 e0       	ldi	r24, 0x02	; 2
    14ac:	67 e0       	ldi	r22, 0x07	; 7
    14ae:	41 e0       	ldi	r20, 0x01	; 1
    14b0:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_enuSetpinval>
}
    14b4:	cf 91       	pop	r28
    14b6:	df 91       	pop	r29
    14b8:	08 95       	ret

000014ba <KEYPAD_enuGetpressedKey>:




u8 KEYPAD_enuGetpressedKey(void)
{
    14ba:	df 93       	push	r29
    14bc:	cf 93       	push	r28
    14be:	00 d0       	rcall	.+0      	; 0x14c0 <KEYPAD_enuGetpressedKey+0x6>
    14c0:	00 d0       	rcall	.+0      	; 0x14c2 <KEYPAD_enuGetpressedKey+0x8>
    14c2:	0f 92       	push	r0
    14c4:	cd b7       	in	r28, 0x3d	; 61
    14c6:	de b7       	in	r29, 0x3e	; 62

    u8 local_u8pressedKey= KEYPAD_NO_PRESSED_KEY;
    14c8:	83 e4       	ldi	r24, 0x43	; 67
    14ca:	8b 83       	std	Y+3, r24	; 0x03
static	u8 local_u8ketpadArr[4][4]=KEYPAD_ARR;
static	u8 local_u8AkeypadColumnArr[COLUMN_NUM]={KEYPAD_COLUMN0_PIN ,KEYPAD_COLUMN1_PIN ,KEYPAD_COLUMN2_PIN,KEYPAD_COLUMN3_PIN};
static	u8 local_u8AkeypadRowArr[ROW_NUM]={KEYPAD_ROW0_PIN ,KEYPAD_ROW1_PIN ,KEYPAD_ROW2_PIN,KEYPAD_ROW3_PIN};

	u8 local_u8ColumnIter=0;
    14cc:	1a 82       	std	Y+2, r1	; 0x02
	u8 local_u8RowIter=0;
    14ce:	19 82       	std	Y+1, r1	; 0x01

  for(local_u8ColumnIter=0;local_u8ColumnIter<COLUMN_NUM;local_u8ColumnIter++)
    14d0:	1a 82       	std	Y+2, r1	; 0x02
    14d2:	60 c0       	rjmp	.+192    	; 0x1594 <KEYPAD_enuGetpressedKey+0xda>
  {
	  //activate currant column
	   DIO_enuSetpinval(KEYPAD_PORT,local_u8AkeypadColumnArr[local_u8ColumnIter],DIO_u8LOW);
    14d4:	8a 81       	ldd	r24, Y+2	; 0x02
    14d6:	88 2f       	mov	r24, r24
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	fc 01       	movw	r30, r24
    14dc:	ef 54       	subi	r30, 0x4F	; 79
    14de:	ff 4f       	sbci	r31, 0xFF	; 255
    14e0:	90 81       	ld	r25, Z
    14e2:	82 e0       	ldi	r24, 0x02	; 2
    14e4:	69 2f       	mov	r22, r25
    14e6:	40 e0       	ldi	r20, 0x00	; 0
    14e8:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_enuSetpinval>
	  // _delay_ms(10);
       for(local_u8RowIter=0; local_u8RowIter<ROW_NUM; local_u8RowIter++)
    14ec:	19 82       	std	Y+1, r1	; 0x01
    14ee:	3f c0       	rjmp	.+126    	; 0x156e <KEYPAD_enuGetpressedKey+0xb4>
       {
    	   u8 local_u8RowVal=KEYPAD_NO_PRESSED_KEY;
    14f0:	83 e4       	ldi	r24, 0x43	; 67
    14f2:	8c 83       	std	Y+4, r24	; 0x04
    	   DIO_enugetpinval(KEYPAD_PORT,local_u8AkeypadRowArr[local_u8RowIter],&local_u8RowVal);
    14f4:	89 81       	ldd	r24, Y+1	; 0x01
    14f6:	88 2f       	mov	r24, r24
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	fc 01       	movw	r30, r24
    14fc:	e3 55       	subi	r30, 0x53	; 83
    14fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1500:	90 81       	ld	r25, Z
    1502:	9e 01       	movw	r18, r28
    1504:	2c 5f       	subi	r18, 0xFC	; 252
    1506:	3f 4f       	sbci	r19, 0xFF	; 255
    1508:	82 e0       	ldi	r24, 0x02	; 2
    150a:	69 2f       	mov	r22, r25
    150c:	a9 01       	movw	r20, r18
    150e:	0e 94 7d 09 	call	0x12fa	; 0x12fa <DIO_enugetpinval>

    	 //check if switch is pressed
    	   if(local_u8RowVal==DIO_u8LOW){
    1512:	8c 81       	ldd	r24, Y+4	; 0x04
    1514:	88 23       	and	r24, r24
    1516:	41 f5       	brne	.+80     	; 0x1568 <KEYPAD_enuGetpressedKey+0xae>
    		  local_u8pressedKey=local_u8ketpadArr[local_u8RowIter][local_u8ColumnIter];
    1518:	89 81       	ldd	r24, Y+1	; 0x01
    151a:	48 2f       	mov	r20, r24
    151c:	50 e0       	ldi	r21, 0x00	; 0
    151e:	8a 81       	ldd	r24, Y+2	; 0x02
    1520:	28 2f       	mov	r18, r24
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	ca 01       	movw	r24, r20
    1526:	88 0f       	add	r24, r24
    1528:	99 1f       	adc	r25, r25
    152a:	88 0f       	add	r24, r24
    152c:	99 1f       	adc	r25, r25
    152e:	82 0f       	add	r24, r18
    1530:	93 1f       	adc	r25, r19
    1532:	fc 01       	movw	r30, r24
    1534:	eb 54       	subi	r30, 0x4B	; 75
    1536:	ff 4f       	sbci	r31, 0xFF	; 255
    1538:	80 81       	ld	r24, Z
    153a:	8b 83       	std	Y+3, r24	; 0x03
    153c:	0f c0       	rjmp	.+30     	; 0x155c <KEYPAD_enuGetpressedKey+0xa2>
    	   //polling until the key is released
    	   while(local_u8RowVal==DIO_u8LOW)
    	    {
    	    	DIO_enugetpinval(KEYPAD_PORT,local_u8AkeypadRowArr[local_u8RowIter],&local_u8RowVal);
    153e:	89 81       	ldd	r24, Y+1	; 0x01
    1540:	88 2f       	mov	r24, r24
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	fc 01       	movw	r30, r24
    1546:	e3 55       	subi	r30, 0x53	; 83
    1548:	ff 4f       	sbci	r31, 0xFF	; 255
    154a:	90 81       	ld	r25, Z
    154c:	9e 01       	movw	r18, r28
    154e:	2c 5f       	subi	r18, 0xFC	; 252
    1550:	3f 4f       	sbci	r19, 0xFF	; 255
    1552:	82 e0       	ldi	r24, 0x02	; 2
    1554:	69 2f       	mov	r22, r25
    1556:	a9 01       	movw	r20, r18
    1558:	0e 94 7d 09 	call	0x12fa	; 0x12fa <DIO_enugetpinval>

    	 //check if switch is pressed
    	   if(local_u8RowVal==DIO_u8LOW){
    		  local_u8pressedKey=local_u8ketpadArr[local_u8RowIter][local_u8ColumnIter];
    	   //polling until the key is released
    	   while(local_u8RowVal==DIO_u8LOW)
    155c:	8c 81       	ldd	r24, Y+4	; 0x04
    155e:	88 23       	and	r24, r24
    1560:	71 f3       	breq	.-36     	; 0x153e <KEYPAD_enuGetpressedKey+0x84>
    	    {
    	    	DIO_enugetpinval(KEYPAD_PORT,local_u8AkeypadRowArr[local_u8RowIter],&local_u8RowVal);


    	    }
    	   return local_u8pressedKey;
    1562:	8b 81       	ldd	r24, Y+3	; 0x03
    1564:	8d 83       	std	Y+5, r24	; 0x05
    1566:	1c c0       	rjmp	.+56     	; 0x15a0 <KEYPAD_enuGetpressedKey+0xe6>
  for(local_u8ColumnIter=0;local_u8ColumnIter<COLUMN_NUM;local_u8ColumnIter++)
  {
	  //activate currant column
	   DIO_enuSetpinval(KEYPAD_PORT,local_u8AkeypadColumnArr[local_u8ColumnIter],DIO_u8LOW);
	  // _delay_ms(10);
       for(local_u8RowIter=0; local_u8RowIter<ROW_NUM; local_u8RowIter++)
    1568:	89 81       	ldd	r24, Y+1	; 0x01
    156a:	8f 5f       	subi	r24, 0xFF	; 255
    156c:	89 83       	std	Y+1, r24	; 0x01
    156e:	89 81       	ldd	r24, Y+1	; 0x01
    1570:	84 30       	cpi	r24, 0x04	; 4
    1572:	08 f4       	brcc	.+2      	; 0x1576 <KEYPAD_enuGetpressedKey+0xbc>
    1574:	bd cf       	rjmp	.-134    	; 0x14f0 <KEYPAD_enuGetpressedKey+0x36>
    	   return local_u8pressedKey;

       }
       }
       //deactivate currant column
       DIO_enuSetpinval(KEYPAD_PORT,local_u8AkeypadColumnArr[local_u8ColumnIter],DIO_u8HIGH);
    1576:	8a 81       	ldd	r24, Y+2	; 0x02
    1578:	88 2f       	mov	r24, r24
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	fc 01       	movw	r30, r24
    157e:	ef 54       	subi	r30, 0x4F	; 79
    1580:	ff 4f       	sbci	r31, 0xFF	; 255
    1582:	90 81       	ld	r25, Z
    1584:	82 e0       	ldi	r24, 0x02	; 2
    1586:	69 2f       	mov	r22, r25
    1588:	41 e0       	ldi	r20, 0x01	; 1
    158a:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_enuSetpinval>
static	u8 local_u8AkeypadRowArr[ROW_NUM]={KEYPAD_ROW0_PIN ,KEYPAD_ROW1_PIN ,KEYPAD_ROW2_PIN,KEYPAD_ROW3_PIN};

	u8 local_u8ColumnIter=0;
	u8 local_u8RowIter=0;

  for(local_u8ColumnIter=0;local_u8ColumnIter<COLUMN_NUM;local_u8ColumnIter++)
    158e:	8a 81       	ldd	r24, Y+2	; 0x02
    1590:	8f 5f       	subi	r24, 0xFF	; 255
    1592:	8a 83       	std	Y+2, r24	; 0x02
    1594:	8a 81       	ldd	r24, Y+2	; 0x02
    1596:	84 30       	cpi	r24, 0x04	; 4
    1598:	08 f4       	brcc	.+2      	; 0x159c <KEYPAD_enuGetpressedKey+0xe2>
    159a:	9c cf       	rjmp	.-200    	; 0x14d4 <KEYPAD_enuGetpressedKey+0x1a>
       DIO_enuSetpinval(KEYPAD_PORT,local_u8AkeypadColumnArr[local_u8ColumnIter],DIO_u8HIGH);


  }

  return local_u8pressedKey;
    159c:	8b 81       	ldd	r24, Y+3	; 0x03
    159e:	8d 83       	std	Y+5, r24	; 0x05
    15a0:	8d 81       	ldd	r24, Y+5	; 0x05
}
    15a2:	0f 90       	pop	r0
    15a4:	0f 90       	pop	r0
    15a6:	0f 90       	pop	r0
    15a8:	0f 90       	pop	r0
    15aa:	0f 90       	pop	r0
    15ac:	cf 91       	pop	r28
    15ae:	df 91       	pop	r29
    15b0:	08 95       	ret

000015b2 <LCD_enuInit>:
#include"util/delay.h"



ES_ERROR LCD_enuInit(void)
{
    15b2:	df 93       	push	r29
    15b4:	cf 93       	push	r28
    15b6:	cd b7       	in	r28, 0x3d	; 61
    15b8:	de b7       	in	r29, 0x3e	; 62
    15ba:	e9 97       	sbiw	r28, 0x39	; 57
    15bc:	0f b6       	in	r0, 0x3f	; 63
    15be:	f8 94       	cli
    15c0:	de bf       	out	0x3e, r29	; 62
    15c2:	0f be       	out	0x3f, r0	; 63
    15c4:	cd bf       	out	0x3d, r28	; 61
	ES_ERROR local_enuErrorState = ES_OK;
    15c6:	19 ae       	std	Y+57, r1	; 0x39

local_enuErrorState|=DIO_enuSetpindir(RS_PORT, RS_PIN, DIO_u8OUTPUT);
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	62 e0       	ldi	r22, 0x02	; 2
    15cc:	41 e0       	ldi	r20, 0x01	; 1
    15ce:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_enuSetpindir>
    15d2:	98 2f       	mov	r25, r24
    15d4:	89 ad       	ldd	r24, Y+57	; 0x39
    15d6:	89 2b       	or	r24, r25
    15d8:	89 af       	std	Y+57, r24	; 0x39
local_enuErrorState|=DIO_enuSetpindir(RW_PORT, RW_PIN, DIO_u8OUTPUT);
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	61 e0       	ldi	r22, 0x01	; 1
    15de:	41 e0       	ldi	r20, 0x01	; 1
    15e0:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_enuSetpindir>
    15e4:	98 2f       	mov	r25, r24
    15e6:	89 ad       	ldd	r24, Y+57	; 0x39
    15e8:	89 2b       	or	r24, r25
    15ea:	89 af       	std	Y+57, r24	; 0x39
local_enuErrorState|=DIO_enuSetpindir(EN_PORT, EN_PIN, DIO_u8OUTPUT);
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	60 e0       	ldi	r22, 0x00	; 0
    15f0:	41 e0       	ldi	r20, 0x01	; 1
    15f2:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_enuSetpindir>
    15f6:	98 2f       	mov	r25, r24
    15f8:	89 ad       	ldd	r24, Y+57	; 0x39
    15fa:	89 2b       	or	r24, r25
    15fc:	89 af       	std	Y+57, r24	; 0x39

local_enuErrorState|=DIO_enuSetpindir(D7_PORT, D7_PIN, DIO_u8OUTPUT);
    15fe:	80 e0       	ldi	r24, 0x00	; 0
    1600:	60 e0       	ldi	r22, 0x00	; 0
    1602:	41 e0       	ldi	r20, 0x01	; 1
    1604:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_enuSetpindir>
    1608:	98 2f       	mov	r25, r24
    160a:	89 ad       	ldd	r24, Y+57	; 0x39
    160c:	89 2b       	or	r24, r25
    160e:	89 af       	std	Y+57, r24	; 0x39
local_enuErrorState|=DIO_enuSetpindir(D6_PORT, D6_PIN, DIO_u8OUTPUT);
    1610:	80 e0       	ldi	r24, 0x00	; 0
    1612:	61 e0       	ldi	r22, 0x01	; 1
    1614:	41 e0       	ldi	r20, 0x01	; 1
    1616:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_enuSetpindir>
    161a:	98 2f       	mov	r25, r24
    161c:	89 ad       	ldd	r24, Y+57	; 0x39
    161e:	89 2b       	or	r24, r25
    1620:	89 af       	std	Y+57, r24	; 0x39
local_enuErrorState|=DIO_enuSetpindir(D5_PORT, D5_PIN, DIO_u8OUTPUT);
    1622:	80 e0       	ldi	r24, 0x00	; 0
    1624:	62 e0       	ldi	r22, 0x02	; 2
    1626:	41 e0       	ldi	r20, 0x01	; 1
    1628:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_enuSetpindir>
    162c:	98 2f       	mov	r25, r24
    162e:	89 ad       	ldd	r24, Y+57	; 0x39
    1630:	89 2b       	or	r24, r25
    1632:	89 af       	std	Y+57, r24	; 0x39
local_enuErrorState|=DIO_enuSetpindir(D4_PORT, D4_PIN, DIO_u8OUTPUT);
    1634:	80 e0       	ldi	r24, 0x00	; 0
    1636:	63 e0       	ldi	r22, 0x03	; 3
    1638:	41 e0       	ldi	r20, 0x01	; 1
    163a:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_enuSetpindir>
    163e:	98 2f       	mov	r25, r24
    1640:	89 ad       	ldd	r24, Y+57	; 0x39
    1642:	89 2b       	or	r24, r25
    1644:	89 af       	std	Y+57, r24	; 0x39
    1646:	80 e0       	ldi	r24, 0x00	; 0
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	ac e0       	ldi	r26, 0x0C	; 12
    164c:	b2 e4       	ldi	r27, 0x42	; 66
    164e:	8d ab       	std	Y+53, r24	; 0x35
    1650:	9e ab       	std	Y+54, r25	; 0x36
    1652:	af ab       	std	Y+55, r26	; 0x37
    1654:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1656:	6d a9       	ldd	r22, Y+53	; 0x35
    1658:	7e a9       	ldd	r23, Y+54	; 0x36
    165a:	8f a9       	ldd	r24, Y+55	; 0x37
    165c:	98 ad       	ldd	r25, Y+56	; 0x38
    165e:	20 e0       	ldi	r18, 0x00	; 0
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	4a e7       	ldi	r20, 0x7A	; 122
    1664:	53 e4       	ldi	r21, 0x43	; 67
    1666:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    166a:	dc 01       	movw	r26, r24
    166c:	cb 01       	movw	r24, r22
    166e:	89 ab       	std	Y+49, r24	; 0x31
    1670:	9a ab       	std	Y+50, r25	; 0x32
    1672:	ab ab       	std	Y+51, r26	; 0x33
    1674:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1676:	69 a9       	ldd	r22, Y+49	; 0x31
    1678:	7a a9       	ldd	r23, Y+50	; 0x32
    167a:	8b a9       	ldd	r24, Y+51	; 0x33
    167c:	9c a9       	ldd	r25, Y+52	; 0x34
    167e:	20 e0       	ldi	r18, 0x00	; 0
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	40 e8       	ldi	r20, 0x80	; 128
    1684:	5f e3       	ldi	r21, 0x3F	; 63
    1686:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    168a:	88 23       	and	r24, r24
    168c:	2c f4       	brge	.+10     	; 0x1698 <LCD_enuInit+0xe6>
		__ticks = 1;
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	98 ab       	std	Y+48, r25	; 0x30
    1694:	8f a7       	std	Y+47, r24	; 0x2f
    1696:	3f c0       	rjmp	.+126    	; 0x1716 <LCD_enuInit+0x164>
	else if (__tmp > 65535)
    1698:	69 a9       	ldd	r22, Y+49	; 0x31
    169a:	7a a9       	ldd	r23, Y+50	; 0x32
    169c:	8b a9       	ldd	r24, Y+51	; 0x33
    169e:	9c a9       	ldd	r25, Y+52	; 0x34
    16a0:	20 e0       	ldi	r18, 0x00	; 0
    16a2:	3f ef       	ldi	r19, 0xFF	; 255
    16a4:	4f e7       	ldi	r20, 0x7F	; 127
    16a6:	57 e4       	ldi	r21, 0x47	; 71
    16a8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    16ac:	18 16       	cp	r1, r24
    16ae:	4c f5       	brge	.+82     	; 0x1702 <LCD_enuInit+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16b0:	6d a9       	ldd	r22, Y+53	; 0x35
    16b2:	7e a9       	ldd	r23, Y+54	; 0x36
    16b4:	8f a9       	ldd	r24, Y+55	; 0x37
    16b6:	98 ad       	ldd	r25, Y+56	; 0x38
    16b8:	20 e0       	ldi	r18, 0x00	; 0
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	40 e2       	ldi	r20, 0x20	; 32
    16be:	51 e4       	ldi	r21, 0x41	; 65
    16c0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16c4:	dc 01       	movw	r26, r24
    16c6:	cb 01       	movw	r24, r22
    16c8:	bc 01       	movw	r22, r24
    16ca:	cd 01       	movw	r24, r26
    16cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16d0:	dc 01       	movw	r26, r24
    16d2:	cb 01       	movw	r24, r22
    16d4:	98 ab       	std	Y+48, r25	; 0x30
    16d6:	8f a7       	std	Y+47, r24	; 0x2f
    16d8:	0f c0       	rjmp	.+30     	; 0x16f8 <LCD_enuInit+0x146>
    16da:	89 e1       	ldi	r24, 0x19	; 25
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	9e a7       	std	Y+46, r25	; 0x2e
    16e0:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16e2:	8d a5       	ldd	r24, Y+45	; 0x2d
    16e4:	9e a5       	ldd	r25, Y+46	; 0x2e
    16e6:	01 97       	sbiw	r24, 0x01	; 1
    16e8:	f1 f7       	brne	.-4      	; 0x16e6 <LCD_enuInit+0x134>
    16ea:	9e a7       	std	Y+46, r25	; 0x2e
    16ec:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16ee:	8f a5       	ldd	r24, Y+47	; 0x2f
    16f0:	98 a9       	ldd	r25, Y+48	; 0x30
    16f2:	01 97       	sbiw	r24, 0x01	; 1
    16f4:	98 ab       	std	Y+48, r25	; 0x30
    16f6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    16fa:	98 a9       	ldd	r25, Y+48	; 0x30
    16fc:	00 97       	sbiw	r24, 0x00	; 0
    16fe:	69 f7       	brne	.-38     	; 0x16da <LCD_enuInit+0x128>
    1700:	14 c0       	rjmp	.+40     	; 0x172a <LCD_enuInit+0x178>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1702:	69 a9       	ldd	r22, Y+49	; 0x31
    1704:	7a a9       	ldd	r23, Y+50	; 0x32
    1706:	8b a9       	ldd	r24, Y+51	; 0x33
    1708:	9c a9       	ldd	r25, Y+52	; 0x34
    170a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    170e:	dc 01       	movw	r26, r24
    1710:	cb 01       	movw	r24, r22
    1712:	98 ab       	std	Y+48, r25	; 0x30
    1714:	8f a7       	std	Y+47, r24	; 0x2f
    1716:	8f a5       	ldd	r24, Y+47	; 0x2f
    1718:	98 a9       	ldd	r25, Y+48	; 0x30
    171a:	9c a7       	std	Y+44, r25	; 0x2c
    171c:	8b a7       	std	Y+43, r24	; 0x2b
    171e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1720:	9c a5       	ldd	r25, Y+44	; 0x2c
    1722:	01 97       	sbiw	r24, 0x01	; 1
    1724:	f1 f7       	brne	.-4      	; 0x1722 <LCD_enuInit+0x170>
    1726:	9c a7       	std	Y+44, r25	; 0x2c
    1728:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(35);

#if LCD_MODE == EIGHT_BIT

local_enuErrorState|=DIO_enuSetpindir(D3_PORT, D3_PIN, DIO_u8OUTPUT);
    172a:	80 e0       	ldi	r24, 0x00	; 0
    172c:	64 e0       	ldi	r22, 0x04	; 4
    172e:	41 e0       	ldi	r20, 0x01	; 1
    1730:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_enuSetpindir>
    1734:	98 2f       	mov	r25, r24
    1736:	89 ad       	ldd	r24, Y+57	; 0x39
    1738:	89 2b       	or	r24, r25
    173a:	89 af       	std	Y+57, r24	; 0x39
local_enuErrorState|=DIO_enuSetpindir(D2_PORT, D2_PIN, DIO_u8OUTPUT);
    173c:	80 e0       	ldi	r24, 0x00	; 0
    173e:	65 e0       	ldi	r22, 0x05	; 5
    1740:	41 e0       	ldi	r20, 0x01	; 1
    1742:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_enuSetpindir>
    1746:	98 2f       	mov	r25, r24
    1748:	89 ad       	ldd	r24, Y+57	; 0x39
    174a:	89 2b       	or	r24, r25
    174c:	89 af       	std	Y+57, r24	; 0x39
local_enuErrorState|=DIO_enuSetpindir(D1_PORT, D1_PIN, DIO_u8OUTPUT);
    174e:	80 e0       	ldi	r24, 0x00	; 0
    1750:	66 e0       	ldi	r22, 0x06	; 6
    1752:	41 e0       	ldi	r20, 0x01	; 1
    1754:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_enuSetpindir>
    1758:	98 2f       	mov	r25, r24
    175a:	89 ad       	ldd	r24, Y+57	; 0x39
    175c:	89 2b       	or	r24, r25
    175e:	89 af       	std	Y+57, r24	; 0x39
local_enuErrorState|=DIO_enuSetpindir(D0_PORT, D0_PIN, DIO_u8OUTPUT);
    1760:	80 e0       	ldi	r24, 0x00	; 0
    1762:	67 e0       	ldi	r22, 0x07	; 7
    1764:	41 e0       	ldi	r20, 0x01	; 1
    1766:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_enuSetpindir>
    176a:	98 2f       	mov	r25, r24
    176c:	89 ad       	ldd	r24, Y+57	; 0x39
    176e:	89 2b       	or	r24, r25
    1770:	89 af       	std	Y+57, r24	; 0x39

	//function set
local_enuErrorState|=LCD_INIT_SendCommend(0x38);
    1772:	88 e3       	ldi	r24, 0x38	; 56
    1774:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <LCD_INIT_SendCommend>
    1778:	98 2f       	mov	r25, r24
    177a:	89 ad       	ldd	r24, Y+57	; 0x39
    177c:	89 2b       	or	r24, r25
    177e:	89 af       	std	Y+57, r24	; 0x39
    1780:	80 e0       	ldi	r24, 0x00	; 0
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	a0 e8       	ldi	r26, 0x80	; 128
    1786:	bf e3       	ldi	r27, 0x3F	; 63
    1788:	8f a3       	std	Y+39, r24	; 0x27
    178a:	98 a7       	std	Y+40, r25	; 0x28
    178c:	a9 a7       	std	Y+41, r26	; 0x29
    178e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1790:	6f a1       	ldd	r22, Y+39	; 0x27
    1792:	78 a5       	ldd	r23, Y+40	; 0x28
    1794:	89 a5       	ldd	r24, Y+41	; 0x29
    1796:	9a a5       	ldd	r25, Y+42	; 0x2a
    1798:	20 e0       	ldi	r18, 0x00	; 0
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	4a e7       	ldi	r20, 0x7A	; 122
    179e:	53 e4       	ldi	r21, 0x43	; 67
    17a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17a4:	dc 01       	movw	r26, r24
    17a6:	cb 01       	movw	r24, r22
    17a8:	8b a3       	std	Y+35, r24	; 0x23
    17aa:	9c a3       	std	Y+36, r25	; 0x24
    17ac:	ad a3       	std	Y+37, r26	; 0x25
    17ae:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    17b0:	6b a1       	ldd	r22, Y+35	; 0x23
    17b2:	7c a1       	ldd	r23, Y+36	; 0x24
    17b4:	8d a1       	ldd	r24, Y+37	; 0x25
    17b6:	9e a1       	ldd	r25, Y+38	; 0x26
    17b8:	20 e0       	ldi	r18, 0x00	; 0
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	40 e8       	ldi	r20, 0x80	; 128
    17be:	5f e3       	ldi	r21, 0x3F	; 63
    17c0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    17c4:	88 23       	and	r24, r24
    17c6:	2c f4       	brge	.+10     	; 0x17d2 <LCD_enuInit+0x220>
		__ticks = 1;
    17c8:	81 e0       	ldi	r24, 0x01	; 1
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	9a a3       	std	Y+34, r25	; 0x22
    17ce:	89 a3       	std	Y+33, r24	; 0x21
    17d0:	3f c0       	rjmp	.+126    	; 0x1850 <LCD_enuInit+0x29e>
	else if (__tmp > 65535)
    17d2:	6b a1       	ldd	r22, Y+35	; 0x23
    17d4:	7c a1       	ldd	r23, Y+36	; 0x24
    17d6:	8d a1       	ldd	r24, Y+37	; 0x25
    17d8:	9e a1       	ldd	r25, Y+38	; 0x26
    17da:	20 e0       	ldi	r18, 0x00	; 0
    17dc:	3f ef       	ldi	r19, 0xFF	; 255
    17de:	4f e7       	ldi	r20, 0x7F	; 127
    17e0:	57 e4       	ldi	r21, 0x47	; 71
    17e2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    17e6:	18 16       	cp	r1, r24
    17e8:	4c f5       	brge	.+82     	; 0x183c <LCD_enuInit+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ea:	6f a1       	ldd	r22, Y+39	; 0x27
    17ec:	78 a5       	ldd	r23, Y+40	; 0x28
    17ee:	89 a5       	ldd	r24, Y+41	; 0x29
    17f0:	9a a5       	ldd	r25, Y+42	; 0x2a
    17f2:	20 e0       	ldi	r18, 0x00	; 0
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	40 e2       	ldi	r20, 0x20	; 32
    17f8:	51 e4       	ldi	r21, 0x41	; 65
    17fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17fe:	dc 01       	movw	r26, r24
    1800:	cb 01       	movw	r24, r22
    1802:	bc 01       	movw	r22, r24
    1804:	cd 01       	movw	r24, r26
    1806:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    180a:	dc 01       	movw	r26, r24
    180c:	cb 01       	movw	r24, r22
    180e:	9a a3       	std	Y+34, r25	; 0x22
    1810:	89 a3       	std	Y+33, r24	; 0x21
    1812:	0f c0       	rjmp	.+30     	; 0x1832 <LCD_enuInit+0x280>
    1814:	89 e1       	ldi	r24, 0x19	; 25
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	98 a3       	std	Y+32, r25	; 0x20
    181a:	8f 8f       	std	Y+31, r24	; 0x1f
    181c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    181e:	98 a1       	ldd	r25, Y+32	; 0x20
    1820:	01 97       	sbiw	r24, 0x01	; 1
    1822:	f1 f7       	brne	.-4      	; 0x1820 <LCD_enuInit+0x26e>
    1824:	98 a3       	std	Y+32, r25	; 0x20
    1826:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1828:	89 a1       	ldd	r24, Y+33	; 0x21
    182a:	9a a1       	ldd	r25, Y+34	; 0x22
    182c:	01 97       	sbiw	r24, 0x01	; 1
    182e:	9a a3       	std	Y+34, r25	; 0x22
    1830:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1832:	89 a1       	ldd	r24, Y+33	; 0x21
    1834:	9a a1       	ldd	r25, Y+34	; 0x22
    1836:	00 97       	sbiw	r24, 0x00	; 0
    1838:	69 f7       	brne	.-38     	; 0x1814 <LCD_enuInit+0x262>
    183a:	14 c0       	rjmp	.+40     	; 0x1864 <LCD_enuInit+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    183c:	6b a1       	ldd	r22, Y+35	; 0x23
    183e:	7c a1       	ldd	r23, Y+36	; 0x24
    1840:	8d a1       	ldd	r24, Y+37	; 0x25
    1842:	9e a1       	ldd	r25, Y+38	; 0x26
    1844:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1848:	dc 01       	movw	r26, r24
    184a:	cb 01       	movw	r24, r22
    184c:	9a a3       	std	Y+34, r25	; 0x22
    184e:	89 a3       	std	Y+33, r24	; 0x21
    1850:	89 a1       	ldd	r24, Y+33	; 0x21
    1852:	9a a1       	ldd	r25, Y+34	; 0x22
    1854:	9e 8f       	std	Y+30, r25	; 0x1e
    1856:	8d 8f       	std	Y+29, r24	; 0x1d
    1858:	8d 8d       	ldd	r24, Y+29	; 0x1d
    185a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    185c:	01 97       	sbiw	r24, 0x01	; 1
    185e:	f1 f7       	brne	.-4      	; 0x185c <LCD_enuInit+0x2aa>
    1860:	9e 8f       	std	Y+30, r25	; 0x1e
    1862:	8d 8f       	std	Y+29, r24	; 0x1d
#elif LCD_MODE == FOUR_BIT
local_enuErrorState|=LCD_INIT_SendCommend(0x28);
#endif
	_delay_ms(1);
	local_enuErrorState|=LCD_INIT_SendCommend(0x0f);
    1864:	8f e0       	ldi	r24, 0x0F	; 15
    1866:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <LCD_INIT_SendCommend>
    186a:	98 2f       	mov	r25, r24
    186c:	89 ad       	ldd	r24, Y+57	; 0x39
    186e:	89 2b       	or	r24, r25
    1870:	89 af       	std	Y+57, r24	; 0x39
    1872:	80 e0       	ldi	r24, 0x00	; 0
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	a0 e8       	ldi	r26, 0x80	; 128
    1878:	bf e3       	ldi	r27, 0x3F	; 63
    187a:	89 8f       	std	Y+25, r24	; 0x19
    187c:	9a 8f       	std	Y+26, r25	; 0x1a
    187e:	ab 8f       	std	Y+27, r26	; 0x1b
    1880:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1882:	69 8d       	ldd	r22, Y+25	; 0x19
    1884:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1886:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1888:	9c 8d       	ldd	r25, Y+28	; 0x1c
    188a:	20 e0       	ldi	r18, 0x00	; 0
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	4a e7       	ldi	r20, 0x7A	; 122
    1890:	53 e4       	ldi	r21, 0x43	; 67
    1892:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1896:	dc 01       	movw	r26, r24
    1898:	cb 01       	movw	r24, r22
    189a:	8d 8b       	std	Y+21, r24	; 0x15
    189c:	9e 8b       	std	Y+22, r25	; 0x16
    189e:	af 8b       	std	Y+23, r26	; 0x17
    18a0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18a2:	6d 89       	ldd	r22, Y+21	; 0x15
    18a4:	7e 89       	ldd	r23, Y+22	; 0x16
    18a6:	8f 89       	ldd	r24, Y+23	; 0x17
    18a8:	98 8d       	ldd	r25, Y+24	; 0x18
    18aa:	20 e0       	ldi	r18, 0x00	; 0
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	40 e8       	ldi	r20, 0x80	; 128
    18b0:	5f e3       	ldi	r21, 0x3F	; 63
    18b2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    18b6:	88 23       	and	r24, r24
    18b8:	2c f4       	brge	.+10     	; 0x18c4 <LCD_enuInit+0x312>
		__ticks = 1;
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	9c 8b       	std	Y+20, r25	; 0x14
    18c0:	8b 8b       	std	Y+19, r24	; 0x13
    18c2:	3f c0       	rjmp	.+126    	; 0x1942 <LCD_enuInit+0x390>
	else if (__tmp > 65535)
    18c4:	6d 89       	ldd	r22, Y+21	; 0x15
    18c6:	7e 89       	ldd	r23, Y+22	; 0x16
    18c8:	8f 89       	ldd	r24, Y+23	; 0x17
    18ca:	98 8d       	ldd	r25, Y+24	; 0x18
    18cc:	20 e0       	ldi	r18, 0x00	; 0
    18ce:	3f ef       	ldi	r19, 0xFF	; 255
    18d0:	4f e7       	ldi	r20, 0x7F	; 127
    18d2:	57 e4       	ldi	r21, 0x47	; 71
    18d4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    18d8:	18 16       	cp	r1, r24
    18da:	4c f5       	brge	.+82     	; 0x192e <LCD_enuInit+0x37c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18dc:	69 8d       	ldd	r22, Y+25	; 0x19
    18de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18e4:	20 e0       	ldi	r18, 0x00	; 0
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	40 e2       	ldi	r20, 0x20	; 32
    18ea:	51 e4       	ldi	r21, 0x41	; 65
    18ec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18f0:	dc 01       	movw	r26, r24
    18f2:	cb 01       	movw	r24, r22
    18f4:	bc 01       	movw	r22, r24
    18f6:	cd 01       	movw	r24, r26
    18f8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18fc:	dc 01       	movw	r26, r24
    18fe:	cb 01       	movw	r24, r22
    1900:	9c 8b       	std	Y+20, r25	; 0x14
    1902:	8b 8b       	std	Y+19, r24	; 0x13
    1904:	0f c0       	rjmp	.+30     	; 0x1924 <LCD_enuInit+0x372>
    1906:	89 e1       	ldi	r24, 0x19	; 25
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	9a 8b       	std	Y+18, r25	; 0x12
    190c:	89 8b       	std	Y+17, r24	; 0x11
    190e:	89 89       	ldd	r24, Y+17	; 0x11
    1910:	9a 89       	ldd	r25, Y+18	; 0x12
    1912:	01 97       	sbiw	r24, 0x01	; 1
    1914:	f1 f7       	brne	.-4      	; 0x1912 <LCD_enuInit+0x360>
    1916:	9a 8b       	std	Y+18, r25	; 0x12
    1918:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    191a:	8b 89       	ldd	r24, Y+19	; 0x13
    191c:	9c 89       	ldd	r25, Y+20	; 0x14
    191e:	01 97       	sbiw	r24, 0x01	; 1
    1920:	9c 8b       	std	Y+20, r25	; 0x14
    1922:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1924:	8b 89       	ldd	r24, Y+19	; 0x13
    1926:	9c 89       	ldd	r25, Y+20	; 0x14
    1928:	00 97       	sbiw	r24, 0x00	; 0
    192a:	69 f7       	brne	.-38     	; 0x1906 <LCD_enuInit+0x354>
    192c:	14 c0       	rjmp	.+40     	; 0x1956 <LCD_enuInit+0x3a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    192e:	6d 89       	ldd	r22, Y+21	; 0x15
    1930:	7e 89       	ldd	r23, Y+22	; 0x16
    1932:	8f 89       	ldd	r24, Y+23	; 0x17
    1934:	98 8d       	ldd	r25, Y+24	; 0x18
    1936:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    193a:	dc 01       	movw	r26, r24
    193c:	cb 01       	movw	r24, r22
    193e:	9c 8b       	std	Y+20, r25	; 0x14
    1940:	8b 8b       	std	Y+19, r24	; 0x13
    1942:	8b 89       	ldd	r24, Y+19	; 0x13
    1944:	9c 89       	ldd	r25, Y+20	; 0x14
    1946:	98 8b       	std	Y+16, r25	; 0x10
    1948:	8f 87       	std	Y+15, r24	; 0x0f
    194a:	8f 85       	ldd	r24, Y+15	; 0x0f
    194c:	98 89       	ldd	r25, Y+16	; 0x10
    194e:	01 97       	sbiw	r24, 0x01	; 1
    1950:	f1 f7       	brne	.-4      	; 0x194e <LCD_enuInit+0x39c>
    1952:	98 8b       	std	Y+16, r25	; 0x10
    1954:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	local_enuErrorState|=LCD_INIT_SendCommend(0x01);
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <LCD_INIT_SendCommend>
    195c:	98 2f       	mov	r25, r24
    195e:	89 ad       	ldd	r24, Y+57	; 0x39
    1960:	89 2b       	or	r24, r25
    1962:	89 af       	std	Y+57, r24	; 0x39
    1964:	80 e0       	ldi	r24, 0x00	; 0
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	a0 e0       	ldi	r26, 0x00	; 0
    196a:	b0 e4       	ldi	r27, 0x40	; 64
    196c:	8b 87       	std	Y+11, r24	; 0x0b
    196e:	9c 87       	std	Y+12, r25	; 0x0c
    1970:	ad 87       	std	Y+13, r26	; 0x0d
    1972:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1974:	6b 85       	ldd	r22, Y+11	; 0x0b
    1976:	7c 85       	ldd	r23, Y+12	; 0x0c
    1978:	8d 85       	ldd	r24, Y+13	; 0x0d
    197a:	9e 85       	ldd	r25, Y+14	; 0x0e
    197c:	20 e0       	ldi	r18, 0x00	; 0
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	4a e7       	ldi	r20, 0x7A	; 122
    1982:	53 e4       	ldi	r21, 0x43	; 67
    1984:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1988:	dc 01       	movw	r26, r24
    198a:	cb 01       	movw	r24, r22
    198c:	8f 83       	std	Y+7, r24	; 0x07
    198e:	98 87       	std	Y+8, r25	; 0x08
    1990:	a9 87       	std	Y+9, r26	; 0x09
    1992:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1994:	6f 81       	ldd	r22, Y+7	; 0x07
    1996:	78 85       	ldd	r23, Y+8	; 0x08
    1998:	89 85       	ldd	r24, Y+9	; 0x09
    199a:	9a 85       	ldd	r25, Y+10	; 0x0a
    199c:	20 e0       	ldi	r18, 0x00	; 0
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	40 e8       	ldi	r20, 0x80	; 128
    19a2:	5f e3       	ldi	r21, 0x3F	; 63
    19a4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    19a8:	88 23       	and	r24, r24
    19aa:	2c f4       	brge	.+10     	; 0x19b6 <LCD_enuInit+0x404>
		__ticks = 1;
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	9e 83       	std	Y+6, r25	; 0x06
    19b2:	8d 83       	std	Y+5, r24	; 0x05
    19b4:	3f c0       	rjmp	.+126    	; 0x1a34 <LCD_enuInit+0x482>
	else if (__tmp > 65535)
    19b6:	6f 81       	ldd	r22, Y+7	; 0x07
    19b8:	78 85       	ldd	r23, Y+8	; 0x08
    19ba:	89 85       	ldd	r24, Y+9	; 0x09
    19bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    19be:	20 e0       	ldi	r18, 0x00	; 0
    19c0:	3f ef       	ldi	r19, 0xFF	; 255
    19c2:	4f e7       	ldi	r20, 0x7F	; 127
    19c4:	57 e4       	ldi	r21, 0x47	; 71
    19c6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    19ca:	18 16       	cp	r1, r24
    19cc:	4c f5       	brge	.+82     	; 0x1a20 <LCD_enuInit+0x46e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    19d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    19d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    19d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	40 e2       	ldi	r20, 0x20	; 32
    19dc:	51 e4       	ldi	r21, 0x41	; 65
    19de:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19e2:	dc 01       	movw	r26, r24
    19e4:	cb 01       	movw	r24, r22
    19e6:	bc 01       	movw	r22, r24
    19e8:	cd 01       	movw	r24, r26
    19ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19ee:	dc 01       	movw	r26, r24
    19f0:	cb 01       	movw	r24, r22
    19f2:	9e 83       	std	Y+6, r25	; 0x06
    19f4:	8d 83       	std	Y+5, r24	; 0x05
    19f6:	0f c0       	rjmp	.+30     	; 0x1a16 <LCD_enuInit+0x464>
    19f8:	89 e1       	ldi	r24, 0x19	; 25
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	9c 83       	std	Y+4, r25	; 0x04
    19fe:	8b 83       	std	Y+3, r24	; 0x03
    1a00:	8b 81       	ldd	r24, Y+3	; 0x03
    1a02:	9c 81       	ldd	r25, Y+4	; 0x04
    1a04:	01 97       	sbiw	r24, 0x01	; 1
    1a06:	f1 f7       	brne	.-4      	; 0x1a04 <LCD_enuInit+0x452>
    1a08:	9c 83       	std	Y+4, r25	; 0x04
    1a0a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a10:	01 97       	sbiw	r24, 0x01	; 1
    1a12:	9e 83       	std	Y+6, r25	; 0x06
    1a14:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a16:	8d 81       	ldd	r24, Y+5	; 0x05
    1a18:	9e 81       	ldd	r25, Y+6	; 0x06
    1a1a:	00 97       	sbiw	r24, 0x00	; 0
    1a1c:	69 f7       	brne	.-38     	; 0x19f8 <LCD_enuInit+0x446>
    1a1e:	14 c0       	rjmp	.+40     	; 0x1a48 <LCD_enuInit+0x496>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a20:	6f 81       	ldd	r22, Y+7	; 0x07
    1a22:	78 85       	ldd	r23, Y+8	; 0x08
    1a24:	89 85       	ldd	r24, Y+9	; 0x09
    1a26:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a28:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a2c:	dc 01       	movw	r26, r24
    1a2e:	cb 01       	movw	r24, r22
    1a30:	9e 83       	std	Y+6, r25	; 0x06
    1a32:	8d 83       	std	Y+5, r24	; 0x05
    1a34:	8d 81       	ldd	r24, Y+5	; 0x05
    1a36:	9e 81       	ldd	r25, Y+6	; 0x06
    1a38:	9a 83       	std	Y+2, r25	; 0x02
    1a3a:	89 83       	std	Y+1, r24	; 0x01
    1a3c:	89 81       	ldd	r24, Y+1	; 0x01
    1a3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a40:	01 97       	sbiw	r24, 0x01	; 1
    1a42:	f1 f7       	brne	.-4      	; 0x1a40 <LCD_enuInit+0x48e>
    1a44:	9a 83       	std	Y+2, r25	; 0x02
    1a46:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	local_enuErrorState|=LCD_INIT_SendCommend(0x06);
    1a48:	86 e0       	ldi	r24, 0x06	; 6
    1a4a:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <LCD_INIT_SendCommend>
    1a4e:	98 2f       	mov	r25, r24
    1a50:	89 ad       	ldd	r24, Y+57	; 0x39
    1a52:	89 2b       	or	r24, r25
    1a54:	89 af       	std	Y+57, r24	; 0x39





	return local_enuErrorState;
    1a56:	89 ad       	ldd	r24, Y+57	; 0x39
}
    1a58:	e9 96       	adiw	r28, 0x39	; 57
    1a5a:	0f b6       	in	r0, 0x3f	; 63
    1a5c:	f8 94       	cli
    1a5e:	de bf       	out	0x3e, r29	; 62
    1a60:	0f be       	out	0x3f, r0	; 63
    1a62:	cd bf       	out	0x3d, r28	; 61
    1a64:	cf 91       	pop	r28
    1a66:	df 91       	pop	r29
    1a68:	08 95       	ret

00001a6a <LCD_enuDisplayChar>:

ES_ERROR LCD_enuDisplayChar(u8 Copy_u8Data)
{
    1a6a:	df 93       	push	r29
    1a6c:	cf 93       	push	r28
    1a6e:	00 d0       	rcall	.+0      	; 0x1a70 <LCD_enuDisplayChar+0x6>
    1a70:	cd b7       	in	r28, 0x3d	; 61
    1a72:	de b7       	in	r29, 0x3e	; 62
    1a74:	8a 83       	std	Y+2, r24	; 0x02

	//LCD_setCusor( copyu8_row, copy_u8_column);
	ES_ERROR local_enuErrorState = ES_OK;
    1a76:	19 82       	std	Y+1, r1	; 0x01

local_enuErrorState|=	DIO_enuSetpinval(RS_PORT , RS_PIN , DIO_u8HIGH);
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	62 e0       	ldi	r22, 0x02	; 2
    1a7c:	41 e0       	ldi	r20, 0x01	; 1
    1a7e:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_enuSetpinval>
    1a82:	98 2f       	mov	r25, r24
    1a84:	89 81       	ldd	r24, Y+1	; 0x01
    1a86:	89 2b       	or	r24, r25
    1a88:	89 83       	std	Y+1, r24	; 0x01

local_enuErrorState|=LCD_inerSendData(Copy_u8Data);
    1a8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8c:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <LCD_inerSendData>
    1a90:	98 2f       	mov	r25, r24
    1a92:	89 81       	ldd	r24, Y+1	; 0x01
    1a94:	89 2b       	or	r24, r25
    1a96:	89 83       	std	Y+1, r24	; 0x01

	return local_enuErrorState;
    1a98:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a9a:	0f 90       	pop	r0
    1a9c:	0f 90       	pop	r0
    1a9e:	cf 91       	pop	r28
    1aa0:	df 91       	pop	r29
    1aa2:	08 95       	ret

00001aa4 <LCD_enuSendCommand>:

ES_ERROR LCD_enuSendCommand(u8 Copy_u8Command)
{
    1aa4:	df 93       	push	r29
    1aa6:	cf 93       	push	r28
    1aa8:	00 d0       	rcall	.+0      	; 0x1aaa <LCD_enuSendCommand+0x6>
    1aaa:	cd b7       	in	r28, 0x3d	; 61
    1aac:	de b7       	in	r29, 0x3e	; 62
    1aae:	8a 83       	std	Y+2, r24	; 0x02
	ES_ERROR local_enuErrorState = ES_OK;
    1ab0:	19 82       	std	Y+1, r1	; 0x01

	// set rs as command
	local_enuErrorState|=DIO_enuSetpinval(RS_PORT , RS_PIN , DIO_u8LOW);
    1ab2:	81 e0       	ldi	r24, 0x01	; 1
    1ab4:	62 e0       	ldi	r22, 0x02	; 2
    1ab6:	40 e0       	ldi	r20, 0x00	; 0
    1ab8:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_enuSetpinval>
    1abc:	98 2f       	mov	r25, r24
    1abe:	89 81       	ldd	r24, Y+1	; 0x01
    1ac0:	89 2b       	or	r24, r25
    1ac2:	89 83       	std	Y+1, r24	; 0x01

	local_enuErrorState|=LCD_inerSendData(Copy_u8Command);
    1ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac6:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <LCD_inerSendData>
    1aca:	98 2f       	mov	r25, r24
    1acc:	89 81       	ldd	r24, Y+1	; 0x01
    1ace:	89 2b       	or	r24, r25
    1ad0:	89 83       	std	Y+1, r24	; 0x01


	return local_enuErrorState;
    1ad2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ad4:	0f 90       	pop	r0
    1ad6:	0f 90       	pop	r0
    1ad8:	cf 91       	pop	r28
    1ada:	df 91       	pop	r29
    1adc:	08 95       	ret

00001ade <LCD_inerSendData>:

static ES_ERROR LCD_inerSendData(u8 Copy_u8Data)
{    ES_ERROR local_enuErrorState=ES_OK;
    1ade:	df 93       	push	r29
    1ae0:	cf 93       	push	r28
    1ae2:	cd b7       	in	r28, 0x3d	; 61
    1ae4:	de b7       	in	r29, 0x3e	; 62
    1ae6:	6e 97       	sbiw	r28, 0x1e	; 30
    1ae8:	0f b6       	in	r0, 0x3f	; 63
    1aea:	f8 94       	cli
    1aec:	de bf       	out	0x3e, r29	; 62
    1aee:	0f be       	out	0x3f, r0	; 63
    1af0:	cd bf       	out	0x3d, r28	; 61
    1af2:	8e 8f       	std	Y+30, r24	; 0x1e
    1af4:	1d 8e       	std	Y+29, r1	; 0x1d
	// set rw as write operation , EN is low
local_enuErrorState|=DIO_enuSetpinval(RW_PORT , RW_PIN , DIO_u8LOW);
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	61 e0       	ldi	r22, 0x01	; 1
    1afa:	40 e0       	ldi	r20, 0x00	; 0
    1afc:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_enuSetpinval>
    1b00:	98 2f       	mov	r25, r24
    1b02:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b04:	89 2b       	or	r24, r25
    1b06:	8d 8f       	std	Y+29, r24	; 0x1d
local_enuErrorState|=DIO_enuSetpinval(EN_PORT , EN_PIN , DIO_u8LOW);
    1b08:	81 e0       	ldi	r24, 0x01	; 1
    1b0a:	60 e0       	ldi	r22, 0x00	; 0
    1b0c:	40 e0       	ldi	r20, 0x00	; 0
    1b0e:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_enuSetpinval>
    1b12:	98 2f       	mov	r25, r24
    1b14:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b16:	89 2b       	or	r24, r25
    1b18:	8d 8f       	std	Y+29, r24	; 0x1d
	//write Data
local_enuErrorState|=DIO_enuSetpinval(D7_PORT , D7_PIN , ((Copy_u8Data>>7)&1));
    1b1a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b1c:	98 2f       	mov	r25, r24
    1b1e:	99 1f       	adc	r25, r25
    1b20:	99 27       	eor	r25, r25
    1b22:	99 1f       	adc	r25, r25
    1b24:	80 e0       	ldi	r24, 0x00	; 0
    1b26:	60 e0       	ldi	r22, 0x00	; 0
    1b28:	49 2f       	mov	r20, r25
    1b2a:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_enuSetpinval>
    1b2e:	98 2f       	mov	r25, r24
    1b30:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b32:	89 2b       	or	r24, r25
    1b34:	8d 8f       	std	Y+29, r24	; 0x1d
local_enuErrorState|=DIO_enuSetpinval(D6_PORT , D6_PIN , ((Copy_u8Data>>6)&1));
    1b36:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b38:	82 95       	swap	r24
    1b3a:	86 95       	lsr	r24
    1b3c:	86 95       	lsr	r24
    1b3e:	83 70       	andi	r24, 0x03	; 3
    1b40:	98 2f       	mov	r25, r24
    1b42:	91 70       	andi	r25, 0x01	; 1
    1b44:	80 e0       	ldi	r24, 0x00	; 0
    1b46:	61 e0       	ldi	r22, 0x01	; 1
    1b48:	49 2f       	mov	r20, r25
    1b4a:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_enuSetpinval>
    1b4e:	98 2f       	mov	r25, r24
    1b50:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b52:	89 2b       	or	r24, r25
    1b54:	8d 8f       	std	Y+29, r24	; 0x1d
local_enuErrorState|=DIO_enuSetpinval(D5_PORT , D5_PIN , ((Copy_u8Data>>5)&1));
    1b56:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b58:	82 95       	swap	r24
    1b5a:	86 95       	lsr	r24
    1b5c:	87 70       	andi	r24, 0x07	; 7
    1b5e:	98 2f       	mov	r25, r24
    1b60:	91 70       	andi	r25, 0x01	; 1
    1b62:	80 e0       	ldi	r24, 0x00	; 0
    1b64:	62 e0       	ldi	r22, 0x02	; 2
    1b66:	49 2f       	mov	r20, r25
    1b68:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_enuSetpinval>
    1b6c:	98 2f       	mov	r25, r24
    1b6e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b70:	89 2b       	or	r24, r25
    1b72:	8d 8f       	std	Y+29, r24	; 0x1d
local_enuErrorState|=DIO_enuSetpinval(D4_PORT , D4_PIN , ((Copy_u8Data>>4)&1));
    1b74:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b76:	82 95       	swap	r24
    1b78:	8f 70       	andi	r24, 0x0F	; 15
    1b7a:	98 2f       	mov	r25, r24
    1b7c:	91 70       	andi	r25, 0x01	; 1
    1b7e:	80 e0       	ldi	r24, 0x00	; 0
    1b80:	63 e0       	ldi	r22, 0x03	; 3
    1b82:	49 2f       	mov	r20, r25
    1b84:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_enuSetpinval>
    1b88:	98 2f       	mov	r25, r24
    1b8a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b8c:	89 2b       	or	r24, r25
    1b8e:	8d 8f       	std	Y+29, r24	; 0x1d

#if LCD_MODE == EIGHT_BIT

local_enuErrorState|=DIO_enuSetpinval(D3_PORT , D3_PIN , ((Copy_u8Data>>3)&1));
    1b90:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b92:	86 95       	lsr	r24
    1b94:	86 95       	lsr	r24
    1b96:	86 95       	lsr	r24
    1b98:	98 2f       	mov	r25, r24
    1b9a:	91 70       	andi	r25, 0x01	; 1
    1b9c:	80 e0       	ldi	r24, 0x00	; 0
    1b9e:	64 e0       	ldi	r22, 0x04	; 4
    1ba0:	49 2f       	mov	r20, r25
    1ba2:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_enuSetpinval>
    1ba6:	98 2f       	mov	r25, r24
    1ba8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1baa:	89 2b       	or	r24, r25
    1bac:	8d 8f       	std	Y+29, r24	; 0x1d
local_enuErrorState|=DIO_enuSetpinval(D2_PORT , D2_PIN , ((Copy_u8Data>>2)&1));
    1bae:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1bb0:	86 95       	lsr	r24
    1bb2:	86 95       	lsr	r24
    1bb4:	98 2f       	mov	r25, r24
    1bb6:	91 70       	andi	r25, 0x01	; 1
    1bb8:	80 e0       	ldi	r24, 0x00	; 0
    1bba:	65 e0       	ldi	r22, 0x05	; 5
    1bbc:	49 2f       	mov	r20, r25
    1bbe:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_enuSetpinval>
    1bc2:	98 2f       	mov	r25, r24
    1bc4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bc6:	89 2b       	or	r24, r25
    1bc8:	8d 8f       	std	Y+29, r24	; 0x1d
local_enuErrorState|=DIO_enuSetpinval(D1_PORT , D1_PIN , ((Copy_u8Data>>1)&1));
    1bca:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1bcc:	86 95       	lsr	r24
    1bce:	98 2f       	mov	r25, r24
    1bd0:	91 70       	andi	r25, 0x01	; 1
    1bd2:	80 e0       	ldi	r24, 0x00	; 0
    1bd4:	66 e0       	ldi	r22, 0x06	; 6
    1bd6:	49 2f       	mov	r20, r25
    1bd8:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_enuSetpinval>
    1bdc:	98 2f       	mov	r25, r24
    1bde:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1be0:	89 2b       	or	r24, r25
    1be2:	8d 8f       	std	Y+29, r24	; 0x1d
local_enuErrorState|=DIO_enuSetpinval(D0_PORT , D0_PIN , ((Copy_u8Data>>0)&1));
    1be4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1be6:	98 2f       	mov	r25, r24
    1be8:	91 70       	andi	r25, 0x01	; 1
    1bea:	80 e0       	ldi	r24, 0x00	; 0
    1bec:	67 e0       	ldi	r22, 0x07	; 7
    1bee:	49 2f       	mov	r20, r25
    1bf0:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_enuSetpinval>
    1bf4:	98 2f       	mov	r25, r24
    1bf6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bf8:	89 2b       	or	r24, r25
    1bfa:	8d 8f       	std	Y+29, r24	; 0x1d
#elif LCD_MODE == FOUR_BIT

#endif

	// Enable latch
local_enuErrorState|=DIO_enuSetpinval(EN_PORT , EN_PIN , DIO_u8HIGH);
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	60 e0       	ldi	r22, 0x00	; 0
    1c00:	41 e0       	ldi	r20, 0x01	; 1
    1c02:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_enuSetpinval>
    1c06:	98 2f       	mov	r25, r24
    1c08:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c0a:	89 2b       	or	r24, r25
    1c0c:	8d 8f       	std	Y+29, r24	; 0x1d
    1c0e:	80 e0       	ldi	r24, 0x00	; 0
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	a0 e2       	ldi	r26, 0x20	; 32
    1c14:	b1 e4       	ldi	r27, 0x41	; 65
    1c16:	89 8f       	std	Y+25, r24	; 0x19
    1c18:	9a 8f       	std	Y+26, r25	; 0x1a
    1c1a:	ab 8f       	std	Y+27, r26	; 0x1b
    1c1c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c1e:	69 8d       	ldd	r22, Y+25	; 0x19
    1c20:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c22:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c24:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c26:	20 e0       	ldi	r18, 0x00	; 0
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	4a e7       	ldi	r20, 0x7A	; 122
    1c2c:	53 e4       	ldi	r21, 0x43	; 67
    1c2e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c32:	dc 01       	movw	r26, r24
    1c34:	cb 01       	movw	r24, r22
    1c36:	8d 8b       	std	Y+21, r24	; 0x15
    1c38:	9e 8b       	std	Y+22, r25	; 0x16
    1c3a:	af 8b       	std	Y+23, r26	; 0x17
    1c3c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c3e:	6d 89       	ldd	r22, Y+21	; 0x15
    1c40:	7e 89       	ldd	r23, Y+22	; 0x16
    1c42:	8f 89       	ldd	r24, Y+23	; 0x17
    1c44:	98 8d       	ldd	r25, Y+24	; 0x18
    1c46:	20 e0       	ldi	r18, 0x00	; 0
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	40 e8       	ldi	r20, 0x80	; 128
    1c4c:	5f e3       	ldi	r21, 0x3F	; 63
    1c4e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c52:	88 23       	and	r24, r24
    1c54:	2c f4       	brge	.+10     	; 0x1c60 <LCD_inerSendData+0x182>
		__ticks = 1;
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	9c 8b       	std	Y+20, r25	; 0x14
    1c5c:	8b 8b       	std	Y+19, r24	; 0x13
    1c5e:	3f c0       	rjmp	.+126    	; 0x1cde <LCD_inerSendData+0x200>
	else if (__tmp > 65535)
    1c60:	6d 89       	ldd	r22, Y+21	; 0x15
    1c62:	7e 89       	ldd	r23, Y+22	; 0x16
    1c64:	8f 89       	ldd	r24, Y+23	; 0x17
    1c66:	98 8d       	ldd	r25, Y+24	; 0x18
    1c68:	20 e0       	ldi	r18, 0x00	; 0
    1c6a:	3f ef       	ldi	r19, 0xFF	; 255
    1c6c:	4f e7       	ldi	r20, 0x7F	; 127
    1c6e:	57 e4       	ldi	r21, 0x47	; 71
    1c70:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c74:	18 16       	cp	r1, r24
    1c76:	4c f5       	brge	.+82     	; 0x1cca <LCD_inerSendData+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c78:	69 8d       	ldd	r22, Y+25	; 0x19
    1c7a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c7e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c80:	20 e0       	ldi	r18, 0x00	; 0
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	40 e2       	ldi	r20, 0x20	; 32
    1c86:	51 e4       	ldi	r21, 0x41	; 65
    1c88:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c8c:	dc 01       	movw	r26, r24
    1c8e:	cb 01       	movw	r24, r22
    1c90:	bc 01       	movw	r22, r24
    1c92:	cd 01       	movw	r24, r26
    1c94:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c98:	dc 01       	movw	r26, r24
    1c9a:	cb 01       	movw	r24, r22
    1c9c:	9c 8b       	std	Y+20, r25	; 0x14
    1c9e:	8b 8b       	std	Y+19, r24	; 0x13
    1ca0:	0f c0       	rjmp	.+30     	; 0x1cc0 <LCD_inerSendData+0x1e2>
    1ca2:	89 e1       	ldi	r24, 0x19	; 25
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	9a 8b       	std	Y+18, r25	; 0x12
    1ca8:	89 8b       	std	Y+17, r24	; 0x11
    1caa:	89 89       	ldd	r24, Y+17	; 0x11
    1cac:	9a 89       	ldd	r25, Y+18	; 0x12
    1cae:	01 97       	sbiw	r24, 0x01	; 1
    1cb0:	f1 f7       	brne	.-4      	; 0x1cae <LCD_inerSendData+0x1d0>
    1cb2:	9a 8b       	std	Y+18, r25	; 0x12
    1cb4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cb6:	8b 89       	ldd	r24, Y+19	; 0x13
    1cb8:	9c 89       	ldd	r25, Y+20	; 0x14
    1cba:	01 97       	sbiw	r24, 0x01	; 1
    1cbc:	9c 8b       	std	Y+20, r25	; 0x14
    1cbe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cc0:	8b 89       	ldd	r24, Y+19	; 0x13
    1cc2:	9c 89       	ldd	r25, Y+20	; 0x14
    1cc4:	00 97       	sbiw	r24, 0x00	; 0
    1cc6:	69 f7       	brne	.-38     	; 0x1ca2 <LCD_inerSendData+0x1c4>
    1cc8:	14 c0       	rjmp	.+40     	; 0x1cf2 <LCD_inerSendData+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cca:	6d 89       	ldd	r22, Y+21	; 0x15
    1ccc:	7e 89       	ldd	r23, Y+22	; 0x16
    1cce:	8f 89       	ldd	r24, Y+23	; 0x17
    1cd0:	98 8d       	ldd	r25, Y+24	; 0x18
    1cd2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cd6:	dc 01       	movw	r26, r24
    1cd8:	cb 01       	movw	r24, r22
    1cda:	9c 8b       	std	Y+20, r25	; 0x14
    1cdc:	8b 8b       	std	Y+19, r24	; 0x13
    1cde:	8b 89       	ldd	r24, Y+19	; 0x13
    1ce0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ce2:	98 8b       	std	Y+16, r25	; 0x10
    1ce4:	8f 87       	std	Y+15, r24	; 0x0f
    1ce6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ce8:	98 89       	ldd	r25, Y+16	; 0x10
    1cea:	01 97       	sbiw	r24, 0x01	; 1
    1cec:	f1 f7       	brne	.-4      	; 0x1cea <LCD_inerSendData+0x20c>
    1cee:	98 8b       	std	Y+16, r25	; 0x10
    1cf0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
local_enuErrorState|=DIO_enuSetpinval(EN_PORT , EN_PIN , DIO_u8LOW);
    1cf2:	81 e0       	ldi	r24, 0x01	; 1
    1cf4:	60 e0       	ldi	r22, 0x00	; 0
    1cf6:	40 e0       	ldi	r20, 0x00	; 0
    1cf8:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_enuSetpinval>
    1cfc:	98 2f       	mov	r25, r24
    1cfe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d00:	89 2b       	or	r24, r25
    1d02:	8d 8f       	std	Y+29, r24	; 0x1d
    1d04:	80 e0       	ldi	r24, 0x00	; 0
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	a0 e2       	ldi	r26, 0x20	; 32
    1d0a:	b1 e4       	ldi	r27, 0x41	; 65
    1d0c:	8b 87       	std	Y+11, r24	; 0x0b
    1d0e:	9c 87       	std	Y+12, r25	; 0x0c
    1d10:	ad 87       	std	Y+13, r26	; 0x0d
    1d12:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d14:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d16:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d18:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	4a e7       	ldi	r20, 0x7A	; 122
    1d22:	53 e4       	ldi	r21, 0x43	; 67
    1d24:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d28:	dc 01       	movw	r26, r24
    1d2a:	cb 01       	movw	r24, r22
    1d2c:	8f 83       	std	Y+7, r24	; 0x07
    1d2e:	98 87       	std	Y+8, r25	; 0x08
    1d30:	a9 87       	std	Y+9, r26	; 0x09
    1d32:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d34:	6f 81       	ldd	r22, Y+7	; 0x07
    1d36:	78 85       	ldd	r23, Y+8	; 0x08
    1d38:	89 85       	ldd	r24, Y+9	; 0x09
    1d3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d3c:	20 e0       	ldi	r18, 0x00	; 0
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	40 e8       	ldi	r20, 0x80	; 128
    1d42:	5f e3       	ldi	r21, 0x3F	; 63
    1d44:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d48:	88 23       	and	r24, r24
    1d4a:	2c f4       	brge	.+10     	; 0x1d56 <LCD_inerSendData+0x278>
		__ticks = 1;
    1d4c:	81 e0       	ldi	r24, 0x01	; 1
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	9e 83       	std	Y+6, r25	; 0x06
    1d52:	8d 83       	std	Y+5, r24	; 0x05
    1d54:	3f c0       	rjmp	.+126    	; 0x1dd4 <LCD_inerSendData+0x2f6>
	else if (__tmp > 65535)
    1d56:	6f 81       	ldd	r22, Y+7	; 0x07
    1d58:	78 85       	ldd	r23, Y+8	; 0x08
    1d5a:	89 85       	ldd	r24, Y+9	; 0x09
    1d5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d5e:	20 e0       	ldi	r18, 0x00	; 0
    1d60:	3f ef       	ldi	r19, 0xFF	; 255
    1d62:	4f e7       	ldi	r20, 0x7F	; 127
    1d64:	57 e4       	ldi	r21, 0x47	; 71
    1d66:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d6a:	18 16       	cp	r1, r24
    1d6c:	4c f5       	brge	.+82     	; 0x1dc0 <LCD_inerSendData+0x2e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d70:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d72:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d74:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d76:	20 e0       	ldi	r18, 0x00	; 0
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	40 e2       	ldi	r20, 0x20	; 32
    1d7c:	51 e4       	ldi	r21, 0x41	; 65
    1d7e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d82:	dc 01       	movw	r26, r24
    1d84:	cb 01       	movw	r24, r22
    1d86:	bc 01       	movw	r22, r24
    1d88:	cd 01       	movw	r24, r26
    1d8a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d8e:	dc 01       	movw	r26, r24
    1d90:	cb 01       	movw	r24, r22
    1d92:	9e 83       	std	Y+6, r25	; 0x06
    1d94:	8d 83       	std	Y+5, r24	; 0x05
    1d96:	0f c0       	rjmp	.+30     	; 0x1db6 <LCD_inerSendData+0x2d8>
    1d98:	89 e1       	ldi	r24, 0x19	; 25
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	9c 83       	std	Y+4, r25	; 0x04
    1d9e:	8b 83       	std	Y+3, r24	; 0x03
    1da0:	8b 81       	ldd	r24, Y+3	; 0x03
    1da2:	9c 81       	ldd	r25, Y+4	; 0x04
    1da4:	01 97       	sbiw	r24, 0x01	; 1
    1da6:	f1 f7       	brne	.-4      	; 0x1da4 <LCD_inerSendData+0x2c6>
    1da8:	9c 83       	std	Y+4, r25	; 0x04
    1daa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dac:	8d 81       	ldd	r24, Y+5	; 0x05
    1dae:	9e 81       	ldd	r25, Y+6	; 0x06
    1db0:	01 97       	sbiw	r24, 0x01	; 1
    1db2:	9e 83       	std	Y+6, r25	; 0x06
    1db4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1db6:	8d 81       	ldd	r24, Y+5	; 0x05
    1db8:	9e 81       	ldd	r25, Y+6	; 0x06
    1dba:	00 97       	sbiw	r24, 0x00	; 0
    1dbc:	69 f7       	brne	.-38     	; 0x1d98 <LCD_inerSendData+0x2ba>
    1dbe:	14 c0       	rjmp	.+40     	; 0x1de8 <LCD_inerSendData+0x30a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dc0:	6f 81       	ldd	r22, Y+7	; 0x07
    1dc2:	78 85       	ldd	r23, Y+8	; 0x08
    1dc4:	89 85       	ldd	r24, Y+9	; 0x09
    1dc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dc8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dcc:	dc 01       	movw	r26, r24
    1dce:	cb 01       	movw	r24, r22
    1dd0:	9e 83       	std	Y+6, r25	; 0x06
    1dd2:	8d 83       	std	Y+5, r24	; 0x05
    1dd4:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd6:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd8:	9a 83       	std	Y+2, r25	; 0x02
    1dda:	89 83       	std	Y+1, r24	; 0x01
    1ddc:	89 81       	ldd	r24, Y+1	; 0x01
    1dde:	9a 81       	ldd	r25, Y+2	; 0x02
    1de0:	01 97       	sbiw	r24, 0x01	; 1
    1de2:	f1 f7       	brne	.-4      	; 0x1de0 <LCD_inerSendData+0x302>
    1de4:	9a 83       	std	Y+2, r25	; 0x02
    1de6:	89 83       	std	Y+1, r24	; 0x01


	_delay_ms(10);
	return local_enuErrorState;
    1de8:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    1dea:	6e 96       	adiw	r28, 0x1e	; 30
    1dec:	0f b6       	in	r0, 0x3f	; 63
    1dee:	f8 94       	cli
    1df0:	de bf       	out	0x3e, r29	; 62
    1df2:	0f be       	out	0x3f, r0	; 63
    1df4:	cd bf       	out	0x3d, r28	; 61
    1df6:	cf 91       	pop	r28
    1df8:	df 91       	pop	r29
    1dfa:	08 95       	ret

00001dfc <LCD_INIT_SendCommend>:


static inline ES_ERROR LCD_INIT_SendCommend(u8 Copy_u8Command)
{      ES_ERROR local_enuErrorState=ES_OK;
    1dfc:	df 93       	push	r29
    1dfe:	cf 93       	push	r28
    1e00:	cd b7       	in	r28, 0x3d	; 61
    1e02:	de b7       	in	r29, 0x3e	; 62
    1e04:	60 97       	sbiw	r28, 0x10	; 16
    1e06:	0f b6       	in	r0, 0x3f	; 63
    1e08:	f8 94       	cli
    1e0a:	de bf       	out	0x3e, r29	; 62
    1e0c:	0f be       	out	0x3f, r0	; 63
    1e0e:	cd bf       	out	0x3d, r28	; 61
    1e10:	88 8b       	std	Y+16, r24	; 0x10
    1e12:	1f 86       	std	Y+15, r1	; 0x0f
	// set rs as command
local_enuErrorState|=DIO_enuSetpinval(RS_PORT , RS_PIN , DIO_u8LOW);
    1e14:	81 e0       	ldi	r24, 0x01	; 1
    1e16:	62 e0       	ldi	r22, 0x02	; 2
    1e18:	40 e0       	ldi	r20, 0x00	; 0
    1e1a:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_enuSetpinval>
    1e1e:	98 2f       	mov	r25, r24
    1e20:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e22:	89 2b       	or	r24, r25
    1e24:	8f 87       	std	Y+15, r24	; 0x0f
	// set rw as write operation , EN is low
local_enuErrorState|=DIO_enuSetpinval(RW_PORT , RW_PIN , DIO_u8LOW);
    1e26:	81 e0       	ldi	r24, 0x01	; 1
    1e28:	61 e0       	ldi	r22, 0x01	; 1
    1e2a:	40 e0       	ldi	r20, 0x00	; 0
    1e2c:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_enuSetpinval>
    1e30:	98 2f       	mov	r25, r24
    1e32:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e34:	89 2b       	or	r24, r25
    1e36:	8f 87       	std	Y+15, r24	; 0x0f
local_enuErrorState|=DIO_enuSetpinval(EN_PORT , EN_PIN , DIO_u8LOW);
    1e38:	81 e0       	ldi	r24, 0x01	; 1
    1e3a:	60 e0       	ldi	r22, 0x00	; 0
    1e3c:	40 e0       	ldi	r20, 0x00	; 0
    1e3e:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_enuSetpinval>
    1e42:	98 2f       	mov	r25, r24
    1e44:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e46:	89 2b       	or	r24, r25
    1e48:	8f 87       	std	Y+15, r24	; 0x0f
	//write Data
local_enuErrorState|=DIO_enuSetpinval(D7_PORT , D7_PIN , ((Copy_u8Command>>7)&1));
    1e4a:	88 89       	ldd	r24, Y+16	; 0x10
    1e4c:	98 2f       	mov	r25, r24
    1e4e:	99 1f       	adc	r25, r25
    1e50:	99 27       	eor	r25, r25
    1e52:	99 1f       	adc	r25, r25
    1e54:	80 e0       	ldi	r24, 0x00	; 0
    1e56:	60 e0       	ldi	r22, 0x00	; 0
    1e58:	49 2f       	mov	r20, r25
    1e5a:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_enuSetpinval>
    1e5e:	98 2f       	mov	r25, r24
    1e60:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e62:	89 2b       	or	r24, r25
    1e64:	8f 87       	std	Y+15, r24	; 0x0f
local_enuErrorState|=DIO_enuSetpinval(D6_PORT , D6_PIN , ((Copy_u8Command>>6)&1));
    1e66:	88 89       	ldd	r24, Y+16	; 0x10
    1e68:	82 95       	swap	r24
    1e6a:	86 95       	lsr	r24
    1e6c:	86 95       	lsr	r24
    1e6e:	83 70       	andi	r24, 0x03	; 3
    1e70:	98 2f       	mov	r25, r24
    1e72:	91 70       	andi	r25, 0x01	; 1
    1e74:	80 e0       	ldi	r24, 0x00	; 0
    1e76:	61 e0       	ldi	r22, 0x01	; 1
    1e78:	49 2f       	mov	r20, r25
    1e7a:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_enuSetpinval>
    1e7e:	98 2f       	mov	r25, r24
    1e80:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e82:	89 2b       	or	r24, r25
    1e84:	8f 87       	std	Y+15, r24	; 0x0f
local_enuErrorState|=DIO_enuSetpinval(D5_PORT , D5_PIN , ((Copy_u8Command>>5)&1));
    1e86:	88 89       	ldd	r24, Y+16	; 0x10
    1e88:	82 95       	swap	r24
    1e8a:	86 95       	lsr	r24
    1e8c:	87 70       	andi	r24, 0x07	; 7
    1e8e:	98 2f       	mov	r25, r24
    1e90:	91 70       	andi	r25, 0x01	; 1
    1e92:	80 e0       	ldi	r24, 0x00	; 0
    1e94:	62 e0       	ldi	r22, 0x02	; 2
    1e96:	49 2f       	mov	r20, r25
    1e98:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_enuSetpinval>
    1e9c:	98 2f       	mov	r25, r24
    1e9e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ea0:	89 2b       	or	r24, r25
    1ea2:	8f 87       	std	Y+15, r24	; 0x0f
local_enuErrorState|=DIO_enuSetpinval(D4_PORT , D4_PIN , ((Copy_u8Command>>4)&1));
    1ea4:	88 89       	ldd	r24, Y+16	; 0x10
    1ea6:	82 95       	swap	r24
    1ea8:	8f 70       	andi	r24, 0x0F	; 15
    1eaa:	98 2f       	mov	r25, r24
    1eac:	91 70       	andi	r25, 0x01	; 1
    1eae:	80 e0       	ldi	r24, 0x00	; 0
    1eb0:	63 e0       	ldi	r22, 0x03	; 3
    1eb2:	49 2f       	mov	r20, r25
    1eb4:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_enuSetpinval>
    1eb8:	98 2f       	mov	r25, r24
    1eba:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ebc:	89 2b       	or	r24, r25
    1ebe:	8f 87       	std	Y+15, r24	; 0x0f
#if LCD_MODE == EIGHT_BIT
local_enuErrorState|=DIO_enuSetpinval(D3_PORT , D3_PIN , ((Copy_u8Command>>3)&1));
    1ec0:	88 89       	ldd	r24, Y+16	; 0x10
    1ec2:	86 95       	lsr	r24
    1ec4:	86 95       	lsr	r24
    1ec6:	86 95       	lsr	r24
    1ec8:	98 2f       	mov	r25, r24
    1eca:	91 70       	andi	r25, 0x01	; 1
    1ecc:	80 e0       	ldi	r24, 0x00	; 0
    1ece:	64 e0       	ldi	r22, 0x04	; 4
    1ed0:	49 2f       	mov	r20, r25
    1ed2:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_enuSetpinval>
    1ed6:	98 2f       	mov	r25, r24
    1ed8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1eda:	89 2b       	or	r24, r25
    1edc:	8f 87       	std	Y+15, r24	; 0x0f
local_enuErrorState|=DIO_enuSetpinval(D2_PORT , D2_PIN , ((Copy_u8Command>>2)&1));
    1ede:	88 89       	ldd	r24, Y+16	; 0x10
    1ee0:	86 95       	lsr	r24
    1ee2:	86 95       	lsr	r24
    1ee4:	98 2f       	mov	r25, r24
    1ee6:	91 70       	andi	r25, 0x01	; 1
    1ee8:	80 e0       	ldi	r24, 0x00	; 0
    1eea:	65 e0       	ldi	r22, 0x05	; 5
    1eec:	49 2f       	mov	r20, r25
    1eee:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_enuSetpinval>
    1ef2:	98 2f       	mov	r25, r24
    1ef4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ef6:	89 2b       	or	r24, r25
    1ef8:	8f 87       	std	Y+15, r24	; 0x0f
local_enuErrorState|=DIO_enuSetpinval(D1_PORT , D1_PIN , ((Copy_u8Command>>1)&1));
    1efa:	88 89       	ldd	r24, Y+16	; 0x10
    1efc:	86 95       	lsr	r24
    1efe:	98 2f       	mov	r25, r24
    1f00:	91 70       	andi	r25, 0x01	; 1
    1f02:	80 e0       	ldi	r24, 0x00	; 0
    1f04:	66 e0       	ldi	r22, 0x06	; 6
    1f06:	49 2f       	mov	r20, r25
    1f08:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_enuSetpinval>
    1f0c:	98 2f       	mov	r25, r24
    1f0e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f10:	89 2b       	or	r24, r25
    1f12:	8f 87       	std	Y+15, r24	; 0x0f
local_enuErrorState|=DIO_enuSetpinval(D0_PORT , D0_PIN , ((Copy_u8Command>>0)&1));
    1f14:	88 89       	ldd	r24, Y+16	; 0x10
    1f16:	98 2f       	mov	r25, r24
    1f18:	91 70       	andi	r25, 0x01	; 1
    1f1a:	80 e0       	ldi	r24, 0x00	; 0
    1f1c:	67 e0       	ldi	r22, 0x07	; 7
    1f1e:	49 2f       	mov	r20, r25
    1f20:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_enuSetpinval>
    1f24:	98 2f       	mov	r25, r24
    1f26:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f28:	89 2b       	or	r24, r25
    1f2a:	8f 87       	std	Y+15, r24	; 0x0f
#elif  LCD_MODE == FOUR_BIT

#endif
	// Enable latch
local_enuErrorState|=DIO_enuSetpinval(EN_PORT , EN_PIN , DIO_u8HIGH);
    1f2c:	81 e0       	ldi	r24, 0x01	; 1
    1f2e:	60 e0       	ldi	r22, 0x00	; 0
    1f30:	41 e0       	ldi	r20, 0x01	; 1
    1f32:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_enuSetpinval>
    1f36:	98 2f       	mov	r25, r24
    1f38:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f3a:	89 2b       	or	r24, r25
    1f3c:	8f 87       	std	Y+15, r24	; 0x0f
    1f3e:	80 e0       	ldi	r24, 0x00	; 0
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	a0 e2       	ldi	r26, 0x20	; 32
    1f44:	b1 e4       	ldi	r27, 0x41	; 65
    1f46:	8b 87       	std	Y+11, r24	; 0x0b
    1f48:	9c 87       	std	Y+12, r25	; 0x0c
    1f4a:	ad 87       	std	Y+13, r26	; 0x0d
    1f4c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f50:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f52:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f54:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f56:	20 e0       	ldi	r18, 0x00	; 0
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	4a e7       	ldi	r20, 0x7A	; 122
    1f5c:	53 e4       	ldi	r21, 0x43	; 67
    1f5e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f62:	dc 01       	movw	r26, r24
    1f64:	cb 01       	movw	r24, r22
    1f66:	8f 83       	std	Y+7, r24	; 0x07
    1f68:	98 87       	std	Y+8, r25	; 0x08
    1f6a:	a9 87       	std	Y+9, r26	; 0x09
    1f6c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f6e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f70:	78 85       	ldd	r23, Y+8	; 0x08
    1f72:	89 85       	ldd	r24, Y+9	; 0x09
    1f74:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f76:	20 e0       	ldi	r18, 0x00	; 0
    1f78:	30 e0       	ldi	r19, 0x00	; 0
    1f7a:	40 e8       	ldi	r20, 0x80	; 128
    1f7c:	5f e3       	ldi	r21, 0x3F	; 63
    1f7e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f82:	88 23       	and	r24, r24
    1f84:	2c f4       	brge	.+10     	; 0x1f90 <LCD_INIT_SendCommend+0x194>
		__ticks = 1;
    1f86:	81 e0       	ldi	r24, 0x01	; 1
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	9e 83       	std	Y+6, r25	; 0x06
    1f8c:	8d 83       	std	Y+5, r24	; 0x05
    1f8e:	3f c0       	rjmp	.+126    	; 0x200e <LCD_INIT_SendCommend+0x212>
	else if (__tmp > 65535)
    1f90:	6f 81       	ldd	r22, Y+7	; 0x07
    1f92:	78 85       	ldd	r23, Y+8	; 0x08
    1f94:	89 85       	ldd	r24, Y+9	; 0x09
    1f96:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f98:	20 e0       	ldi	r18, 0x00	; 0
    1f9a:	3f ef       	ldi	r19, 0xFF	; 255
    1f9c:	4f e7       	ldi	r20, 0x7F	; 127
    1f9e:	57 e4       	ldi	r21, 0x47	; 71
    1fa0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1fa4:	18 16       	cp	r1, r24
    1fa6:	4c f5       	brge	.+82     	; 0x1ffa <LCD_INIT_SendCommend+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fa8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1faa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fac:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fae:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fb0:	20 e0       	ldi	r18, 0x00	; 0
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	40 e2       	ldi	r20, 0x20	; 32
    1fb6:	51 e4       	ldi	r21, 0x41	; 65
    1fb8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fbc:	dc 01       	movw	r26, r24
    1fbe:	cb 01       	movw	r24, r22
    1fc0:	bc 01       	movw	r22, r24
    1fc2:	cd 01       	movw	r24, r26
    1fc4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fc8:	dc 01       	movw	r26, r24
    1fca:	cb 01       	movw	r24, r22
    1fcc:	9e 83       	std	Y+6, r25	; 0x06
    1fce:	8d 83       	std	Y+5, r24	; 0x05
    1fd0:	0f c0       	rjmp	.+30     	; 0x1ff0 <LCD_INIT_SendCommend+0x1f4>
    1fd2:	89 e1       	ldi	r24, 0x19	; 25
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	9c 83       	std	Y+4, r25	; 0x04
    1fd8:	8b 83       	std	Y+3, r24	; 0x03
    1fda:	8b 81       	ldd	r24, Y+3	; 0x03
    1fdc:	9c 81       	ldd	r25, Y+4	; 0x04
    1fde:	01 97       	sbiw	r24, 0x01	; 1
    1fe0:	f1 f7       	brne	.-4      	; 0x1fde <LCD_INIT_SendCommend+0x1e2>
    1fe2:	9c 83       	std	Y+4, r25	; 0x04
    1fe4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fe6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe8:	9e 81       	ldd	r25, Y+6	; 0x06
    1fea:	01 97       	sbiw	r24, 0x01	; 1
    1fec:	9e 83       	std	Y+6, r25	; 0x06
    1fee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ff0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff4:	00 97       	sbiw	r24, 0x00	; 0
    1ff6:	69 f7       	brne	.-38     	; 0x1fd2 <LCD_INIT_SendCommend+0x1d6>
    1ff8:	14 c0       	rjmp	.+40     	; 0x2022 <LCD_INIT_SendCommend+0x226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ffa:	6f 81       	ldd	r22, Y+7	; 0x07
    1ffc:	78 85       	ldd	r23, Y+8	; 0x08
    1ffe:	89 85       	ldd	r24, Y+9	; 0x09
    2000:	9a 85       	ldd	r25, Y+10	; 0x0a
    2002:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2006:	dc 01       	movw	r26, r24
    2008:	cb 01       	movw	r24, r22
    200a:	9e 83       	std	Y+6, r25	; 0x06
    200c:	8d 83       	std	Y+5, r24	; 0x05
    200e:	8d 81       	ldd	r24, Y+5	; 0x05
    2010:	9e 81       	ldd	r25, Y+6	; 0x06
    2012:	9a 83       	std	Y+2, r25	; 0x02
    2014:	89 83       	std	Y+1, r24	; 0x01
    2016:	89 81       	ldd	r24, Y+1	; 0x01
    2018:	9a 81       	ldd	r25, Y+2	; 0x02
    201a:	01 97       	sbiw	r24, 0x01	; 1
    201c:	f1 f7       	brne	.-4      	; 0x201a <LCD_INIT_SendCommend+0x21e>
    201e:	9a 83       	std	Y+2, r25	; 0x02
    2020:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	local_enuErrorState|=DIO_enuSetpinval(EN_PORT , EN_PIN , DIO_u8LOW);
    2022:	81 e0       	ldi	r24, 0x01	; 1
    2024:	60 e0       	ldi	r22, 0x00	; 0
    2026:	40 e0       	ldi	r20, 0x00	; 0
    2028:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_enuSetpinval>
    202c:	98 2f       	mov	r25, r24
    202e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2030:	89 2b       	or	r24, r25
    2032:	8f 87       	std	Y+15, r24	; 0x0f
return local_enuErrorState;
    2034:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    2036:	60 96       	adiw	r28, 0x10	; 16
    2038:	0f b6       	in	r0, 0x3f	; 63
    203a:	f8 94       	cli
    203c:	de bf       	out	0x3e, r29	; 62
    203e:	0f be       	out	0x3f, r0	; 63
    2040:	cd bf       	out	0x3d, r28	; 61
    2042:	cf 91       	pop	r28
    2044:	df 91       	pop	r29
    2046:	08 95       	ret

00002048 <LCD_enuDisplayString>:


ES_ERROR LCD_enuDisplayString(u8 *pcopy_u8string){
    2048:	df 93       	push	r29
    204a:	cf 93       	push	r28
    204c:	00 d0       	rcall	.+0      	; 0x204e <LCD_enuDisplayString+0x6>
    204e:	0f 92       	push	r0
    2050:	cd b7       	in	r28, 0x3d	; 61
    2052:	de b7       	in	r29, 0x3e	; 62
    2054:	9b 83       	std	Y+3, r25	; 0x03
    2056:	8a 83       	std	Y+2, r24	; 0x02

	ES_ERROR local_enuErrorState = ES_OK;
    2058:	19 82       	std	Y+1, r1	; 0x01

	if(pcopy_u8string!=NULL)
    205a:	8a 81       	ldd	r24, Y+2	; 0x02
    205c:	9b 81       	ldd	r25, Y+3	; 0x03
    205e:	00 97       	sbiw	r24, 0x00	; 0
    2060:	d1 f0       	breq	.+52     	; 0x2096 <LCD_enuDisplayString+0x4e>
    2062:	13 c0       	rjmp	.+38     	; 0x208a <LCD_enuDisplayString+0x42>
	{

		while((*pcopy_u8string)!='\0'){

		local_enuErrorState|=	DIO_enuSetpinval(RS_PORT , RS_PIN , DIO_u8HIGH);
    2064:	81 e0       	ldi	r24, 0x01	; 1
    2066:	62 e0       	ldi	r22, 0x02	; 2
    2068:	41 e0       	ldi	r20, 0x01	; 1
    206a:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_enuSetpinval>
    206e:	98 2f       	mov	r25, r24
    2070:	89 81       	ldd	r24, Y+1	; 0x01
    2072:	89 2b       	or	r24, r25
    2074:	89 83       	std	Y+1, r24	; 0x01

				LCD_inerSendData(*pcopy_u8string);
    2076:	ea 81       	ldd	r30, Y+2	; 0x02
    2078:	fb 81       	ldd	r31, Y+3	; 0x03
    207a:	80 81       	ld	r24, Z
    207c:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <LCD_inerSendData>
				pcopy_u8string++;
    2080:	8a 81       	ldd	r24, Y+2	; 0x02
    2082:	9b 81       	ldd	r25, Y+3	; 0x03
    2084:	01 96       	adiw	r24, 0x01	; 1
    2086:	9b 83       	std	Y+3, r25	; 0x03
    2088:	8a 83       	std	Y+2, r24	; 0x02
	ES_ERROR local_enuErrorState = ES_OK;

	if(pcopy_u8string!=NULL)
	{

		while((*pcopy_u8string)!='\0'){
    208a:	ea 81       	ldd	r30, Y+2	; 0x02
    208c:	fb 81       	ldd	r31, Y+3	; 0x03
    208e:	80 81       	ld	r24, Z
    2090:	88 23       	and	r24, r24
    2092:	41 f7       	brne	.-48     	; 0x2064 <LCD_enuDisplayString+0x1c>
    2094:	02 c0       	rjmp	.+4      	; 0x209a <LCD_enuDisplayString+0x52>
		}

	}
	else
	{
		local_enuErrorState = ES_NULL_POINTER;
    2096:	82 e0       	ldi	r24, 0x02	; 2
    2098:	89 83       	std	Y+1, r24	; 0x01
	}


		return local_enuErrorState;
    209a:	89 81       	ldd	r24, Y+1	; 0x01
}
    209c:	0f 90       	pop	r0
    209e:	0f 90       	pop	r0
    20a0:	0f 90       	pop	r0
    20a2:	cf 91       	pop	r28
    20a4:	df 91       	pop	r29
    20a6:	08 95       	ret

000020a8 <LCD_enuDisplayNum>:

/////////////////////////////////////////////////////////////////////////////////////////


ES_ERROR LCD_enuDisplayNum(u32 copyu32_num)
{      ES_ERROR local_u8errorState=ES_OK;
    20a8:	0f 93       	push	r16
    20aa:	1f 93       	push	r17
    20ac:	df 93       	push	r29
    20ae:	cf 93       	push	r28
    20b0:	cd b7       	in	r28, 0x3d	; 61
    20b2:	de b7       	in	r29, 0x3e	; 62
    20b4:	61 97       	sbiw	r28, 0x11	; 17
    20b6:	0f b6       	in	r0, 0x3f	; 63
    20b8:	f8 94       	cli
    20ba:	de bf       	out	0x3e, r29	; 62
    20bc:	0f be       	out	0x3f, r0	; 63
    20be:	cd bf       	out	0x3d, r28	; 61
    20c0:	6e 87       	std	Y+14, r22	; 0x0e
    20c2:	7f 87       	std	Y+15, r23	; 0x0f
    20c4:	88 8b       	std	Y+16, r24	; 0x10
    20c6:	99 8b       	std	Y+17, r25	; 0x11
    20c8:	1b 82       	std	Y+3, r1	; 0x03
	 u8 local_u8AnumArr[10],local_u8NumIter=0,local_u8DisIter=0;
    20ca:	1a 82       	std	Y+2, r1	; 0x02
    20cc:	19 82       	std	Y+1, r1	; 0x01
		   if(copyu32_num == 0)
    20ce:	8e 85       	ldd	r24, Y+14	; 0x0e
    20d0:	9f 85       	ldd	r25, Y+15	; 0x0f
    20d2:	a8 89       	ldd	r26, Y+16	; 0x10
    20d4:	b9 89       	ldd	r27, Y+17	; 0x11
    20d6:	00 97       	sbiw	r24, 0x00	; 0
    20d8:	a1 05       	cpc	r26, r1
    20da:	b1 05       	cpc	r27, r1
    20dc:	a9 f5       	brne	.+106    	; 0x2148 <LCD_enuDisplayNum+0xa0>
		   {
			   local_u8errorState|=  LCD_enuDisplayChar('0');
    20de:	80 e3       	ldi	r24, 0x30	; 48
    20e0:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <LCD_enuDisplayChar>
    20e4:	9b 81       	ldd	r25, Y+3	; 0x03
    20e6:	89 2b       	or	r24, r25
    20e8:	8b 83       	std	Y+3, r24	; 0x03
    20ea:	51 c0       	rjmp	.+162    	; 0x218e <LCD_enuDisplayNum+0xe6>
		   }
		   else
		   {
			   while(copyu32_num)
			   {
				   local_u8AnumArr[local_u8NumIter]=copyu32_num%10+'0';
    20ec:	8a 81       	ldd	r24, Y+2	; 0x02
    20ee:	08 2f       	mov	r16, r24
    20f0:	10 e0       	ldi	r17, 0x00	; 0
    20f2:	8e 85       	ldd	r24, Y+14	; 0x0e
    20f4:	9f 85       	ldd	r25, Y+15	; 0x0f
    20f6:	a8 89       	ldd	r26, Y+16	; 0x10
    20f8:	b9 89       	ldd	r27, Y+17	; 0x11
    20fa:	2a e0       	ldi	r18, 0x0A	; 10
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	40 e0       	ldi	r20, 0x00	; 0
    2100:	50 e0       	ldi	r21, 0x00	; 0
    2102:	bc 01       	movw	r22, r24
    2104:	cd 01       	movw	r24, r26
    2106:	0e 94 a0 19 	call	0x3340	; 0x3340 <__udivmodsi4>
    210a:	dc 01       	movw	r26, r24
    210c:	cb 01       	movw	r24, r22
    210e:	28 2f       	mov	r18, r24
    2110:	20 5d       	subi	r18, 0xD0	; 208
    2112:	ce 01       	movw	r24, r28
    2114:	04 96       	adiw	r24, 0x04	; 4
    2116:	fc 01       	movw	r30, r24
    2118:	e0 0f       	add	r30, r16
    211a:	f1 1f       	adc	r31, r17
    211c:	20 83       	st	Z, r18
				   copyu32_num/=10;
    211e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2120:	9f 85       	ldd	r25, Y+15	; 0x0f
    2122:	a8 89       	ldd	r26, Y+16	; 0x10
    2124:	b9 89       	ldd	r27, Y+17	; 0x11
    2126:	2a e0       	ldi	r18, 0x0A	; 10
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	40 e0       	ldi	r20, 0x00	; 0
    212c:	50 e0       	ldi	r21, 0x00	; 0
    212e:	bc 01       	movw	r22, r24
    2130:	cd 01       	movw	r24, r26
    2132:	0e 94 a0 19 	call	0x3340	; 0x3340 <__udivmodsi4>
    2136:	da 01       	movw	r26, r20
    2138:	c9 01       	movw	r24, r18
    213a:	8e 87       	std	Y+14, r24	; 0x0e
    213c:	9f 87       	std	Y+15, r25	; 0x0f
    213e:	a8 8b       	std	Y+16, r26	; 0x10
    2140:	b9 8b       	std	Y+17, r27	; 0x11
					local_u8NumIter++;
    2142:	8a 81       	ldd	r24, Y+2	; 0x02
    2144:	8f 5f       	subi	r24, 0xFF	; 255
    2146:	8a 83       	std	Y+2, r24	; 0x02
		   {
			   local_u8errorState|=  LCD_enuDisplayChar('0');
		   }
		   else
		   {
			   while(copyu32_num)
    2148:	8e 85       	ldd	r24, Y+14	; 0x0e
    214a:	9f 85       	ldd	r25, Y+15	; 0x0f
    214c:	a8 89       	ldd	r26, Y+16	; 0x10
    214e:	b9 89       	ldd	r27, Y+17	; 0x11
    2150:	00 97       	sbiw	r24, 0x00	; 0
    2152:	a1 05       	cpc	r26, r1
    2154:	b1 05       	cpc	r27, r1
    2156:	51 f6       	brne	.-108    	; 0x20ec <LCD_enuDisplayNum+0x44>
			   {
				   local_u8AnumArr[local_u8NumIter]=copyu32_num%10+'0';
				   copyu32_num/=10;
					local_u8NumIter++;
			   }
			   for(local_u8DisIter=local_u8NumIter;local_u8DisIter>0;local_u8DisIter--)
    2158:	8a 81       	ldd	r24, Y+2	; 0x02
    215a:	89 83       	std	Y+1, r24	; 0x01
    215c:	15 c0       	rjmp	.+42     	; 0x2188 <LCD_enuDisplayNum+0xe0>
			   {
				   local_u8errorState|= LCD_enuDisplayChar(local_u8AnumArr[local_u8DisIter-1]);
    215e:	89 81       	ldd	r24, Y+1	; 0x01
    2160:	88 2f       	mov	r24, r24
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	9c 01       	movw	r18, r24
    2166:	21 50       	subi	r18, 0x01	; 1
    2168:	30 40       	sbci	r19, 0x00	; 0
    216a:	ce 01       	movw	r24, r28
    216c:	04 96       	adiw	r24, 0x04	; 4
    216e:	fc 01       	movw	r30, r24
    2170:	e2 0f       	add	r30, r18
    2172:	f3 1f       	adc	r31, r19
    2174:	80 81       	ld	r24, Z
    2176:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <LCD_enuDisplayChar>
    217a:	98 2f       	mov	r25, r24
    217c:	8b 81       	ldd	r24, Y+3	; 0x03
    217e:	89 2b       	or	r24, r25
    2180:	8b 83       	std	Y+3, r24	; 0x03
			   {
				   local_u8AnumArr[local_u8NumIter]=copyu32_num%10+'0';
				   copyu32_num/=10;
					local_u8NumIter++;
			   }
			   for(local_u8DisIter=local_u8NumIter;local_u8DisIter>0;local_u8DisIter--)
    2182:	89 81       	ldd	r24, Y+1	; 0x01
    2184:	81 50       	subi	r24, 0x01	; 1
    2186:	89 83       	std	Y+1, r24	; 0x01
    2188:	89 81       	ldd	r24, Y+1	; 0x01
    218a:	88 23       	and	r24, r24
    218c:	41 f7       	brne	.-48     	; 0x215e <LCD_enuDisplayNum+0xb6>
			   {
				   local_u8errorState|= LCD_enuDisplayChar(local_u8AnumArr[local_u8DisIter-1]);
			   }
		   }
		   return  local_u8errorState;
    218e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2190:	61 96       	adiw	r28, 0x11	; 17
    2192:	0f b6       	in	r0, 0x3f	; 63
    2194:	f8 94       	cli
    2196:	de bf       	out	0x3e, r29	; 62
    2198:	0f be       	out	0x3f, r0	; 63
    219a:	cd bf       	out	0x3d, r28	; 61
    219c:	cf 91       	pop	r28
    219e:	df 91       	pop	r29
    21a0:	1f 91       	pop	r17
    21a2:	0f 91       	pop	r16
    21a4:	08 95       	ret

000021a6 <LCD_setCusor>:




 void LCD_setCusor(u8 copyu8_row,u8 copy_u8_column)
{      copy_u8_column--;
    21a6:	df 93       	push	r29
    21a8:	cf 93       	push	r28
    21aa:	00 d0       	rcall	.+0      	; 0x21ac <LCD_setCusor+0x6>
    21ac:	00 d0       	rcall	.+0      	; 0x21ae <LCD_setCusor+0x8>
    21ae:	cd b7       	in	r28, 0x3d	; 61
    21b0:	de b7       	in	r29, 0x3e	; 62
    21b2:	89 83       	std	Y+1, r24	; 0x01
    21b4:	6a 83       	std	Y+2, r22	; 0x02
    21b6:	8a 81       	ldd	r24, Y+2	; 0x02
    21b8:	81 50       	subi	r24, 0x01	; 1
    21ba:	8a 83       	std	Y+2, r24	; 0x02

		switch(copyu8_row){
    21bc:	89 81       	ldd	r24, Y+1	; 0x01
    21be:	28 2f       	mov	r18, r24
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	3c 83       	std	Y+4, r19	; 0x04
    21c4:	2b 83       	std	Y+3, r18	; 0x03
    21c6:	8b 81       	ldd	r24, Y+3	; 0x03
    21c8:	9c 81       	ldd	r25, Y+4	; 0x04
    21ca:	81 30       	cpi	r24, 0x01	; 1
    21cc:	91 05       	cpc	r25, r1
    21ce:	31 f0       	breq	.+12     	; 0x21dc <LCD_setCusor+0x36>
    21d0:	2b 81       	ldd	r18, Y+3	; 0x03
    21d2:	3c 81       	ldd	r19, Y+4	; 0x04
    21d4:	22 30       	cpi	r18, 0x02	; 2
    21d6:	31 05       	cpc	r19, r1
    21d8:	31 f0       	breq	.+12     	; 0x21e6 <LCD_setCusor+0x40>
    21da:	09 c0       	rjmp	.+18     	; 0x21ee <LCD_setCusor+0x48>
		            case ROW1:  LCD_enuSendCommand((0x80 + copy_u8_column)); break;
    21dc:	8a 81       	ldd	r24, Y+2	; 0x02
    21de:	80 58       	subi	r24, 0x80	; 128
    21e0:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <LCD_enuSendCommand>
    21e4:	04 c0       	rjmp	.+8      	; 0x21ee <LCD_setCusor+0x48>
		            case ROW2:  LCD_enuSendCommand((0xc0 +copy_u8_column)); break;
    21e6:	8a 81       	ldd	r24, Y+2	; 0x02
    21e8:	80 54       	subi	r24, 0x40	; 64
    21ea:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <LCD_enuSendCommand>
		            default:;
		        }


}
    21ee:	0f 90       	pop	r0
    21f0:	0f 90       	pop	r0
    21f2:	0f 90       	pop	r0
    21f4:	0f 90       	pop	r0
    21f6:	cf 91       	pop	r28
    21f8:	df 91       	pop	r29
    21fa:	08 95       	ret

000021fc <LCD_enuClear>:

ES_ERROR LCD_enuClear()
{
    21fc:	df 93       	push	r29
    21fe:	cf 93       	push	r28
    2200:	0f 92       	push	r0
    2202:	cd b7       	in	r28, 0x3d	; 61
    2204:	de b7       	in	r29, 0x3e	; 62
	ES_ERROR local_u8errorState=ES_OK;
    2206:	19 82       	std	Y+1, r1	; 0x01
	local_u8errorState|=LCD_enuSendCommand(0x01);
    2208:	81 e0       	ldi	r24, 0x01	; 1
    220a:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <LCD_enuSendCommand>
    220e:	98 2f       	mov	r25, r24
    2210:	89 81       	ldd	r24, Y+1	; 0x01
    2212:	89 2b       	or	r24, r25
    2214:	89 83       	std	Y+1, r24	; 0x01

return local_u8errorState;
    2216:	89 81       	ldd	r24, Y+1	; 0x01

}
    2218:	0f 90       	pop	r0
    221a:	cf 91       	pop	r28
    221c:	df 91       	pop	r29
    221e:	08 95       	ret

00002220 <LCD_enuDisplayCharPOS>:





ES_ERROR LCD_enuDisplayCharPOS(u8 Copy_u8Data,u8 copyu8_row,u8 copy_u8_column){
    2220:	df 93       	push	r29
    2222:	cf 93       	push	r28
    2224:	00 d0       	rcall	.+0      	; 0x2226 <LCD_enuDisplayCharPOS+0x6>
    2226:	0f 92       	push	r0
    2228:	cd b7       	in	r28, 0x3d	; 61
    222a:	de b7       	in	r29, 0x3e	; 62
    222c:	89 83       	std	Y+1, r24	; 0x01
    222e:	6a 83       	std	Y+2, r22	; 0x02
    2230:	4b 83       	std	Y+3, r20	; 0x03

	LCD_setCusor(copyu8_row, copy_u8_column);
    2232:	8a 81       	ldd	r24, Y+2	; 0x02
    2234:	6b 81       	ldd	r22, Y+3	; 0x03
    2236:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <LCD_setCusor>
	LCD_enuDisplayChar(Copy_u8Data);
    223a:	89 81       	ldd	r24, Y+1	; 0x01
    223c:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <LCD_enuDisplayChar>
return ES_OK;
    2240:	80 e0       	ldi	r24, 0x00	; 0
}
    2242:	0f 90       	pop	r0
    2244:	0f 90       	pop	r0
    2246:	0f 90       	pop	r0
    2248:	cf 91       	pop	r28
    224a:	df 91       	pop	r29
    224c:	08 95       	ret

0000224e <LCD_enuDisplayStringPOS>:

ES_ERROR LCD_enuDisplayStringPOS(u8 *pcopy_u8string,u8 copyu8_row,u8 copy_u8_column){
    224e:	df 93       	push	r29
    2250:	cf 93       	push	r28
    2252:	00 d0       	rcall	.+0      	; 0x2254 <LCD_enuDisplayStringPOS+0x6>
    2254:	00 d0       	rcall	.+0      	; 0x2256 <LCD_enuDisplayStringPOS+0x8>
    2256:	cd b7       	in	r28, 0x3d	; 61
    2258:	de b7       	in	r29, 0x3e	; 62
    225a:	9a 83       	std	Y+2, r25	; 0x02
    225c:	89 83       	std	Y+1, r24	; 0x01
    225e:	6b 83       	std	Y+3, r22	; 0x03
    2260:	4c 83       	std	Y+4, r20	; 0x04
	LCD_setCusor(copyu8_row, copy_u8_column);
    2262:	8b 81       	ldd	r24, Y+3	; 0x03
    2264:	6c 81       	ldd	r22, Y+4	; 0x04
    2266:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <LCD_setCusor>
	LCD_enuDisplayString(pcopy_u8string);
    226a:	89 81       	ldd	r24, Y+1	; 0x01
    226c:	9a 81       	ldd	r25, Y+2	; 0x02
    226e:	0e 94 24 10 	call	0x2048	; 0x2048 <LCD_enuDisplayString>
	return ES_OK;
    2272:	80 e0       	ldi	r24, 0x00	; 0
}
    2274:	0f 90       	pop	r0
    2276:	0f 90       	pop	r0
    2278:	0f 90       	pop	r0
    227a:	0f 90       	pop	r0
    227c:	cf 91       	pop	r28
    227e:	df 91       	pop	r29
    2280:	08 95       	ret

00002282 <LCD_enuDisplayNumPOS>:

ES_ERROR LCD_enuDisplayNumPOS(u32 copyu32_num,u8 copyu8_row,u8 copy_u8_column){
    2282:	df 93       	push	r29
    2284:	cf 93       	push	r28
    2286:	00 d0       	rcall	.+0      	; 0x2288 <LCD_enuDisplayNumPOS+0x6>
    2288:	00 d0       	rcall	.+0      	; 0x228a <LCD_enuDisplayNumPOS+0x8>
    228a:	00 d0       	rcall	.+0      	; 0x228c <LCD_enuDisplayNumPOS+0xa>
    228c:	cd b7       	in	r28, 0x3d	; 61
    228e:	de b7       	in	r29, 0x3e	; 62
    2290:	69 83       	std	Y+1, r22	; 0x01
    2292:	7a 83       	std	Y+2, r23	; 0x02
    2294:	8b 83       	std	Y+3, r24	; 0x03
    2296:	9c 83       	std	Y+4, r25	; 0x04
    2298:	4d 83       	std	Y+5, r20	; 0x05
    229a:	2e 83       	std	Y+6, r18	; 0x06
	LCD_setCusor(copyu8_row, copy_u8_column);
    229c:	8d 81       	ldd	r24, Y+5	; 0x05
    229e:	6e 81       	ldd	r22, Y+6	; 0x06
    22a0:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <LCD_setCusor>
	LCD_enuDisplayNum(copyu32_num);
    22a4:	89 81       	ldd	r24, Y+1	; 0x01
    22a6:	9a 81       	ldd	r25, Y+2	; 0x02
    22a8:	ab 81       	ldd	r26, Y+3	; 0x03
    22aa:	bc 81       	ldd	r27, Y+4	; 0x04
    22ac:	bc 01       	movw	r22, r24
    22ae:	cd 01       	movw	r24, r26
    22b0:	0e 94 54 10 	call	0x20a8	; 0x20a8 <LCD_enuDisplayNum>
	return ES_OK;
    22b4:	80 e0       	ldi	r24, 0x00	; 0
}
    22b6:	26 96       	adiw	r28, 0x06	; 6
    22b8:	0f b6       	in	r0, 0x3f	; 63
    22ba:	f8 94       	cli
    22bc:	de bf       	out	0x3e, r29	; 62
    22be:	0f be       	out	0x3f, r0	; 63
    22c0:	cd bf       	out	0x3d, r28	; 61
    22c2:	cf 91       	pop	r28
    22c4:	df 91       	pop	r29
    22c6:	08 95       	ret

000022c8 <app>:
#include"DIO_int.h"
#include"KEYPAD_int.h"
#include"LCD_int.h"

void arrToNum(u8*ptr1,u8*ptr2,u8 n1,u8 n2,u8 operation);
void app(){
    22c8:	0f 93       	push	r16
    22ca:	1f 93       	push	r17
    22cc:	df 93       	push	r29
    22ce:	cf 93       	push	r28
    22d0:	cd b7       	in	r28, 0x3d	; 61
    22d2:	de b7       	in	r29, 0x3e	; 62
    22d4:	c6 5c       	subi	r28, 0xC6	; 198
    22d6:	d0 40       	sbci	r29, 0x00	; 0
    22d8:	0f b6       	in	r0, 0x3f	; 63
    22da:	f8 94       	cli
    22dc:	de bf       	out	0x3e, r29	; 62
    22de:	0f be       	out	0x3f, r0	; 63
    22e0:	cd bf       	out	0x3d, r28	; 61
DIO_enuInit();
    22e2:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_enuInit>
LCD_enuInit();
    22e6:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <LCD_enuInit>
 KEYPAD_Init();
    22ea:	0e 94 1a 0a 	call	0x1434	; 0x1434 <KEYPAD_Init>
/*enter pass*/
u8 kp_pass= KP_NO_PRESSED_KEY; u8 pass_nums=0;
    22ee:	fe 01       	movw	r30, r28
    22f0:	ea 57       	subi	r30, 0x7A	; 122
    22f2:	ff 4f       	sbci	r31, 0xFF	; 255
    22f4:	83 e4       	ldi	r24, 0x43	; 67
    22f6:	80 83       	st	Z, r24
    22f8:	fe 01       	movw	r30, r28
    22fa:	eb 57       	subi	r30, 0x7B	; 123
    22fc:	ff 4f       	sbci	r31, 0xFF	; 255
    22fe:	10 82       	st	Z, r1
u8 pass_nums_arr[16];
u8 pass_ch_nums_arr[16];
LCD_enuDisplayStringPOS("enter password",1,2);
    2300:	80 e6       	ldi	r24, 0x60	; 96
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	61 e0       	ldi	r22, 0x01	; 1
    2306:	42 e0       	ldi	r20, 0x02	; 2
    2308:	0e 94 27 11 	call	0x224e	; 0x224e <LCD_enuDisplayStringPOS>

//STAY HERE UNTIL THE KET GET PRESSED
 while(1){
do{
	 kp_pass=KEYPAD_enuGetpressedKey();
    230c:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <KEYPAD_enuGetpressedKey>
    2310:	fe 01       	movw	r30, r28
    2312:	ea 57       	subi	r30, 0x7A	; 122
    2314:	ff 4f       	sbci	r31, 0xFF	; 255
    2316:	80 83       	st	Z, r24
}while(kp_pass== KP_NO_PRESSED_KEY);
    2318:	fe 01       	movw	r30, r28
    231a:	ea 57       	subi	r30, 0x7A	; 122
    231c:	ff 4f       	sbci	r31, 0xFF	; 255
    231e:	80 81       	ld	r24, Z
    2320:	83 34       	cpi	r24, 0x43	; 67
    2322:	a1 f3       	breq	.-24     	; 0x230c <app+0x44>
if(kp_pass=='$') break;
    2324:	fe 01       	movw	r30, r28
    2326:	ea 57       	subi	r30, 0x7A	; 122
    2328:	ff 4f       	sbci	r31, 0xFF	; 255
    232a:	80 81       	ld	r24, Z
    232c:	84 32       	cpi	r24, 0x24	; 36
    232e:	09 f4       	brne	.+2      	; 0x2332 <app+0x6a>
    2330:	9b c1       	rjmp	.+822    	; 0x2668 <app+0x3a0>
pass_nums_arr[pass_nums++]=kp_pass;
    2332:	fe 01       	movw	r30, r28
    2334:	eb 57       	subi	r30, 0x7B	; 123
    2336:	ff 4f       	sbci	r31, 0xFF	; 255
    2338:	80 81       	ld	r24, Z
    233a:	28 2f       	mov	r18, r24
    233c:	30 e0       	ldi	r19, 0x00	; 0
    233e:	ce 01       	movw	r24, r28
    2340:	89 57       	subi	r24, 0x79	; 121
    2342:	9f 4f       	sbci	r25, 0xFF	; 255
    2344:	dc 01       	movw	r26, r24
    2346:	a2 0f       	add	r26, r18
    2348:	b3 1f       	adc	r27, r19
    234a:	fe 01       	movw	r30, r28
    234c:	ea 57       	subi	r30, 0x7A	; 122
    234e:	ff 4f       	sbci	r31, 0xFF	; 255
    2350:	80 81       	ld	r24, Z
    2352:	8c 93       	st	X, r24
    2354:	de 01       	movw	r26, r28
    2356:	ab 57       	subi	r26, 0x7B	; 123
    2358:	bf 4f       	sbci	r27, 0xFF	; 255
    235a:	fe 01       	movw	r30, r28
    235c:	eb 57       	subi	r30, 0x7B	; 123
    235e:	ff 4f       	sbci	r31, 0xFF	; 255
    2360:	80 81       	ld	r24, Z
    2362:	8f 5f       	subi	r24, 0xFF	; 255
    2364:	8c 93       	st	X, r24
LCD_enuDisplayNumPOS(kp_pass,2,pass_nums);
    2366:	fe 01       	movw	r30, r28
    2368:	ea 57       	subi	r30, 0x7A	; 122
    236a:	ff 4f       	sbci	r31, 0xFF	; 255
    236c:	80 81       	ld	r24, Z
    236e:	88 2f       	mov	r24, r24
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	a0 e0       	ldi	r26, 0x00	; 0
    2374:	b0 e0       	ldi	r27, 0x00	; 0
    2376:	fe 01       	movw	r30, r28
    2378:	eb 57       	subi	r30, 0x7B	; 123
    237a:	ff 4f       	sbci	r31, 0xFF	; 255
    237c:	bc 01       	movw	r22, r24
    237e:	cd 01       	movw	r24, r26
    2380:	42 e0       	ldi	r20, 0x02	; 2
    2382:	20 81       	ld	r18, Z
    2384:	0e 94 41 11 	call	0x2282	; 0x2282 <LCD_enuDisplayNumPOS>
    2388:	fe 01       	movw	r30, r28
    238a:	e3 59       	subi	r30, 0x93	; 147
    238c:	ff 4f       	sbci	r31, 0xFF	; 255
    238e:	80 e0       	ldi	r24, 0x00	; 0
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	a8 ec       	ldi	r26, 0xC8	; 200
    2394:	b2 e4       	ldi	r27, 0x42	; 66
    2396:	80 83       	st	Z, r24
    2398:	91 83       	std	Z+1, r25	; 0x01
    239a:	a2 83       	std	Z+2, r26	; 0x02
    239c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    239e:	8e 01       	movw	r16, r28
    23a0:	07 59       	subi	r16, 0x97	; 151
    23a2:	1f 4f       	sbci	r17, 0xFF	; 255
    23a4:	fe 01       	movw	r30, r28
    23a6:	e3 59       	subi	r30, 0x93	; 147
    23a8:	ff 4f       	sbci	r31, 0xFF	; 255
    23aa:	60 81       	ld	r22, Z
    23ac:	71 81       	ldd	r23, Z+1	; 0x01
    23ae:	82 81       	ldd	r24, Z+2	; 0x02
    23b0:	93 81       	ldd	r25, Z+3	; 0x03
    23b2:	20 e0       	ldi	r18, 0x00	; 0
    23b4:	30 e0       	ldi	r19, 0x00	; 0
    23b6:	4a e7       	ldi	r20, 0x7A	; 122
    23b8:	53 e4       	ldi	r21, 0x43	; 67
    23ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23be:	dc 01       	movw	r26, r24
    23c0:	cb 01       	movw	r24, r22
    23c2:	f8 01       	movw	r30, r16
    23c4:	80 83       	st	Z, r24
    23c6:	91 83       	std	Z+1, r25	; 0x01
    23c8:	a2 83       	std	Z+2, r26	; 0x02
    23ca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23cc:	fe 01       	movw	r30, r28
    23ce:	e7 59       	subi	r30, 0x97	; 151
    23d0:	ff 4f       	sbci	r31, 0xFF	; 255
    23d2:	60 81       	ld	r22, Z
    23d4:	71 81       	ldd	r23, Z+1	; 0x01
    23d6:	82 81       	ldd	r24, Z+2	; 0x02
    23d8:	93 81       	ldd	r25, Z+3	; 0x03
    23da:	20 e0       	ldi	r18, 0x00	; 0
    23dc:	30 e0       	ldi	r19, 0x00	; 0
    23de:	40 e8       	ldi	r20, 0x80	; 128
    23e0:	5f e3       	ldi	r21, 0x3F	; 63
    23e2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    23e6:	88 23       	and	r24, r24
    23e8:	44 f4       	brge	.+16     	; 0x23fa <app+0x132>
		__ticks = 1;
    23ea:	fe 01       	movw	r30, r28
    23ec:	e9 59       	subi	r30, 0x99	; 153
    23ee:	ff 4f       	sbci	r31, 0xFF	; 255
    23f0:	81 e0       	ldi	r24, 0x01	; 1
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	91 83       	std	Z+1, r25	; 0x01
    23f6:	80 83       	st	Z, r24
    23f8:	64 c0       	rjmp	.+200    	; 0x24c2 <app+0x1fa>
	else if (__tmp > 65535)
    23fa:	fe 01       	movw	r30, r28
    23fc:	e7 59       	subi	r30, 0x97	; 151
    23fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2400:	60 81       	ld	r22, Z
    2402:	71 81       	ldd	r23, Z+1	; 0x01
    2404:	82 81       	ldd	r24, Z+2	; 0x02
    2406:	93 81       	ldd	r25, Z+3	; 0x03
    2408:	20 e0       	ldi	r18, 0x00	; 0
    240a:	3f ef       	ldi	r19, 0xFF	; 255
    240c:	4f e7       	ldi	r20, 0x7F	; 127
    240e:	57 e4       	ldi	r21, 0x47	; 71
    2410:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2414:	18 16       	cp	r1, r24
    2416:	0c f0       	brlt	.+2      	; 0x241a <app+0x152>
    2418:	43 c0       	rjmp	.+134    	; 0x24a0 <app+0x1d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    241a:	fe 01       	movw	r30, r28
    241c:	e3 59       	subi	r30, 0x93	; 147
    241e:	ff 4f       	sbci	r31, 0xFF	; 255
    2420:	60 81       	ld	r22, Z
    2422:	71 81       	ldd	r23, Z+1	; 0x01
    2424:	82 81       	ldd	r24, Z+2	; 0x02
    2426:	93 81       	ldd	r25, Z+3	; 0x03
    2428:	20 e0       	ldi	r18, 0x00	; 0
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	40 e2       	ldi	r20, 0x20	; 32
    242e:	51 e4       	ldi	r21, 0x41	; 65
    2430:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2434:	dc 01       	movw	r26, r24
    2436:	cb 01       	movw	r24, r22
    2438:	8e 01       	movw	r16, r28
    243a:	09 59       	subi	r16, 0x99	; 153
    243c:	1f 4f       	sbci	r17, 0xFF	; 255
    243e:	bc 01       	movw	r22, r24
    2440:	cd 01       	movw	r24, r26
    2442:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2446:	dc 01       	movw	r26, r24
    2448:	cb 01       	movw	r24, r22
    244a:	f8 01       	movw	r30, r16
    244c:	91 83       	std	Z+1, r25	; 0x01
    244e:	80 83       	st	Z, r24
    2450:	1f c0       	rjmp	.+62     	; 0x2490 <app+0x1c8>
    2452:	fe 01       	movw	r30, r28
    2454:	eb 59       	subi	r30, 0x9B	; 155
    2456:	ff 4f       	sbci	r31, 0xFF	; 255
    2458:	89 e1       	ldi	r24, 0x19	; 25
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	91 83       	std	Z+1, r25	; 0x01
    245e:	80 83       	st	Z, r24
    2460:	fe 01       	movw	r30, r28
    2462:	eb 59       	subi	r30, 0x9B	; 155
    2464:	ff 4f       	sbci	r31, 0xFF	; 255
    2466:	80 81       	ld	r24, Z
    2468:	91 81       	ldd	r25, Z+1	; 0x01
    246a:	01 97       	sbiw	r24, 0x01	; 1
    246c:	f1 f7       	brne	.-4      	; 0x246a <app+0x1a2>
    246e:	fe 01       	movw	r30, r28
    2470:	eb 59       	subi	r30, 0x9B	; 155
    2472:	ff 4f       	sbci	r31, 0xFF	; 255
    2474:	91 83       	std	Z+1, r25	; 0x01
    2476:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2478:	de 01       	movw	r26, r28
    247a:	a9 59       	subi	r26, 0x99	; 153
    247c:	bf 4f       	sbci	r27, 0xFF	; 255
    247e:	fe 01       	movw	r30, r28
    2480:	e9 59       	subi	r30, 0x99	; 153
    2482:	ff 4f       	sbci	r31, 0xFF	; 255
    2484:	80 81       	ld	r24, Z
    2486:	91 81       	ldd	r25, Z+1	; 0x01
    2488:	01 97       	sbiw	r24, 0x01	; 1
    248a:	11 96       	adiw	r26, 0x01	; 1
    248c:	9c 93       	st	X, r25
    248e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2490:	fe 01       	movw	r30, r28
    2492:	e9 59       	subi	r30, 0x99	; 153
    2494:	ff 4f       	sbci	r31, 0xFF	; 255
    2496:	80 81       	ld	r24, Z
    2498:	91 81       	ldd	r25, Z+1	; 0x01
    249a:	00 97       	sbiw	r24, 0x00	; 0
    249c:	d1 f6       	brne	.-76     	; 0x2452 <app+0x18a>
    249e:	27 c0       	rjmp	.+78     	; 0x24ee <app+0x226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24a0:	8e 01       	movw	r16, r28
    24a2:	09 59       	subi	r16, 0x99	; 153
    24a4:	1f 4f       	sbci	r17, 0xFF	; 255
    24a6:	fe 01       	movw	r30, r28
    24a8:	e7 59       	subi	r30, 0x97	; 151
    24aa:	ff 4f       	sbci	r31, 0xFF	; 255
    24ac:	60 81       	ld	r22, Z
    24ae:	71 81       	ldd	r23, Z+1	; 0x01
    24b0:	82 81       	ldd	r24, Z+2	; 0x02
    24b2:	93 81       	ldd	r25, Z+3	; 0x03
    24b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24b8:	dc 01       	movw	r26, r24
    24ba:	cb 01       	movw	r24, r22
    24bc:	f8 01       	movw	r30, r16
    24be:	91 83       	std	Z+1, r25	; 0x01
    24c0:	80 83       	st	Z, r24
    24c2:	de 01       	movw	r26, r28
    24c4:	ad 59       	subi	r26, 0x9D	; 157
    24c6:	bf 4f       	sbci	r27, 0xFF	; 255
    24c8:	fe 01       	movw	r30, r28
    24ca:	e9 59       	subi	r30, 0x99	; 153
    24cc:	ff 4f       	sbci	r31, 0xFF	; 255
    24ce:	80 81       	ld	r24, Z
    24d0:	91 81       	ldd	r25, Z+1	; 0x01
    24d2:	8d 93       	st	X+, r24
    24d4:	9c 93       	st	X, r25
    24d6:	fe 01       	movw	r30, r28
    24d8:	ed 59       	subi	r30, 0x9D	; 157
    24da:	ff 4f       	sbci	r31, 0xFF	; 255
    24dc:	80 81       	ld	r24, Z
    24de:	91 81       	ldd	r25, Z+1	; 0x01
    24e0:	01 97       	sbiw	r24, 0x01	; 1
    24e2:	f1 f7       	brne	.-4      	; 0x24e0 <app+0x218>
    24e4:	fe 01       	movw	r30, r28
    24e6:	ed 59       	subi	r30, 0x9D	; 157
    24e8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ea:	91 83       	std	Z+1, r25	; 0x01
    24ec:	80 83       	st	Z, r24
_delay_ms(100);
LCD_enuDisplayCharPOS('*',2,pass_nums);
    24ee:	fe 01       	movw	r30, r28
    24f0:	eb 57       	subi	r30, 0x7B	; 123
    24f2:	ff 4f       	sbci	r31, 0xFF	; 255
    24f4:	8a e2       	ldi	r24, 0x2A	; 42
    24f6:	62 e0       	ldi	r22, 0x02	; 2
    24f8:	40 81       	ld	r20, Z
    24fa:	0e 94 10 11 	call	0x2220	; 0x2220 <LCD_enuDisplayCharPOS>
    24fe:	fe 01       	movw	r30, r28
    2500:	e1 5a       	subi	r30, 0xA1	; 161
    2502:	ff 4f       	sbci	r31, 0xFF	; 255
    2504:	80 e0       	ldi	r24, 0x00	; 0
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	a8 ec       	ldi	r26, 0xC8	; 200
    250a:	b2 e4       	ldi	r27, 0x42	; 66
    250c:	80 83       	st	Z, r24
    250e:	91 83       	std	Z+1, r25	; 0x01
    2510:	a2 83       	std	Z+2, r26	; 0x02
    2512:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2514:	8e 01       	movw	r16, r28
    2516:	05 5a       	subi	r16, 0xA5	; 165
    2518:	1f 4f       	sbci	r17, 0xFF	; 255
    251a:	fe 01       	movw	r30, r28
    251c:	e1 5a       	subi	r30, 0xA1	; 161
    251e:	ff 4f       	sbci	r31, 0xFF	; 255
    2520:	60 81       	ld	r22, Z
    2522:	71 81       	ldd	r23, Z+1	; 0x01
    2524:	82 81       	ldd	r24, Z+2	; 0x02
    2526:	93 81       	ldd	r25, Z+3	; 0x03
    2528:	20 e0       	ldi	r18, 0x00	; 0
    252a:	30 e0       	ldi	r19, 0x00	; 0
    252c:	4a e7       	ldi	r20, 0x7A	; 122
    252e:	53 e4       	ldi	r21, 0x43	; 67
    2530:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2534:	dc 01       	movw	r26, r24
    2536:	cb 01       	movw	r24, r22
    2538:	f8 01       	movw	r30, r16
    253a:	80 83       	st	Z, r24
    253c:	91 83       	std	Z+1, r25	; 0x01
    253e:	a2 83       	std	Z+2, r26	; 0x02
    2540:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2542:	fe 01       	movw	r30, r28
    2544:	e5 5a       	subi	r30, 0xA5	; 165
    2546:	ff 4f       	sbci	r31, 0xFF	; 255
    2548:	60 81       	ld	r22, Z
    254a:	71 81       	ldd	r23, Z+1	; 0x01
    254c:	82 81       	ldd	r24, Z+2	; 0x02
    254e:	93 81       	ldd	r25, Z+3	; 0x03
    2550:	20 e0       	ldi	r18, 0x00	; 0
    2552:	30 e0       	ldi	r19, 0x00	; 0
    2554:	40 e8       	ldi	r20, 0x80	; 128
    2556:	5f e3       	ldi	r21, 0x3F	; 63
    2558:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    255c:	88 23       	and	r24, r24
    255e:	44 f4       	brge	.+16     	; 0x2570 <app+0x2a8>
		__ticks = 1;
    2560:	fe 01       	movw	r30, r28
    2562:	e7 5a       	subi	r30, 0xA7	; 167
    2564:	ff 4f       	sbci	r31, 0xFF	; 255
    2566:	81 e0       	ldi	r24, 0x01	; 1
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	91 83       	std	Z+1, r25	; 0x01
    256c:	80 83       	st	Z, r24
    256e:	64 c0       	rjmp	.+200    	; 0x2638 <app+0x370>
	else if (__tmp > 65535)
    2570:	fe 01       	movw	r30, r28
    2572:	e5 5a       	subi	r30, 0xA5	; 165
    2574:	ff 4f       	sbci	r31, 0xFF	; 255
    2576:	60 81       	ld	r22, Z
    2578:	71 81       	ldd	r23, Z+1	; 0x01
    257a:	82 81       	ldd	r24, Z+2	; 0x02
    257c:	93 81       	ldd	r25, Z+3	; 0x03
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	3f ef       	ldi	r19, 0xFF	; 255
    2582:	4f e7       	ldi	r20, 0x7F	; 127
    2584:	57 e4       	ldi	r21, 0x47	; 71
    2586:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    258a:	18 16       	cp	r1, r24
    258c:	0c f0       	brlt	.+2      	; 0x2590 <app+0x2c8>
    258e:	43 c0       	rjmp	.+134    	; 0x2616 <app+0x34e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2590:	fe 01       	movw	r30, r28
    2592:	e1 5a       	subi	r30, 0xA1	; 161
    2594:	ff 4f       	sbci	r31, 0xFF	; 255
    2596:	60 81       	ld	r22, Z
    2598:	71 81       	ldd	r23, Z+1	; 0x01
    259a:	82 81       	ldd	r24, Z+2	; 0x02
    259c:	93 81       	ldd	r25, Z+3	; 0x03
    259e:	20 e0       	ldi	r18, 0x00	; 0
    25a0:	30 e0       	ldi	r19, 0x00	; 0
    25a2:	40 e2       	ldi	r20, 0x20	; 32
    25a4:	51 e4       	ldi	r21, 0x41	; 65
    25a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25aa:	dc 01       	movw	r26, r24
    25ac:	cb 01       	movw	r24, r22
    25ae:	8e 01       	movw	r16, r28
    25b0:	07 5a       	subi	r16, 0xA7	; 167
    25b2:	1f 4f       	sbci	r17, 0xFF	; 255
    25b4:	bc 01       	movw	r22, r24
    25b6:	cd 01       	movw	r24, r26
    25b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25bc:	dc 01       	movw	r26, r24
    25be:	cb 01       	movw	r24, r22
    25c0:	f8 01       	movw	r30, r16
    25c2:	91 83       	std	Z+1, r25	; 0x01
    25c4:	80 83       	st	Z, r24
    25c6:	1f c0       	rjmp	.+62     	; 0x2606 <app+0x33e>
    25c8:	fe 01       	movw	r30, r28
    25ca:	e9 5a       	subi	r30, 0xA9	; 169
    25cc:	ff 4f       	sbci	r31, 0xFF	; 255
    25ce:	89 e1       	ldi	r24, 0x19	; 25
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    25d2:	91 83       	std	Z+1, r25	; 0x01
    25d4:	80 83       	st	Z, r24
    25d6:	fe 01       	movw	r30, r28
    25d8:	e9 5a       	subi	r30, 0xA9	; 169
    25da:	ff 4f       	sbci	r31, 0xFF	; 255
    25dc:	80 81       	ld	r24, Z
    25de:	91 81       	ldd	r25, Z+1	; 0x01
    25e0:	01 97       	sbiw	r24, 0x01	; 1
    25e2:	f1 f7       	brne	.-4      	; 0x25e0 <app+0x318>
    25e4:	fe 01       	movw	r30, r28
    25e6:	e9 5a       	subi	r30, 0xA9	; 169
    25e8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ea:	91 83       	std	Z+1, r25	; 0x01
    25ec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25ee:	de 01       	movw	r26, r28
    25f0:	a7 5a       	subi	r26, 0xA7	; 167
    25f2:	bf 4f       	sbci	r27, 0xFF	; 255
    25f4:	fe 01       	movw	r30, r28
    25f6:	e7 5a       	subi	r30, 0xA7	; 167
    25f8:	ff 4f       	sbci	r31, 0xFF	; 255
    25fa:	80 81       	ld	r24, Z
    25fc:	91 81       	ldd	r25, Z+1	; 0x01
    25fe:	01 97       	sbiw	r24, 0x01	; 1
    2600:	11 96       	adiw	r26, 0x01	; 1
    2602:	9c 93       	st	X, r25
    2604:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2606:	fe 01       	movw	r30, r28
    2608:	e7 5a       	subi	r30, 0xA7	; 167
    260a:	ff 4f       	sbci	r31, 0xFF	; 255
    260c:	80 81       	ld	r24, Z
    260e:	91 81       	ldd	r25, Z+1	; 0x01
    2610:	00 97       	sbiw	r24, 0x00	; 0
    2612:	d1 f6       	brne	.-76     	; 0x25c8 <app+0x300>
    2614:	7b ce       	rjmp	.-778    	; 0x230c <app+0x44>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2616:	8e 01       	movw	r16, r28
    2618:	07 5a       	subi	r16, 0xA7	; 167
    261a:	1f 4f       	sbci	r17, 0xFF	; 255
    261c:	fe 01       	movw	r30, r28
    261e:	e5 5a       	subi	r30, 0xA5	; 165
    2620:	ff 4f       	sbci	r31, 0xFF	; 255
    2622:	60 81       	ld	r22, Z
    2624:	71 81       	ldd	r23, Z+1	; 0x01
    2626:	82 81       	ldd	r24, Z+2	; 0x02
    2628:	93 81       	ldd	r25, Z+3	; 0x03
    262a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    262e:	dc 01       	movw	r26, r24
    2630:	cb 01       	movw	r24, r22
    2632:	f8 01       	movw	r30, r16
    2634:	91 83       	std	Z+1, r25	; 0x01
    2636:	80 83       	st	Z, r24
    2638:	de 01       	movw	r26, r28
    263a:	ab 5a       	subi	r26, 0xAB	; 171
    263c:	bf 4f       	sbci	r27, 0xFF	; 255
    263e:	fe 01       	movw	r30, r28
    2640:	e7 5a       	subi	r30, 0xA7	; 167
    2642:	ff 4f       	sbci	r31, 0xFF	; 255
    2644:	80 81       	ld	r24, Z
    2646:	91 81       	ldd	r25, Z+1	; 0x01
    2648:	11 96       	adiw	r26, 0x01	; 1
    264a:	9c 93       	st	X, r25
    264c:	8e 93       	st	-X, r24
    264e:	fe 01       	movw	r30, r28
    2650:	eb 5a       	subi	r30, 0xAB	; 171
    2652:	ff 4f       	sbci	r31, 0xFF	; 255
    2654:	80 81       	ld	r24, Z
    2656:	91 81       	ldd	r25, Z+1	; 0x01
    2658:	01 97       	sbiw	r24, 0x01	; 1
    265a:	f1 f7       	brne	.-4      	; 0x2658 <app+0x390>
    265c:	fe 01       	movw	r30, r28
    265e:	eb 5a       	subi	r30, 0xAB	; 171
    2660:	ff 4f       	sbci	r31, 0xFF	; 255
    2662:	91 83       	std	Z+1, r25	; 0x01
    2664:	80 83       	st	Z, r24
    2666:	52 ce       	rjmp	.-860    	; 0x230c <app+0x44>
_delay_ms(100);

}
LCD_enuClear();
    2668:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LCD_enuClear>
//take password again to check
u8 count=0;
    266c:	fe 01       	movw	r30, r28
    266e:	ec 57       	subi	r30, 0x7C	; 124
    2670:	ff 4f       	sbci	r31, 0xFF	; 255
    2672:	10 82       	st	Z, r1
LCD_enuDisplayStringPOS("ensure password",1,2);
    2674:	8f e6       	ldi	r24, 0x6F	; 111
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	61 e0       	ldi	r22, 0x01	; 1
    267a:	42 e0       	ldi	r20, 0x02	; 2
    267c:	0e 94 27 11 	call	0x224e	; 0x224e <LCD_enuDisplayStringPOS>

while(1){
do{
	 kp_pass=KEYPAD_enuGetpressedKey();
    2680:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <KEYPAD_enuGetpressedKey>
    2684:	fe 01       	movw	r30, r28
    2686:	ea 57       	subi	r30, 0x7A	; 122
    2688:	ff 4f       	sbci	r31, 0xFF	; 255
    268a:	80 83       	st	Z, r24
}while(kp_pass== KP_NO_PRESSED_KEY);
    268c:	fe 01       	movw	r30, r28
    268e:	ea 57       	subi	r30, 0x7A	; 122
    2690:	ff 4f       	sbci	r31, 0xFF	; 255
    2692:	80 81       	ld	r24, Z
    2694:	83 34       	cpi	r24, 0x43	; 67
    2696:	a1 f3       	breq	.-24     	; 0x2680 <app+0x3b8>
if(kp_pass=='$') break;
    2698:	fe 01       	movw	r30, r28
    269a:	ea 57       	subi	r30, 0x7A	; 122
    269c:	ff 4f       	sbci	r31, 0xFF	; 255
    269e:	80 81       	ld	r24, Z
    26a0:	84 32       	cpi	r24, 0x24	; 36
    26a2:	09 f4       	brne	.+2      	; 0x26a6 <app+0x3de>
    26a4:	e7 c0       	rjmp	.+462    	; 0x2874 <app+0x5ac>
pass_ch_nums_arr[count++]=kp_pass;
    26a6:	fe 01       	movw	r30, r28
    26a8:	ec 57       	subi	r30, 0x7C	; 124
    26aa:	ff 4f       	sbci	r31, 0xFF	; 255
    26ac:	80 81       	ld	r24, Z
    26ae:	28 2f       	mov	r18, r24
    26b0:	30 e0       	ldi	r19, 0x00	; 0
    26b2:	ce 01       	movw	r24, r28
    26b4:	89 56       	subi	r24, 0x69	; 105
    26b6:	9f 4f       	sbci	r25, 0xFF	; 255
    26b8:	dc 01       	movw	r26, r24
    26ba:	a2 0f       	add	r26, r18
    26bc:	b3 1f       	adc	r27, r19
    26be:	fe 01       	movw	r30, r28
    26c0:	ea 57       	subi	r30, 0x7A	; 122
    26c2:	ff 4f       	sbci	r31, 0xFF	; 255
    26c4:	80 81       	ld	r24, Z
    26c6:	8c 93       	st	X, r24
    26c8:	de 01       	movw	r26, r28
    26ca:	ac 57       	subi	r26, 0x7C	; 124
    26cc:	bf 4f       	sbci	r27, 0xFF	; 255
    26ce:	fe 01       	movw	r30, r28
    26d0:	ec 57       	subi	r30, 0x7C	; 124
    26d2:	ff 4f       	sbci	r31, 0xFF	; 255
    26d4:	80 81       	ld	r24, Z
    26d6:	8f 5f       	subi	r24, 0xFF	; 255
    26d8:	8c 93       	st	X, r24
LCD_enuDisplayNumPOS(kp_pass,2,count);
    26da:	fe 01       	movw	r30, r28
    26dc:	ea 57       	subi	r30, 0x7A	; 122
    26de:	ff 4f       	sbci	r31, 0xFF	; 255
    26e0:	80 81       	ld	r24, Z
    26e2:	88 2f       	mov	r24, r24
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	a0 e0       	ldi	r26, 0x00	; 0
    26e8:	b0 e0       	ldi	r27, 0x00	; 0
    26ea:	fe 01       	movw	r30, r28
    26ec:	ec 57       	subi	r30, 0x7C	; 124
    26ee:	ff 4f       	sbci	r31, 0xFF	; 255
    26f0:	bc 01       	movw	r22, r24
    26f2:	cd 01       	movw	r24, r26
    26f4:	42 e0       	ldi	r20, 0x02	; 2
    26f6:	20 81       	ld	r18, Z
    26f8:	0e 94 41 11 	call	0x2282	; 0x2282 <LCD_enuDisplayNumPOS>
    26fc:	fe 01       	movw	r30, r28
    26fe:	ef 5a       	subi	r30, 0xAF	; 175
    2700:	ff 4f       	sbci	r31, 0xFF	; 255
    2702:	80 e0       	ldi	r24, 0x00	; 0
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	a8 ec       	ldi	r26, 0xC8	; 200
    2708:	b2 e4       	ldi	r27, 0x42	; 66
    270a:	80 83       	st	Z, r24
    270c:	91 83       	std	Z+1, r25	; 0x01
    270e:	a2 83       	std	Z+2, r26	; 0x02
    2710:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2712:	8e 01       	movw	r16, r28
    2714:	03 5b       	subi	r16, 0xB3	; 179
    2716:	1f 4f       	sbci	r17, 0xFF	; 255
    2718:	fe 01       	movw	r30, r28
    271a:	ef 5a       	subi	r30, 0xAF	; 175
    271c:	ff 4f       	sbci	r31, 0xFF	; 255
    271e:	60 81       	ld	r22, Z
    2720:	71 81       	ldd	r23, Z+1	; 0x01
    2722:	82 81       	ldd	r24, Z+2	; 0x02
    2724:	93 81       	ldd	r25, Z+3	; 0x03
    2726:	20 e0       	ldi	r18, 0x00	; 0
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	4a e7       	ldi	r20, 0x7A	; 122
    272c:	53 e4       	ldi	r21, 0x43	; 67
    272e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2732:	dc 01       	movw	r26, r24
    2734:	cb 01       	movw	r24, r22
    2736:	f8 01       	movw	r30, r16
    2738:	80 83       	st	Z, r24
    273a:	91 83       	std	Z+1, r25	; 0x01
    273c:	a2 83       	std	Z+2, r26	; 0x02
    273e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2740:	fe 01       	movw	r30, r28
    2742:	e3 5b       	subi	r30, 0xB3	; 179
    2744:	ff 4f       	sbci	r31, 0xFF	; 255
    2746:	60 81       	ld	r22, Z
    2748:	71 81       	ldd	r23, Z+1	; 0x01
    274a:	82 81       	ldd	r24, Z+2	; 0x02
    274c:	93 81       	ldd	r25, Z+3	; 0x03
    274e:	20 e0       	ldi	r18, 0x00	; 0
    2750:	30 e0       	ldi	r19, 0x00	; 0
    2752:	40 e8       	ldi	r20, 0x80	; 128
    2754:	5f e3       	ldi	r21, 0x3F	; 63
    2756:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    275a:	88 23       	and	r24, r24
    275c:	44 f4       	brge	.+16     	; 0x276e <app+0x4a6>
		__ticks = 1;
    275e:	fe 01       	movw	r30, r28
    2760:	e5 5b       	subi	r30, 0xB5	; 181
    2762:	ff 4f       	sbci	r31, 0xFF	; 255
    2764:	81 e0       	ldi	r24, 0x01	; 1
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	91 83       	std	Z+1, r25	; 0x01
    276a:	80 83       	st	Z, r24
    276c:	64 c0       	rjmp	.+200    	; 0x2836 <app+0x56e>
	else if (__tmp > 65535)
    276e:	fe 01       	movw	r30, r28
    2770:	e3 5b       	subi	r30, 0xB3	; 179
    2772:	ff 4f       	sbci	r31, 0xFF	; 255
    2774:	60 81       	ld	r22, Z
    2776:	71 81       	ldd	r23, Z+1	; 0x01
    2778:	82 81       	ldd	r24, Z+2	; 0x02
    277a:	93 81       	ldd	r25, Z+3	; 0x03
    277c:	20 e0       	ldi	r18, 0x00	; 0
    277e:	3f ef       	ldi	r19, 0xFF	; 255
    2780:	4f e7       	ldi	r20, 0x7F	; 127
    2782:	57 e4       	ldi	r21, 0x47	; 71
    2784:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2788:	18 16       	cp	r1, r24
    278a:	0c f0       	brlt	.+2      	; 0x278e <app+0x4c6>
    278c:	43 c0       	rjmp	.+134    	; 0x2814 <app+0x54c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    278e:	fe 01       	movw	r30, r28
    2790:	ef 5a       	subi	r30, 0xAF	; 175
    2792:	ff 4f       	sbci	r31, 0xFF	; 255
    2794:	60 81       	ld	r22, Z
    2796:	71 81       	ldd	r23, Z+1	; 0x01
    2798:	82 81       	ldd	r24, Z+2	; 0x02
    279a:	93 81       	ldd	r25, Z+3	; 0x03
    279c:	20 e0       	ldi	r18, 0x00	; 0
    279e:	30 e0       	ldi	r19, 0x00	; 0
    27a0:	40 e2       	ldi	r20, 0x20	; 32
    27a2:	51 e4       	ldi	r21, 0x41	; 65
    27a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27a8:	dc 01       	movw	r26, r24
    27aa:	cb 01       	movw	r24, r22
    27ac:	8e 01       	movw	r16, r28
    27ae:	05 5b       	subi	r16, 0xB5	; 181
    27b0:	1f 4f       	sbci	r17, 0xFF	; 255
    27b2:	bc 01       	movw	r22, r24
    27b4:	cd 01       	movw	r24, r26
    27b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27ba:	dc 01       	movw	r26, r24
    27bc:	cb 01       	movw	r24, r22
    27be:	f8 01       	movw	r30, r16
    27c0:	91 83       	std	Z+1, r25	; 0x01
    27c2:	80 83       	st	Z, r24
    27c4:	1f c0       	rjmp	.+62     	; 0x2804 <app+0x53c>
    27c6:	fe 01       	movw	r30, r28
    27c8:	e7 5b       	subi	r30, 0xB7	; 183
    27ca:	ff 4f       	sbci	r31, 0xFF	; 255
    27cc:	89 e1       	ldi	r24, 0x19	; 25
    27ce:	90 e0       	ldi	r25, 0x00	; 0
    27d0:	91 83       	std	Z+1, r25	; 0x01
    27d2:	80 83       	st	Z, r24
    27d4:	fe 01       	movw	r30, r28
    27d6:	e7 5b       	subi	r30, 0xB7	; 183
    27d8:	ff 4f       	sbci	r31, 0xFF	; 255
    27da:	80 81       	ld	r24, Z
    27dc:	91 81       	ldd	r25, Z+1	; 0x01
    27de:	01 97       	sbiw	r24, 0x01	; 1
    27e0:	f1 f7       	brne	.-4      	; 0x27de <app+0x516>
    27e2:	fe 01       	movw	r30, r28
    27e4:	e7 5b       	subi	r30, 0xB7	; 183
    27e6:	ff 4f       	sbci	r31, 0xFF	; 255
    27e8:	91 83       	std	Z+1, r25	; 0x01
    27ea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ec:	de 01       	movw	r26, r28
    27ee:	a5 5b       	subi	r26, 0xB5	; 181
    27f0:	bf 4f       	sbci	r27, 0xFF	; 255
    27f2:	fe 01       	movw	r30, r28
    27f4:	e5 5b       	subi	r30, 0xB5	; 181
    27f6:	ff 4f       	sbci	r31, 0xFF	; 255
    27f8:	80 81       	ld	r24, Z
    27fa:	91 81       	ldd	r25, Z+1	; 0x01
    27fc:	01 97       	sbiw	r24, 0x01	; 1
    27fe:	11 96       	adiw	r26, 0x01	; 1
    2800:	9c 93       	st	X, r25
    2802:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2804:	fe 01       	movw	r30, r28
    2806:	e5 5b       	subi	r30, 0xB5	; 181
    2808:	ff 4f       	sbci	r31, 0xFF	; 255
    280a:	80 81       	ld	r24, Z
    280c:	91 81       	ldd	r25, Z+1	; 0x01
    280e:	00 97       	sbiw	r24, 0x00	; 0
    2810:	d1 f6       	brne	.-76     	; 0x27c6 <app+0x4fe>
    2812:	27 c0       	rjmp	.+78     	; 0x2862 <app+0x59a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2814:	8e 01       	movw	r16, r28
    2816:	05 5b       	subi	r16, 0xB5	; 181
    2818:	1f 4f       	sbci	r17, 0xFF	; 255
    281a:	fe 01       	movw	r30, r28
    281c:	e3 5b       	subi	r30, 0xB3	; 179
    281e:	ff 4f       	sbci	r31, 0xFF	; 255
    2820:	60 81       	ld	r22, Z
    2822:	71 81       	ldd	r23, Z+1	; 0x01
    2824:	82 81       	ldd	r24, Z+2	; 0x02
    2826:	93 81       	ldd	r25, Z+3	; 0x03
    2828:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    282c:	dc 01       	movw	r26, r24
    282e:	cb 01       	movw	r24, r22
    2830:	f8 01       	movw	r30, r16
    2832:	91 83       	std	Z+1, r25	; 0x01
    2834:	80 83       	st	Z, r24
    2836:	de 01       	movw	r26, r28
    2838:	a9 5b       	subi	r26, 0xB9	; 185
    283a:	bf 4f       	sbci	r27, 0xFF	; 255
    283c:	fe 01       	movw	r30, r28
    283e:	e5 5b       	subi	r30, 0xB5	; 181
    2840:	ff 4f       	sbci	r31, 0xFF	; 255
    2842:	80 81       	ld	r24, Z
    2844:	91 81       	ldd	r25, Z+1	; 0x01
    2846:	8d 93       	st	X+, r24
    2848:	9c 93       	st	X, r25
    284a:	fe 01       	movw	r30, r28
    284c:	e9 5b       	subi	r30, 0xB9	; 185
    284e:	ff 4f       	sbci	r31, 0xFF	; 255
    2850:	80 81       	ld	r24, Z
    2852:	91 81       	ldd	r25, Z+1	; 0x01
    2854:	01 97       	sbiw	r24, 0x01	; 1
    2856:	f1 f7       	brne	.-4      	; 0x2854 <app+0x58c>
    2858:	fe 01       	movw	r30, r28
    285a:	e9 5b       	subi	r30, 0xB9	; 185
    285c:	ff 4f       	sbci	r31, 0xFF	; 255
    285e:	91 83       	std	Z+1, r25	; 0x01
    2860:	80 83       	st	Z, r24
_delay_ms(100);
LCD_enuDisplayCharPOS('*',2,count);
    2862:	fe 01       	movw	r30, r28
    2864:	ec 57       	subi	r30, 0x7C	; 124
    2866:	ff 4f       	sbci	r31, 0xFF	; 255
    2868:	8a e2       	ldi	r24, 0x2A	; 42
    286a:	62 e0       	ldi	r22, 0x02	; 2
    286c:	40 81       	ld	r20, Z
    286e:	0e 94 10 11 	call	0x2220	; 0x2220 <LCD_enuDisplayCharPOS>
    2872:	06 cf       	rjmp	.-500    	; 0x2680 <app+0x3b8>
}
    2874:	fe 01       	movw	r30, r28
    2876:	ed 5b       	subi	r30, 0xBD	; 189
    2878:	ff 4f       	sbci	r31, 0xFF	; 255
    287a:	80 e0       	ldi	r24, 0x00	; 0
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	a8 ec       	ldi	r26, 0xC8	; 200
    2880:	b2 e4       	ldi	r27, 0x42	; 66
    2882:	80 83       	st	Z, r24
    2884:	91 83       	std	Z+1, r25	; 0x01
    2886:	a2 83       	std	Z+2, r26	; 0x02
    2888:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    288a:	8e 01       	movw	r16, r28
    288c:	01 5c       	subi	r16, 0xC1	; 193
    288e:	1f 4f       	sbci	r17, 0xFF	; 255
    2890:	fe 01       	movw	r30, r28
    2892:	ed 5b       	subi	r30, 0xBD	; 189
    2894:	ff 4f       	sbci	r31, 0xFF	; 255
    2896:	60 81       	ld	r22, Z
    2898:	71 81       	ldd	r23, Z+1	; 0x01
    289a:	82 81       	ldd	r24, Z+2	; 0x02
    289c:	93 81       	ldd	r25, Z+3	; 0x03
    289e:	20 e0       	ldi	r18, 0x00	; 0
    28a0:	30 e0       	ldi	r19, 0x00	; 0
    28a2:	4a e7       	ldi	r20, 0x7A	; 122
    28a4:	53 e4       	ldi	r21, 0x43	; 67
    28a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28aa:	dc 01       	movw	r26, r24
    28ac:	cb 01       	movw	r24, r22
    28ae:	f8 01       	movw	r30, r16
    28b0:	80 83       	st	Z, r24
    28b2:	91 83       	std	Z+1, r25	; 0x01
    28b4:	a2 83       	std	Z+2, r26	; 0x02
    28b6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28b8:	fe 01       	movw	r30, r28
    28ba:	ff 96       	adiw	r30, 0x3f	; 63
    28bc:	60 81       	ld	r22, Z
    28be:	71 81       	ldd	r23, Z+1	; 0x01
    28c0:	82 81       	ldd	r24, Z+2	; 0x02
    28c2:	93 81       	ldd	r25, Z+3	; 0x03
    28c4:	20 e0       	ldi	r18, 0x00	; 0
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	40 e8       	ldi	r20, 0x80	; 128
    28ca:	5f e3       	ldi	r21, 0x3F	; 63
    28cc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    28d0:	88 23       	and	r24, r24
    28d2:	2c f4       	brge	.+10     	; 0x28de <app+0x616>
		__ticks = 1;
    28d4:	81 e0       	ldi	r24, 0x01	; 1
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	9e af       	std	Y+62, r25	; 0x3e
    28da:	8d af       	std	Y+61, r24	; 0x3d
    28dc:	46 c0       	rjmp	.+140    	; 0x296a <app+0x6a2>
	else if (__tmp > 65535)
    28de:	fe 01       	movw	r30, r28
    28e0:	ff 96       	adiw	r30, 0x3f	; 63
    28e2:	60 81       	ld	r22, Z
    28e4:	71 81       	ldd	r23, Z+1	; 0x01
    28e6:	82 81       	ldd	r24, Z+2	; 0x02
    28e8:	93 81       	ldd	r25, Z+3	; 0x03
    28ea:	20 e0       	ldi	r18, 0x00	; 0
    28ec:	3f ef       	ldi	r19, 0xFF	; 255
    28ee:	4f e7       	ldi	r20, 0x7F	; 127
    28f0:	57 e4       	ldi	r21, 0x47	; 71
    28f2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    28f6:	18 16       	cp	r1, r24
    28f8:	64 f5       	brge	.+88     	; 0x2952 <app+0x68a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28fa:	fe 01       	movw	r30, r28
    28fc:	ed 5b       	subi	r30, 0xBD	; 189
    28fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2900:	60 81       	ld	r22, Z
    2902:	71 81       	ldd	r23, Z+1	; 0x01
    2904:	82 81       	ldd	r24, Z+2	; 0x02
    2906:	93 81       	ldd	r25, Z+3	; 0x03
    2908:	20 e0       	ldi	r18, 0x00	; 0
    290a:	30 e0       	ldi	r19, 0x00	; 0
    290c:	40 e2       	ldi	r20, 0x20	; 32
    290e:	51 e4       	ldi	r21, 0x41	; 65
    2910:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2914:	dc 01       	movw	r26, r24
    2916:	cb 01       	movw	r24, r22
    2918:	bc 01       	movw	r22, r24
    291a:	cd 01       	movw	r24, r26
    291c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2920:	dc 01       	movw	r26, r24
    2922:	cb 01       	movw	r24, r22
    2924:	9e af       	std	Y+62, r25	; 0x3e
    2926:	8d af       	std	Y+61, r24	; 0x3d
    2928:	0f c0       	rjmp	.+30     	; 0x2948 <app+0x680>
    292a:	89 e1       	ldi	r24, 0x19	; 25
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	9c af       	std	Y+60, r25	; 0x3c
    2930:	8b af       	std	Y+59, r24	; 0x3b
    2932:	8b ad       	ldd	r24, Y+59	; 0x3b
    2934:	9c ad       	ldd	r25, Y+60	; 0x3c
    2936:	01 97       	sbiw	r24, 0x01	; 1
    2938:	f1 f7       	brne	.-4      	; 0x2936 <app+0x66e>
    293a:	9c af       	std	Y+60, r25	; 0x3c
    293c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    293e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2940:	9e ad       	ldd	r25, Y+62	; 0x3e
    2942:	01 97       	sbiw	r24, 0x01	; 1
    2944:	9e af       	std	Y+62, r25	; 0x3e
    2946:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2948:	8d ad       	ldd	r24, Y+61	; 0x3d
    294a:	9e ad       	ldd	r25, Y+62	; 0x3e
    294c:	00 97       	sbiw	r24, 0x00	; 0
    294e:	69 f7       	brne	.-38     	; 0x292a <app+0x662>
    2950:	16 c0       	rjmp	.+44     	; 0x297e <app+0x6b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2952:	fe 01       	movw	r30, r28
    2954:	ff 96       	adiw	r30, 0x3f	; 63
    2956:	60 81       	ld	r22, Z
    2958:	71 81       	ldd	r23, Z+1	; 0x01
    295a:	82 81       	ldd	r24, Z+2	; 0x02
    295c:	93 81       	ldd	r25, Z+3	; 0x03
    295e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2962:	dc 01       	movw	r26, r24
    2964:	cb 01       	movw	r24, r22
    2966:	9e af       	std	Y+62, r25	; 0x3e
    2968:	8d af       	std	Y+61, r24	; 0x3d
    296a:	8d ad       	ldd	r24, Y+61	; 0x3d
    296c:	9e ad       	ldd	r25, Y+62	; 0x3e
    296e:	9a af       	std	Y+58, r25	; 0x3a
    2970:	89 af       	std	Y+57, r24	; 0x39
    2972:	89 ad       	ldd	r24, Y+57	; 0x39
    2974:	9a ad       	ldd	r25, Y+58	; 0x3a
    2976:	01 97       	sbiw	r24, 0x01	; 1
    2978:	f1 f7       	brne	.-4      	; 0x2976 <app+0x6ae>
    297a:	9a af       	std	Y+58, r25	; 0x3a
    297c:	89 af       	std	Y+57, r24	; 0x39
_delay_ms(100);
LCD_enuClear();
    297e:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LCD_enuClear>
 //check if pass is correct

int flage=0;
    2982:	fe 01       	movw	r30, r28
    2984:	ee 57       	subi	r30, 0x7E	; 126
    2986:	ff 4f       	sbci	r31, 0xFF	; 255
    2988:	11 82       	std	Z+1, r1	; 0x01
    298a:	10 82       	st	Z, r1
for(u8 i=0;i<pass_nums;i++){
    298c:	fe 01       	movw	r30, r28
    298e:	ef 57       	subi	r30, 0x7F	; 127
    2990:	ff 4f       	sbci	r31, 0xFF	; 255
    2992:	10 82       	st	Z, r1
    2994:	2c c0       	rjmp	.+88     	; 0x29ee <app+0x726>
	if(pass_ch_nums_arr[i]==pass_nums_arr[i])
    2996:	fe 01       	movw	r30, r28
    2998:	ef 57       	subi	r30, 0x7F	; 127
    299a:	ff 4f       	sbci	r31, 0xFF	; 255
    299c:	80 81       	ld	r24, Z
    299e:	28 2f       	mov	r18, r24
    29a0:	30 e0       	ldi	r19, 0x00	; 0
    29a2:	ce 01       	movw	r24, r28
    29a4:	89 56       	subi	r24, 0x69	; 105
    29a6:	9f 4f       	sbci	r25, 0xFF	; 255
    29a8:	fc 01       	movw	r30, r24
    29aa:	e2 0f       	add	r30, r18
    29ac:	f3 1f       	adc	r31, r19
    29ae:	40 81       	ld	r20, Z
    29b0:	fe 01       	movw	r30, r28
    29b2:	ef 57       	subi	r30, 0x7F	; 127
    29b4:	ff 4f       	sbci	r31, 0xFF	; 255
    29b6:	80 81       	ld	r24, Z
    29b8:	28 2f       	mov	r18, r24
    29ba:	30 e0       	ldi	r19, 0x00	; 0
    29bc:	ce 01       	movw	r24, r28
    29be:	89 57       	subi	r24, 0x79	; 121
    29c0:	9f 4f       	sbci	r25, 0xFF	; 255
    29c2:	fc 01       	movw	r30, r24
    29c4:	e2 0f       	add	r30, r18
    29c6:	f3 1f       	adc	r31, r19
    29c8:	80 81       	ld	r24, Z
    29ca:	48 17       	cp	r20, r24
    29cc:	d1 f4       	brne	.+52     	; 0x2a02 <app+0x73a>
		flage=1;
    29ce:	fe 01       	movw	r30, r28
    29d0:	ee 57       	subi	r30, 0x7E	; 126
    29d2:	ff 4f       	sbci	r31, 0xFF	; 255
    29d4:	81 e0       	ldi	r24, 0x01	; 1
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	91 83       	std	Z+1, r25	; 0x01
    29da:	80 83       	st	Z, r24
_delay_ms(100);
LCD_enuClear();
 //check if pass is correct

int flage=0;
for(u8 i=0;i<pass_nums;i++){
    29dc:	de 01       	movw	r26, r28
    29de:	af 57       	subi	r26, 0x7F	; 127
    29e0:	bf 4f       	sbci	r27, 0xFF	; 255
    29e2:	fe 01       	movw	r30, r28
    29e4:	ef 57       	subi	r30, 0x7F	; 127
    29e6:	ff 4f       	sbci	r31, 0xFF	; 255
    29e8:	80 81       	ld	r24, Z
    29ea:	8f 5f       	subi	r24, 0xFF	; 255
    29ec:	8c 93       	st	X, r24
    29ee:	fe 01       	movw	r30, r28
    29f0:	ef 57       	subi	r30, 0x7F	; 127
    29f2:	ff 4f       	sbci	r31, 0xFF	; 255
    29f4:	de 01       	movw	r26, r28
    29f6:	ab 57       	subi	r26, 0x7B	; 123
    29f8:	bf 4f       	sbci	r27, 0xFF	; 255
    29fa:	90 81       	ld	r25, Z
    29fc:	8c 91       	ld	r24, X
    29fe:	98 17       	cp	r25, r24
    2a00:	50 f2       	brcs	.-108    	; 0x2996 <app+0x6ce>
		break;
}

//display loading

	LCD_enuDisplayStringPOS("loading",1,2);
    2a02:	8f e7       	ldi	r24, 0x7F	; 127
    2a04:	90 e0       	ldi	r25, 0x00	; 0
    2a06:	61 e0       	ldi	r22, 0x01	; 1
    2a08:	42 e0       	ldi	r20, 0x02	; 2
    2a0a:	0e 94 27 11 	call	0x224e	; 0x224e <LCD_enuDisplayStringPOS>
for(int i=0;i<3;i++){
    2a0e:	fe 01       	movw	r30, r28
    2a10:	e1 58       	subi	r30, 0x81	; 129
    2a12:	ff 4f       	sbci	r31, 0xFF	; 255
    2a14:	11 82       	std	Z+1, r1	; 0x01
    2a16:	10 82       	st	Z, r1
    2a18:	89 c0       	rjmp	.+274    	; 0x2b2c <app+0x864>
    2a1a:	80 e0       	ldi	r24, 0x00	; 0
    2a1c:	90 e0       	ldi	r25, 0x00	; 0
    2a1e:	af ea       	ldi	r26, 0xAF	; 175
    2a20:	b3 e4       	ldi	r27, 0x43	; 67
    2a22:	8d ab       	std	Y+53, r24	; 0x35
    2a24:	9e ab       	std	Y+54, r25	; 0x36
    2a26:	af ab       	std	Y+55, r26	; 0x37
    2a28:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a2a:	6d a9       	ldd	r22, Y+53	; 0x35
    2a2c:	7e a9       	ldd	r23, Y+54	; 0x36
    2a2e:	8f a9       	ldd	r24, Y+55	; 0x37
    2a30:	98 ad       	ldd	r25, Y+56	; 0x38
    2a32:	20 e0       	ldi	r18, 0x00	; 0
    2a34:	30 e0       	ldi	r19, 0x00	; 0
    2a36:	4a e7       	ldi	r20, 0x7A	; 122
    2a38:	53 e4       	ldi	r21, 0x43	; 67
    2a3a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a3e:	dc 01       	movw	r26, r24
    2a40:	cb 01       	movw	r24, r22
    2a42:	89 ab       	std	Y+49, r24	; 0x31
    2a44:	9a ab       	std	Y+50, r25	; 0x32
    2a46:	ab ab       	std	Y+51, r26	; 0x33
    2a48:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2a4a:	69 a9       	ldd	r22, Y+49	; 0x31
    2a4c:	7a a9       	ldd	r23, Y+50	; 0x32
    2a4e:	8b a9       	ldd	r24, Y+51	; 0x33
    2a50:	9c a9       	ldd	r25, Y+52	; 0x34
    2a52:	20 e0       	ldi	r18, 0x00	; 0
    2a54:	30 e0       	ldi	r19, 0x00	; 0
    2a56:	40 e8       	ldi	r20, 0x80	; 128
    2a58:	5f e3       	ldi	r21, 0x3F	; 63
    2a5a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2a5e:	88 23       	and	r24, r24
    2a60:	2c f4       	brge	.+10     	; 0x2a6c <app+0x7a4>
		__ticks = 1;
    2a62:	81 e0       	ldi	r24, 0x01	; 1
    2a64:	90 e0       	ldi	r25, 0x00	; 0
    2a66:	98 ab       	std	Y+48, r25	; 0x30
    2a68:	8f a7       	std	Y+47, r24	; 0x2f
    2a6a:	3f c0       	rjmp	.+126    	; 0x2aea <app+0x822>
	else if (__tmp > 65535)
    2a6c:	69 a9       	ldd	r22, Y+49	; 0x31
    2a6e:	7a a9       	ldd	r23, Y+50	; 0x32
    2a70:	8b a9       	ldd	r24, Y+51	; 0x33
    2a72:	9c a9       	ldd	r25, Y+52	; 0x34
    2a74:	20 e0       	ldi	r18, 0x00	; 0
    2a76:	3f ef       	ldi	r19, 0xFF	; 255
    2a78:	4f e7       	ldi	r20, 0x7F	; 127
    2a7a:	57 e4       	ldi	r21, 0x47	; 71
    2a7c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2a80:	18 16       	cp	r1, r24
    2a82:	4c f5       	brge	.+82     	; 0x2ad6 <app+0x80e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a84:	6d a9       	ldd	r22, Y+53	; 0x35
    2a86:	7e a9       	ldd	r23, Y+54	; 0x36
    2a88:	8f a9       	ldd	r24, Y+55	; 0x37
    2a8a:	98 ad       	ldd	r25, Y+56	; 0x38
    2a8c:	20 e0       	ldi	r18, 0x00	; 0
    2a8e:	30 e0       	ldi	r19, 0x00	; 0
    2a90:	40 e2       	ldi	r20, 0x20	; 32
    2a92:	51 e4       	ldi	r21, 0x41	; 65
    2a94:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a98:	dc 01       	movw	r26, r24
    2a9a:	cb 01       	movw	r24, r22
    2a9c:	bc 01       	movw	r22, r24
    2a9e:	cd 01       	movw	r24, r26
    2aa0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2aa4:	dc 01       	movw	r26, r24
    2aa6:	cb 01       	movw	r24, r22
    2aa8:	98 ab       	std	Y+48, r25	; 0x30
    2aaa:	8f a7       	std	Y+47, r24	; 0x2f
    2aac:	0f c0       	rjmp	.+30     	; 0x2acc <app+0x804>
    2aae:	89 e1       	ldi	r24, 0x19	; 25
    2ab0:	90 e0       	ldi	r25, 0x00	; 0
    2ab2:	9e a7       	std	Y+46, r25	; 0x2e
    2ab4:	8d a7       	std	Y+45, r24	; 0x2d
    2ab6:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ab8:	9e a5       	ldd	r25, Y+46	; 0x2e
    2aba:	01 97       	sbiw	r24, 0x01	; 1
    2abc:	f1 f7       	brne	.-4      	; 0x2aba <app+0x7f2>
    2abe:	9e a7       	std	Y+46, r25	; 0x2e
    2ac0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ac2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ac4:	98 a9       	ldd	r25, Y+48	; 0x30
    2ac6:	01 97       	sbiw	r24, 0x01	; 1
    2ac8:	98 ab       	std	Y+48, r25	; 0x30
    2aca:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2acc:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ace:	98 a9       	ldd	r25, Y+48	; 0x30
    2ad0:	00 97       	sbiw	r24, 0x00	; 0
    2ad2:	69 f7       	brne	.-38     	; 0x2aae <app+0x7e6>
    2ad4:	14 c0       	rjmp	.+40     	; 0x2afe <app+0x836>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ad6:	69 a9       	ldd	r22, Y+49	; 0x31
    2ad8:	7a a9       	ldd	r23, Y+50	; 0x32
    2ada:	8b a9       	ldd	r24, Y+51	; 0x33
    2adc:	9c a9       	ldd	r25, Y+52	; 0x34
    2ade:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ae2:	dc 01       	movw	r26, r24
    2ae4:	cb 01       	movw	r24, r22
    2ae6:	98 ab       	std	Y+48, r25	; 0x30
    2ae8:	8f a7       	std	Y+47, r24	; 0x2f
    2aea:	8f a5       	ldd	r24, Y+47	; 0x2f
    2aec:	98 a9       	ldd	r25, Y+48	; 0x30
    2aee:	9c a7       	std	Y+44, r25	; 0x2c
    2af0:	8b a7       	std	Y+43, r24	; 0x2b
    2af2:	8b a5       	ldd	r24, Y+43	; 0x2b
    2af4:	9c a5       	ldd	r25, Y+44	; 0x2c
    2af6:	01 97       	sbiw	r24, 0x01	; 1
    2af8:	f1 f7       	brne	.-4      	; 0x2af6 <app+0x82e>
    2afa:	9c a7       	std	Y+44, r25	; 0x2c
    2afc:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(350);
	LCD_enuDisplayCharPOS('.',1,(i+9));
    2afe:	fe 01       	movw	r30, r28
    2b00:	e1 58       	subi	r30, 0x81	; 129
    2b02:	ff 4f       	sbci	r31, 0xFF	; 255
    2b04:	80 81       	ld	r24, Z
    2b06:	98 2f       	mov	r25, r24
    2b08:	97 5f       	subi	r25, 0xF7	; 247
    2b0a:	8e e2       	ldi	r24, 0x2E	; 46
    2b0c:	61 e0       	ldi	r22, 0x01	; 1
    2b0e:	49 2f       	mov	r20, r25
    2b10:	0e 94 10 11 	call	0x2220	; 0x2220 <LCD_enuDisplayCharPOS>
}

//display loading

	LCD_enuDisplayStringPOS("loading",1,2);
for(int i=0;i<3;i++){
    2b14:	de 01       	movw	r26, r28
    2b16:	a1 58       	subi	r26, 0x81	; 129
    2b18:	bf 4f       	sbci	r27, 0xFF	; 255
    2b1a:	fe 01       	movw	r30, r28
    2b1c:	e1 58       	subi	r30, 0x81	; 129
    2b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b20:	80 81       	ld	r24, Z
    2b22:	91 81       	ldd	r25, Z+1	; 0x01
    2b24:	01 96       	adiw	r24, 0x01	; 1
    2b26:	11 96       	adiw	r26, 0x01	; 1
    2b28:	9c 93       	st	X, r25
    2b2a:	8e 93       	st	-X, r24
    2b2c:	fe 01       	movw	r30, r28
    2b2e:	e1 58       	subi	r30, 0x81	; 129
    2b30:	ff 4f       	sbci	r31, 0xFF	; 255
    2b32:	80 81       	ld	r24, Z
    2b34:	91 81       	ldd	r25, Z+1	; 0x01
    2b36:	83 30       	cpi	r24, 0x03	; 3
    2b38:	91 05       	cpc	r25, r1
    2b3a:	0c f4       	brge	.+2      	; 0x2b3e <app+0x876>
    2b3c:	6e cf       	rjmp	.-292    	; 0x2a1a <app+0x752>
	LCD_enuDisplayCharPOS('.',1,(i+9));
}

//PASS correct  enter calculator

if(flage){
    2b3e:	fe 01       	movw	r30, r28
    2b40:	ee 57       	subi	r30, 0x7E	; 126
    2b42:	ff 4f       	sbci	r31, 0xFF	; 255
    2b44:	80 81       	ld	r24, Z
    2b46:	91 81       	ldd	r25, Z+1	; 0x01
    2b48:	00 97       	sbiw	r24, 0x00	; 0
    2b4a:	09 f4       	brne	.+2      	; 0x2b4e <app+0x886>
    2b4c:	82 c2       	rjmp	.+1284   	; 0x3052 <app+0xd8a>
    2b4e:	80 e0       	ldi	r24, 0x00	; 0
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	aa ef       	ldi	r26, 0xFA	; 250
    2b54:	b3 e4       	ldi	r27, 0x43	; 67
    2b56:	8f a3       	std	Y+39, r24	; 0x27
    2b58:	98 a7       	std	Y+40, r25	; 0x28
    2b5a:	a9 a7       	std	Y+41, r26	; 0x29
    2b5c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b5e:	6f a1       	ldd	r22, Y+39	; 0x27
    2b60:	78 a5       	ldd	r23, Y+40	; 0x28
    2b62:	89 a5       	ldd	r24, Y+41	; 0x29
    2b64:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b66:	20 e0       	ldi	r18, 0x00	; 0
    2b68:	30 e0       	ldi	r19, 0x00	; 0
    2b6a:	4a e7       	ldi	r20, 0x7A	; 122
    2b6c:	53 e4       	ldi	r21, 0x43	; 67
    2b6e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b72:	dc 01       	movw	r26, r24
    2b74:	cb 01       	movw	r24, r22
    2b76:	8b a3       	std	Y+35, r24	; 0x23
    2b78:	9c a3       	std	Y+36, r25	; 0x24
    2b7a:	ad a3       	std	Y+37, r26	; 0x25
    2b7c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b7e:	6b a1       	ldd	r22, Y+35	; 0x23
    2b80:	7c a1       	ldd	r23, Y+36	; 0x24
    2b82:	8d a1       	ldd	r24, Y+37	; 0x25
    2b84:	9e a1       	ldd	r25, Y+38	; 0x26
    2b86:	20 e0       	ldi	r18, 0x00	; 0
    2b88:	30 e0       	ldi	r19, 0x00	; 0
    2b8a:	40 e8       	ldi	r20, 0x80	; 128
    2b8c:	5f e3       	ldi	r21, 0x3F	; 63
    2b8e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2b92:	88 23       	and	r24, r24
    2b94:	2c f4       	brge	.+10     	; 0x2ba0 <app+0x8d8>
		__ticks = 1;
    2b96:	81 e0       	ldi	r24, 0x01	; 1
    2b98:	90 e0       	ldi	r25, 0x00	; 0
    2b9a:	9a a3       	std	Y+34, r25	; 0x22
    2b9c:	89 a3       	std	Y+33, r24	; 0x21
    2b9e:	3f c0       	rjmp	.+126    	; 0x2c1e <app+0x956>
	else if (__tmp > 65535)
    2ba0:	6b a1       	ldd	r22, Y+35	; 0x23
    2ba2:	7c a1       	ldd	r23, Y+36	; 0x24
    2ba4:	8d a1       	ldd	r24, Y+37	; 0x25
    2ba6:	9e a1       	ldd	r25, Y+38	; 0x26
    2ba8:	20 e0       	ldi	r18, 0x00	; 0
    2baa:	3f ef       	ldi	r19, 0xFF	; 255
    2bac:	4f e7       	ldi	r20, 0x7F	; 127
    2bae:	57 e4       	ldi	r21, 0x47	; 71
    2bb0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2bb4:	18 16       	cp	r1, r24
    2bb6:	4c f5       	brge	.+82     	; 0x2c0a <app+0x942>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bb8:	6f a1       	ldd	r22, Y+39	; 0x27
    2bba:	78 a5       	ldd	r23, Y+40	; 0x28
    2bbc:	89 a5       	ldd	r24, Y+41	; 0x29
    2bbe:	9a a5       	ldd	r25, Y+42	; 0x2a
    2bc0:	20 e0       	ldi	r18, 0x00	; 0
    2bc2:	30 e0       	ldi	r19, 0x00	; 0
    2bc4:	40 e2       	ldi	r20, 0x20	; 32
    2bc6:	51 e4       	ldi	r21, 0x41	; 65
    2bc8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bcc:	dc 01       	movw	r26, r24
    2bce:	cb 01       	movw	r24, r22
    2bd0:	bc 01       	movw	r22, r24
    2bd2:	cd 01       	movw	r24, r26
    2bd4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2bd8:	dc 01       	movw	r26, r24
    2bda:	cb 01       	movw	r24, r22
    2bdc:	9a a3       	std	Y+34, r25	; 0x22
    2bde:	89 a3       	std	Y+33, r24	; 0x21
    2be0:	0f c0       	rjmp	.+30     	; 0x2c00 <app+0x938>
    2be2:	89 e1       	ldi	r24, 0x19	; 25
    2be4:	90 e0       	ldi	r25, 0x00	; 0
    2be6:	98 a3       	std	Y+32, r25	; 0x20
    2be8:	8f 8f       	std	Y+31, r24	; 0x1f
    2bea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2bec:	98 a1       	ldd	r25, Y+32	; 0x20
    2bee:	01 97       	sbiw	r24, 0x01	; 1
    2bf0:	f1 f7       	brne	.-4      	; 0x2bee <app+0x926>
    2bf2:	98 a3       	std	Y+32, r25	; 0x20
    2bf4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bf6:	89 a1       	ldd	r24, Y+33	; 0x21
    2bf8:	9a a1       	ldd	r25, Y+34	; 0x22
    2bfa:	01 97       	sbiw	r24, 0x01	; 1
    2bfc:	9a a3       	std	Y+34, r25	; 0x22
    2bfe:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c00:	89 a1       	ldd	r24, Y+33	; 0x21
    2c02:	9a a1       	ldd	r25, Y+34	; 0x22
    2c04:	00 97       	sbiw	r24, 0x00	; 0
    2c06:	69 f7       	brne	.-38     	; 0x2be2 <app+0x91a>
    2c08:	14 c0       	rjmp	.+40     	; 0x2c32 <app+0x96a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c0a:	6b a1       	ldd	r22, Y+35	; 0x23
    2c0c:	7c a1       	ldd	r23, Y+36	; 0x24
    2c0e:	8d a1       	ldd	r24, Y+37	; 0x25
    2c10:	9e a1       	ldd	r25, Y+38	; 0x26
    2c12:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c16:	dc 01       	movw	r26, r24
    2c18:	cb 01       	movw	r24, r22
    2c1a:	9a a3       	std	Y+34, r25	; 0x22
    2c1c:	89 a3       	std	Y+33, r24	; 0x21
    2c1e:	89 a1       	ldd	r24, Y+33	; 0x21
    2c20:	9a a1       	ldd	r25, Y+34	; 0x22
    2c22:	9e 8f       	std	Y+30, r25	; 0x1e
    2c24:	8d 8f       	std	Y+29, r24	; 0x1d
    2c26:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c28:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c2a:	01 97       	sbiw	r24, 0x01	; 1
    2c2c:	f1 f7       	brne	.-4      	; 0x2c2a <app+0x962>
    2c2e:	9e 8f       	std	Y+30, r25	; 0x1e
    2c30:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(500);
	LCD_enuClear();
    2c32:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LCD_enuClear>
    2c36:	80 e0       	ldi	r24, 0x00	; 0
    2c38:	90 e0       	ldi	r25, 0x00	; 0
    2c3a:	aa ef       	ldi	r26, 0xFA	; 250
    2c3c:	b3 e4       	ldi	r27, 0x43	; 67
    2c3e:	89 8f       	std	Y+25, r24	; 0x19
    2c40:	9a 8f       	std	Y+26, r25	; 0x1a
    2c42:	ab 8f       	std	Y+27, r26	; 0x1b
    2c44:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c46:	69 8d       	ldd	r22, Y+25	; 0x19
    2c48:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c4a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c4c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c4e:	20 e0       	ldi	r18, 0x00	; 0
    2c50:	30 e0       	ldi	r19, 0x00	; 0
    2c52:	4a e7       	ldi	r20, 0x7A	; 122
    2c54:	53 e4       	ldi	r21, 0x43	; 67
    2c56:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c5a:	dc 01       	movw	r26, r24
    2c5c:	cb 01       	movw	r24, r22
    2c5e:	8d 8b       	std	Y+21, r24	; 0x15
    2c60:	9e 8b       	std	Y+22, r25	; 0x16
    2c62:	af 8b       	std	Y+23, r26	; 0x17
    2c64:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c66:	6d 89       	ldd	r22, Y+21	; 0x15
    2c68:	7e 89       	ldd	r23, Y+22	; 0x16
    2c6a:	8f 89       	ldd	r24, Y+23	; 0x17
    2c6c:	98 8d       	ldd	r25, Y+24	; 0x18
    2c6e:	20 e0       	ldi	r18, 0x00	; 0
    2c70:	30 e0       	ldi	r19, 0x00	; 0
    2c72:	40 e8       	ldi	r20, 0x80	; 128
    2c74:	5f e3       	ldi	r21, 0x3F	; 63
    2c76:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2c7a:	88 23       	and	r24, r24
    2c7c:	2c f4       	brge	.+10     	; 0x2c88 <app+0x9c0>
		__ticks = 1;
    2c7e:	81 e0       	ldi	r24, 0x01	; 1
    2c80:	90 e0       	ldi	r25, 0x00	; 0
    2c82:	9c 8b       	std	Y+20, r25	; 0x14
    2c84:	8b 8b       	std	Y+19, r24	; 0x13
    2c86:	3f c0       	rjmp	.+126    	; 0x2d06 <app+0xa3e>
	else if (__tmp > 65535)
    2c88:	6d 89       	ldd	r22, Y+21	; 0x15
    2c8a:	7e 89       	ldd	r23, Y+22	; 0x16
    2c8c:	8f 89       	ldd	r24, Y+23	; 0x17
    2c8e:	98 8d       	ldd	r25, Y+24	; 0x18
    2c90:	20 e0       	ldi	r18, 0x00	; 0
    2c92:	3f ef       	ldi	r19, 0xFF	; 255
    2c94:	4f e7       	ldi	r20, 0x7F	; 127
    2c96:	57 e4       	ldi	r21, 0x47	; 71
    2c98:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2c9c:	18 16       	cp	r1, r24
    2c9e:	4c f5       	brge	.+82     	; 0x2cf2 <app+0xa2a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ca0:	69 8d       	ldd	r22, Y+25	; 0x19
    2ca2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ca4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ca6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ca8:	20 e0       	ldi	r18, 0x00	; 0
    2caa:	30 e0       	ldi	r19, 0x00	; 0
    2cac:	40 e2       	ldi	r20, 0x20	; 32
    2cae:	51 e4       	ldi	r21, 0x41	; 65
    2cb0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2cb4:	dc 01       	movw	r26, r24
    2cb6:	cb 01       	movw	r24, r22
    2cb8:	bc 01       	movw	r22, r24
    2cba:	cd 01       	movw	r24, r26
    2cbc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cc0:	dc 01       	movw	r26, r24
    2cc2:	cb 01       	movw	r24, r22
    2cc4:	9c 8b       	std	Y+20, r25	; 0x14
    2cc6:	8b 8b       	std	Y+19, r24	; 0x13
    2cc8:	0f c0       	rjmp	.+30     	; 0x2ce8 <app+0xa20>
    2cca:	89 e1       	ldi	r24, 0x19	; 25
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	9a 8b       	std	Y+18, r25	; 0x12
    2cd0:	89 8b       	std	Y+17, r24	; 0x11
    2cd2:	89 89       	ldd	r24, Y+17	; 0x11
    2cd4:	9a 89       	ldd	r25, Y+18	; 0x12
    2cd6:	01 97       	sbiw	r24, 0x01	; 1
    2cd8:	f1 f7       	brne	.-4      	; 0x2cd6 <app+0xa0e>
    2cda:	9a 8b       	std	Y+18, r25	; 0x12
    2cdc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cde:	8b 89       	ldd	r24, Y+19	; 0x13
    2ce0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ce2:	01 97       	sbiw	r24, 0x01	; 1
    2ce4:	9c 8b       	std	Y+20, r25	; 0x14
    2ce6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ce8:	8b 89       	ldd	r24, Y+19	; 0x13
    2cea:	9c 89       	ldd	r25, Y+20	; 0x14
    2cec:	00 97       	sbiw	r24, 0x00	; 0
    2cee:	69 f7       	brne	.-38     	; 0x2cca <app+0xa02>
    2cf0:	14 c0       	rjmp	.+40     	; 0x2d1a <app+0xa52>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cf2:	6d 89       	ldd	r22, Y+21	; 0x15
    2cf4:	7e 89       	ldd	r23, Y+22	; 0x16
    2cf6:	8f 89       	ldd	r24, Y+23	; 0x17
    2cf8:	98 8d       	ldd	r25, Y+24	; 0x18
    2cfa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cfe:	dc 01       	movw	r26, r24
    2d00:	cb 01       	movw	r24, r22
    2d02:	9c 8b       	std	Y+20, r25	; 0x14
    2d04:	8b 8b       	std	Y+19, r24	; 0x13
    2d06:	8b 89       	ldd	r24, Y+19	; 0x13
    2d08:	9c 89       	ldd	r25, Y+20	; 0x14
    2d0a:	98 8b       	std	Y+16, r25	; 0x10
    2d0c:	8f 87       	std	Y+15, r24	; 0x0f
    2d0e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d10:	98 89       	ldd	r25, Y+16	; 0x10
    2d12:	01 97       	sbiw	r24, 0x01	; 1
    2d14:	f1 f7       	brne	.-4      	; 0x2d12 <app+0xa4a>
    2d16:	98 8b       	std	Y+16, r25	; 0x10
    2d18:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);
	LCD_enuDisplayStringPOS("WELCOME",1,5);
    2d1a:	87 e8       	ldi	r24, 0x87	; 135
    2d1c:	90 e0       	ldi	r25, 0x00	; 0
    2d1e:	61 e0       	ldi	r22, 0x01	; 1
    2d20:	45 e0       	ldi	r20, 0x05	; 5
    2d22:	0e 94 27 11 	call	0x224e	; 0x224e <LCD_enuDisplayStringPOS>
    2d26:	80 e0       	ldi	r24, 0x00	; 0
    2d28:	90 e0       	ldi	r25, 0x00	; 0
    2d2a:	a6 e1       	ldi	r26, 0x16	; 22
    2d2c:	b4 e4       	ldi	r27, 0x44	; 68
    2d2e:	8b 87       	std	Y+11, r24	; 0x0b
    2d30:	9c 87       	std	Y+12, r25	; 0x0c
    2d32:	ad 87       	std	Y+13, r26	; 0x0d
    2d34:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d36:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d38:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d3e:	20 e0       	ldi	r18, 0x00	; 0
    2d40:	30 e0       	ldi	r19, 0x00	; 0
    2d42:	4a e7       	ldi	r20, 0x7A	; 122
    2d44:	53 e4       	ldi	r21, 0x43	; 67
    2d46:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d4a:	dc 01       	movw	r26, r24
    2d4c:	cb 01       	movw	r24, r22
    2d4e:	8f 83       	std	Y+7, r24	; 0x07
    2d50:	98 87       	std	Y+8, r25	; 0x08
    2d52:	a9 87       	std	Y+9, r26	; 0x09
    2d54:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d56:	6f 81       	ldd	r22, Y+7	; 0x07
    2d58:	78 85       	ldd	r23, Y+8	; 0x08
    2d5a:	89 85       	ldd	r24, Y+9	; 0x09
    2d5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d5e:	20 e0       	ldi	r18, 0x00	; 0
    2d60:	30 e0       	ldi	r19, 0x00	; 0
    2d62:	40 e8       	ldi	r20, 0x80	; 128
    2d64:	5f e3       	ldi	r21, 0x3F	; 63
    2d66:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2d6a:	88 23       	and	r24, r24
    2d6c:	2c f4       	brge	.+10     	; 0x2d78 <app+0xab0>
		__ticks = 1;
    2d6e:	81 e0       	ldi	r24, 0x01	; 1
    2d70:	90 e0       	ldi	r25, 0x00	; 0
    2d72:	9e 83       	std	Y+6, r25	; 0x06
    2d74:	8d 83       	std	Y+5, r24	; 0x05
    2d76:	3f c0       	rjmp	.+126    	; 0x2df6 <app+0xb2e>
	else if (__tmp > 65535)
    2d78:	6f 81       	ldd	r22, Y+7	; 0x07
    2d7a:	78 85       	ldd	r23, Y+8	; 0x08
    2d7c:	89 85       	ldd	r24, Y+9	; 0x09
    2d7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d80:	20 e0       	ldi	r18, 0x00	; 0
    2d82:	3f ef       	ldi	r19, 0xFF	; 255
    2d84:	4f e7       	ldi	r20, 0x7F	; 127
    2d86:	57 e4       	ldi	r21, 0x47	; 71
    2d88:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2d8c:	18 16       	cp	r1, r24
    2d8e:	4c f5       	brge	.+82     	; 0x2de2 <app+0xb1a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d90:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d92:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d94:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d96:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d98:	20 e0       	ldi	r18, 0x00	; 0
    2d9a:	30 e0       	ldi	r19, 0x00	; 0
    2d9c:	40 e2       	ldi	r20, 0x20	; 32
    2d9e:	51 e4       	ldi	r21, 0x41	; 65
    2da0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2da4:	dc 01       	movw	r26, r24
    2da6:	cb 01       	movw	r24, r22
    2da8:	bc 01       	movw	r22, r24
    2daa:	cd 01       	movw	r24, r26
    2dac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2db0:	dc 01       	movw	r26, r24
    2db2:	cb 01       	movw	r24, r22
    2db4:	9e 83       	std	Y+6, r25	; 0x06
    2db6:	8d 83       	std	Y+5, r24	; 0x05
    2db8:	0f c0       	rjmp	.+30     	; 0x2dd8 <app+0xb10>
    2dba:	89 e1       	ldi	r24, 0x19	; 25
    2dbc:	90 e0       	ldi	r25, 0x00	; 0
    2dbe:	9c 83       	std	Y+4, r25	; 0x04
    2dc0:	8b 83       	std	Y+3, r24	; 0x03
    2dc2:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc4:	9c 81       	ldd	r25, Y+4	; 0x04
    2dc6:	01 97       	sbiw	r24, 0x01	; 1
    2dc8:	f1 f7       	brne	.-4      	; 0x2dc6 <app+0xafe>
    2dca:	9c 83       	std	Y+4, r25	; 0x04
    2dcc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dce:	8d 81       	ldd	r24, Y+5	; 0x05
    2dd0:	9e 81       	ldd	r25, Y+6	; 0x06
    2dd2:	01 97       	sbiw	r24, 0x01	; 1
    2dd4:	9e 83       	std	Y+6, r25	; 0x06
    2dd6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dd8:	8d 81       	ldd	r24, Y+5	; 0x05
    2dda:	9e 81       	ldd	r25, Y+6	; 0x06
    2ddc:	00 97       	sbiw	r24, 0x00	; 0
    2dde:	69 f7       	brne	.-38     	; 0x2dba <app+0xaf2>
    2de0:	14 c0       	rjmp	.+40     	; 0x2e0a <app+0xb42>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2de2:	6f 81       	ldd	r22, Y+7	; 0x07
    2de4:	78 85       	ldd	r23, Y+8	; 0x08
    2de6:	89 85       	ldd	r24, Y+9	; 0x09
    2de8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2dee:	dc 01       	movw	r26, r24
    2df0:	cb 01       	movw	r24, r22
    2df2:	9e 83       	std	Y+6, r25	; 0x06
    2df4:	8d 83       	std	Y+5, r24	; 0x05
    2df6:	8d 81       	ldd	r24, Y+5	; 0x05
    2df8:	9e 81       	ldd	r25, Y+6	; 0x06
    2dfa:	9a 83       	std	Y+2, r25	; 0x02
    2dfc:	89 83       	std	Y+1, r24	; 0x01
    2dfe:	89 81       	ldd	r24, Y+1	; 0x01
    2e00:	9a 81       	ldd	r25, Y+2	; 0x02
    2e02:	01 97       	sbiw	r24, 0x01	; 1
    2e04:	f1 f7       	brne	.-4      	; 0x2e02 <app+0xb3a>
    2e06:	9a 83       	std	Y+2, r25	; 0x02
    2e08:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(600);
	LCD_enuClear();
    2e0a:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LCD_enuClear>

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int operation=0;
    2e0e:	fe 01       	movw	r30, r28
    2e10:	e3 58       	subi	r30, 0x83	; 131
    2e12:	ff 4f       	sbci	r31, 0xFF	; 255
    2e14:	11 82       	std	Z+1, r1	; 0x01
    2e16:	10 82       	st	Z, r1
u8 kpVal;
u8 first_num_arr[8];
u8 second_num_arr[8];
u8 count1=0;
    2e18:	fe 01       	movw	r30, r28
    2e1a:	e5 58       	subi	r30, 0x85	; 133
    2e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1e:	10 82       	st	Z, r1
u8 count2=0;
    2e20:	fe 01       	movw	r30, r28
    2e22:	e6 58       	subi	r30, 0x86	; 134
    2e24:	ff 4f       	sbci	r31, 0xFF	; 255
    2e26:	10 82       	st	Z, r1
u8 ONflage=0;
    2e28:	fe 01       	movw	r30, r28
    2e2a:	e7 58       	subi	r30, 0x87	; 135
    2e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e2e:	10 82       	st	Z, r1
    2e30:	07 c1       	rjmp	.+526    	; 0x3040 <app+0xd78>
//working
while(flage){
	int operation=0;
    2e32:	fe 01       	movw	r30, r28
    2e34:	e9 58       	subi	r30, 0x89	; 137
    2e36:	ff 4f       	sbci	r31, 0xFF	; 255
    2e38:	11 82       	std	Z+1, r1	; 0x01
    2e3a:	10 82       	st	Z, r1
	u8 kpVal;
	u8 first_num_arr[8];
	u8 second_num_arr[8];
	u8 count1=0;
    2e3c:	fe 01       	movw	r30, r28
    2e3e:	eb 58       	subi	r30, 0x8B	; 139
    2e40:	ff 4f       	sbci	r31, 0xFF	; 255
    2e42:	10 82       	st	Z, r1
	u8 count2=0;
    2e44:	fe 01       	movw	r30, r28
    2e46:	ec 58       	subi	r30, 0x8C	; 140
    2e48:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4a:	10 82       	st	Z, r1
	u8 ONflage=0;
    2e4c:	fe 01       	movw	r30, r28
    2e4e:	ed 58       	subi	r30, 0x8D	; 141
    2e50:	ff 4f       	sbci	r31, 0xFF	; 255
    2e52:	10 82       	st	Z, r1
	// taking the first number
while(1){
do{
	kpVal=KEYPAD_enuGetpressedKey();
    2e54:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <KEYPAD_enuGetpressedKey>
    2e58:	fe 01       	movw	r30, r28
    2e5a:	ea 58       	subi	r30, 0x8A	; 138
    2e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5e:	80 83       	st	Z, r24
}while(kpVal== KP_NO_PRESSED_KEY);
    2e60:	fe 01       	movw	r30, r28
    2e62:	ea 58       	subi	r30, 0x8A	; 138
    2e64:	ff 4f       	sbci	r31, 0xFF	; 255
    2e66:	80 81       	ld	r24, Z
    2e68:	83 34       	cpi	r24, 0x43	; 67
    2e6a:	a1 f3       	breq	.-24     	; 0x2e54 <app+0xb8c>

if((kpVal=='-')|| (kpVal=='+')|| (kpVal=='%')||( kpVal=='x'))
    2e6c:	fe 01       	movw	r30, r28
    2e6e:	ea 58       	subi	r30, 0x8A	; 138
    2e70:	ff 4f       	sbci	r31, 0xFF	; 255
    2e72:	80 81       	ld	r24, Z
    2e74:	8d 32       	cpi	r24, 0x2D	; 45
    2e76:	91 f0       	breq	.+36     	; 0x2e9c <app+0xbd4>
    2e78:	fe 01       	movw	r30, r28
    2e7a:	ea 58       	subi	r30, 0x8A	; 138
    2e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7e:	80 81       	ld	r24, Z
    2e80:	8b 32       	cpi	r24, 0x2B	; 43
    2e82:	61 f0       	breq	.+24     	; 0x2e9c <app+0xbd4>
    2e84:	fe 01       	movw	r30, r28
    2e86:	ea 58       	subi	r30, 0x8A	; 138
    2e88:	ff 4f       	sbci	r31, 0xFF	; 255
    2e8a:	80 81       	ld	r24, Z
    2e8c:	85 32       	cpi	r24, 0x25	; 37
    2e8e:	31 f0       	breq	.+12     	; 0x2e9c <app+0xbd4>
    2e90:	fe 01       	movw	r30, r28
    2e92:	ea 58       	subi	r30, 0x8A	; 138
    2e94:	ff 4f       	sbci	r31, 0xFF	; 255
    2e96:	80 81       	ld	r24, Z
    2e98:	88 37       	cpi	r24, 0x78	; 120
    2e9a:	91 f4       	brne	.+36     	; 0x2ec0 <app+0xbf8>
{
	operation=kpVal;
    2e9c:	de 01       	movw	r26, r28
    2e9e:	a9 58       	subi	r26, 0x89	; 137
    2ea0:	bf 4f       	sbci	r27, 0xFF	; 255
    2ea2:	fe 01       	movw	r30, r28
    2ea4:	ea 58       	subi	r30, 0x8A	; 138
    2ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea8:	80 81       	ld	r24, Z
    2eaa:	88 2f       	mov	r24, r24
    2eac:	90 e0       	ldi	r25, 0x00	; 0
    2eae:	8d 93       	st	X+, r24
    2eb0:	9c 93       	st	X, r25
	LCD_enuDisplayChar(kpVal);
    2eb2:	fe 01       	movw	r30, r28
    2eb4:	ea 58       	subi	r30, 0x8A	; 138
    2eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb8:	80 81       	ld	r24, Z
    2eba:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <LCD_enuDisplayChar>
    2ebe:	b9 c0       	rjmp	.+370    	; 0x3032 <app+0xd6a>
	break;
}
else if(kpVal=='=')
    2ec0:	fe 01       	movw	r30, r28
    2ec2:	ea 58       	subi	r30, 0x8A	; 138
    2ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec6:	80 81       	ld	r24, Z
    2ec8:	8d 33       	cpi	r24, 0x3D	; 61
    2eca:	09 f5       	brne	.+66     	; 0x2f0e <app+0xc46>
{
	for(int i=0;i<count1;i++)
    2ecc:	fe 01       	movw	r30, r28
    2ece:	ef 58       	subi	r30, 0x8F	; 143
    2ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed2:	11 82       	std	Z+1, r1	; 0x01
    2ed4:	10 82       	st	Z, r1
    2ed6:	fe 01       	movw	r30, r28
    2ed8:	eb 58       	subi	r30, 0x8B	; 139
    2eda:	ff 4f       	sbci	r31, 0xFF	; 255
    2edc:	80 81       	ld	r24, Z
    2ede:	28 2f       	mov	r18, r24
    2ee0:	30 e0       	ldi	r19, 0x00	; 0
    2ee2:	fe 01       	movw	r30, r28
    2ee4:	ef 58       	subi	r30, 0x8F	; 143
    2ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee8:	80 81       	ld	r24, Z
    2eea:	91 81       	ldd	r25, Z+1	; 0x01
    2eec:	82 17       	cp	r24, r18
    2eee:	93 07       	cpc	r25, r19
    2ef0:	e4 f4       	brge	.+56     	; 0x2f2a <app+0xc62>
	{
		LCD_enuDisplayNumPOS(first_num_arr,2,9);
    2ef2:	ce 01       	movw	r24, r28
    2ef4:	89 54       	subi	r24, 0x49	; 73
    2ef6:	9f 4f       	sbci	r25, 0xFF	; 255
    2ef8:	aa 27       	eor	r26, r26
    2efa:	97 fd       	sbrc	r25, 7
    2efc:	a0 95       	com	r26
    2efe:	ba 2f       	mov	r27, r26
    2f00:	bc 01       	movw	r22, r24
    2f02:	cd 01       	movw	r24, r26
    2f04:	42 e0       	ldi	r20, 0x02	; 2
    2f06:	29 e0       	ldi	r18, 0x09	; 9
    2f08:	0e 94 41 11 	call	0x2282	; 0x2282 <LCD_enuDisplayNumPOS>
    2f0c:	0e c0       	rjmp	.+28     	; 0x2f2a <app+0xc62>
		break;
	}

}
else if(kpVal=='$')
    2f0e:	fe 01       	movw	r30, r28
    2f10:	ea 58       	subi	r30, 0x8A	; 138
    2f12:	ff 4f       	sbci	r31, 0xFF	; 255
    2f14:	80 81       	ld	r24, Z
    2f16:	84 32       	cpi	r24, 0x24	; 36
    2f18:	41 f4       	brne	.+16     	; 0x2f2a <app+0xc62>
{
     LCD_enuClear();
    2f1a:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LCD_enuClear>
     ONflage=1;
    2f1e:	fe 01       	movw	r30, r28
    2f20:	ed 58       	subi	r30, 0x8D	; 141
    2f22:	ff 4f       	sbci	r31, 0xFF	; 255
    2f24:	81 e0       	ldi	r24, 0x01	; 1
    2f26:	80 83       	st	Z, r24
    2f28:	84 c0       	rjmp	.+264    	; 0x3032 <app+0xd6a>
     break ;
}

first_num_arr[count1++]=kpVal;
    2f2a:	fe 01       	movw	r30, r28
    2f2c:	eb 58       	subi	r30, 0x8B	; 139
    2f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f30:	80 81       	ld	r24, Z
    2f32:	28 2f       	mov	r18, r24
    2f34:	30 e0       	ldi	r19, 0x00	; 0
    2f36:	ce 01       	movw	r24, r28
    2f38:	89 54       	subi	r24, 0x49	; 73
    2f3a:	9f 4f       	sbci	r25, 0xFF	; 255
    2f3c:	dc 01       	movw	r26, r24
    2f3e:	a2 0f       	add	r26, r18
    2f40:	b3 1f       	adc	r27, r19
    2f42:	fe 01       	movw	r30, r28
    2f44:	ea 58       	subi	r30, 0x8A	; 138
    2f46:	ff 4f       	sbci	r31, 0xFF	; 255
    2f48:	80 81       	ld	r24, Z
    2f4a:	8c 93       	st	X, r24
    2f4c:	de 01       	movw	r26, r28
    2f4e:	ab 58       	subi	r26, 0x8B	; 139
    2f50:	bf 4f       	sbci	r27, 0xFF	; 255
    2f52:	fe 01       	movw	r30, r28
    2f54:	eb 58       	subi	r30, 0x8B	; 139
    2f56:	ff 4f       	sbci	r31, 0xFF	; 255
    2f58:	80 81       	ld	r24, Z
    2f5a:	8f 5f       	subi	r24, 0xFF	; 255
    2f5c:	8c 93       	st	X, r24
LCD_enuDisplayNum(kpVal);
    2f5e:	fe 01       	movw	r30, r28
    2f60:	ea 58       	subi	r30, 0x8A	; 138
    2f62:	ff 4f       	sbci	r31, 0xFF	; 255
    2f64:	80 81       	ld	r24, Z
    2f66:	88 2f       	mov	r24, r24
    2f68:	90 e0       	ldi	r25, 0x00	; 0
    2f6a:	a0 e0       	ldi	r26, 0x00	; 0
    2f6c:	b0 e0       	ldi	r27, 0x00	; 0
    2f6e:	bc 01       	movw	r22, r24
    2f70:	cd 01       	movw	r24, r26
    2f72:	0e 94 54 10 	call	0x20a8	; 0x20a8 <LCD_enuDisplayNum>
    2f76:	6e cf       	rjmp	.-292    	; 0x2e54 <app+0xb8c>

while(!ONflage)
{

	do{
		kpVal=KEYPAD_enuGetpressedKey();
    2f78:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <KEYPAD_enuGetpressedKey>
    2f7c:	fe 01       	movw	r30, r28
    2f7e:	ea 58       	subi	r30, 0x8A	; 138
    2f80:	ff 4f       	sbci	r31, 0xFF	; 255
    2f82:	80 83       	st	Z, r24
	}while(kpVal== KP_NO_PRESSED_KEY);
    2f84:	fe 01       	movw	r30, r28
    2f86:	ea 58       	subi	r30, 0x8A	; 138
    2f88:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8a:	80 81       	ld	r24, Z
    2f8c:	83 34       	cpi	r24, 0x43	; 67
    2f8e:	a1 f3       	breq	.-24     	; 0x2f78 <app+0xcb0>
	if(kpVal=='=')
    2f90:	fe 01       	movw	r30, r28
    2f92:	ea 58       	subi	r30, 0x8A	; 138
    2f94:	ff 4f       	sbci	r31, 0xFF	; 255
    2f96:	80 81       	ld	r24, Z
    2f98:	8d 33       	cpi	r24, 0x3D	; 61
    2f9a:	b9 f4       	brne	.+46     	; 0x2fca <app+0xd02>
	{
		arrToNum(first_num_arr,second_num_arr,count1,count2,operation);
    2f9c:	fe 01       	movw	r30, r28
    2f9e:	e9 58       	subi	r30, 0x89	; 137
    2fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa2:	50 81       	ld	r21, Z
    2fa4:	ce 01       	movw	r24, r28
    2fa6:	89 54       	subi	r24, 0x49	; 73
    2fa8:	9f 4f       	sbci	r25, 0xFF	; 255
    2faa:	9e 01       	movw	r18, r28
    2fac:	21 54       	subi	r18, 0x41	; 65
    2fae:	3f 4f       	sbci	r19, 0xFF	; 255
    2fb0:	fe 01       	movw	r30, r28
    2fb2:	eb 58       	subi	r30, 0x8B	; 139
    2fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb6:	de 01       	movw	r26, r28
    2fb8:	ac 58       	subi	r26, 0x8C	; 140
    2fba:	bf 4f       	sbci	r27, 0xFF	; 255
    2fbc:	b9 01       	movw	r22, r18
    2fbe:	40 81       	ld	r20, Z
    2fc0:	2c 91       	ld	r18, X
    2fc2:	05 2f       	mov	r16, r21
    2fc4:	0e 94 3b 18 	call	0x3076	; 0x3076 <arrToNum>
    2fc8:	3b c0       	rjmp	.+118    	; 0x3040 <app+0xd78>
		break;
	}

	else if(kpVal=='$')
    2fca:	fe 01       	movw	r30, r28
    2fcc:	ea 58       	subi	r30, 0x8A	; 138
    2fce:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd0:	80 81       	ld	r24, Z
    2fd2:	84 32       	cpi	r24, 0x24	; 36
    2fd4:	41 f4       	brne	.+16     	; 0x2fe6 <app+0xd1e>
	{
	     LCD_enuClear();
    2fd6:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LCD_enuClear>
	     ONflage=1;
    2fda:	fe 01       	movw	r30, r28
    2fdc:	ed 58       	subi	r30, 0x8D	; 141
    2fde:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe0:	81 e0       	ldi	r24, 0x01	; 1
    2fe2:	80 83       	st	Z, r24
    2fe4:	2d c0       	rjmp	.+90     	; 0x3040 <app+0xd78>
	     break;
	}

	second_num_arr[count2++]=kpVal;
    2fe6:	fe 01       	movw	r30, r28
    2fe8:	ec 58       	subi	r30, 0x8C	; 140
    2fea:	ff 4f       	sbci	r31, 0xFF	; 255
    2fec:	80 81       	ld	r24, Z
    2fee:	28 2f       	mov	r18, r24
    2ff0:	30 e0       	ldi	r19, 0x00	; 0
    2ff2:	ce 01       	movw	r24, r28
    2ff4:	81 54       	subi	r24, 0x41	; 65
    2ff6:	9f 4f       	sbci	r25, 0xFF	; 255
    2ff8:	dc 01       	movw	r26, r24
    2ffa:	a2 0f       	add	r26, r18
    2ffc:	b3 1f       	adc	r27, r19
    2ffe:	fe 01       	movw	r30, r28
    3000:	ea 58       	subi	r30, 0x8A	; 138
    3002:	ff 4f       	sbci	r31, 0xFF	; 255
    3004:	80 81       	ld	r24, Z
    3006:	8c 93       	st	X, r24
    3008:	de 01       	movw	r26, r28
    300a:	ac 58       	subi	r26, 0x8C	; 140
    300c:	bf 4f       	sbci	r27, 0xFF	; 255
    300e:	fe 01       	movw	r30, r28
    3010:	ec 58       	subi	r30, 0x8C	; 140
    3012:	ff 4f       	sbci	r31, 0xFF	; 255
    3014:	80 81       	ld	r24, Z
    3016:	8f 5f       	subi	r24, 0xFF	; 255
    3018:	8c 93       	st	X, r24
	LCD_enuDisplayNum(kpVal);
    301a:	fe 01       	movw	r30, r28
    301c:	ea 58       	subi	r30, 0x8A	; 138
    301e:	ff 4f       	sbci	r31, 0xFF	; 255
    3020:	80 81       	ld	r24, Z
    3022:	88 2f       	mov	r24, r24
    3024:	90 e0       	ldi	r25, 0x00	; 0
    3026:	a0 e0       	ldi	r26, 0x00	; 0
    3028:	b0 e0       	ldi	r27, 0x00	; 0
    302a:	bc 01       	movw	r22, r24
    302c:	cd 01       	movw	r24, r26
    302e:	0e 94 54 10 	call	0x20a8	; 0x20a8 <LCD_enuDisplayNum>

}

// taking the second number

while(!ONflage)
    3032:	fe 01       	movw	r30, r28
    3034:	ed 58       	subi	r30, 0x8D	; 141
    3036:	ff 4f       	sbci	r31, 0xFF	; 255
    3038:	80 81       	ld	r24, Z
    303a:	88 23       	and	r24, r24
    303c:	09 f4       	brne	.+2      	; 0x3040 <app+0xd78>
    303e:	9c cf       	rjmp	.-200    	; 0x2f78 <app+0xcb0>
u8 second_num_arr[8];
u8 count1=0;
u8 count2=0;
u8 ONflage=0;
//working
while(flage){
    3040:	fe 01       	movw	r30, r28
    3042:	ee 57       	subi	r30, 0x7E	; 126
    3044:	ff 4f       	sbci	r31, 0xFF	; 255
    3046:	80 81       	ld	r24, Z
    3048:	91 81       	ldd	r25, Z+1	; 0x01
    304a:	00 97       	sbiw	r24, 0x00	; 0
    304c:	09 f0       	breq	.+2      	; 0x3050 <app+0xd88>
    304e:	f1 ce       	rjmp	.-542    	; 0x2e32 <app+0xb6a>
    3050:	06 c0       	rjmp	.+12     	; 0x305e <app+0xd96>

}
}
else
{
	LCD_enuClear();
    3052:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LCD_enuClear>
	LCD_enuDisplayString("WRONG PASSWORD");
    3056:	8f e8       	ldi	r24, 0x8F	; 143
    3058:	90 e0       	ldi	r25, 0x00	; 0
    305a:	0e 94 24 10 	call	0x2048	; 0x2048 <LCD_enuDisplayString>





}
    305e:	ca 53       	subi	r28, 0x3A	; 58
    3060:	df 4f       	sbci	r29, 0xFF	; 255
    3062:	0f b6       	in	r0, 0x3f	; 63
    3064:	f8 94       	cli
    3066:	de bf       	out	0x3e, r29	; 62
    3068:	0f be       	out	0x3f, r0	; 63
    306a:	cd bf       	out	0x3d, r28	; 61
    306c:	cf 91       	pop	r28
    306e:	df 91       	pop	r29
    3070:	1f 91       	pop	r17
    3072:	0f 91       	pop	r16
    3074:	08 95       	ret

00003076 <arrToNum>:
void arrToNum(u8*ptr1,u8*ptr2,u8 n1,u8 n2,u8 operation)
{
    3076:	0f 93       	push	r16
    3078:	df 93       	push	r29
    307a:	cf 93       	push	r28
    307c:	cd b7       	in	r28, 0x3d	; 61
    307e:	de b7       	in	r29, 0x3e	; 62
    3080:	a1 97       	sbiw	r28, 0x21	; 33
    3082:	0f b6       	in	r0, 0x3f	; 63
    3084:	f8 94       	cli
    3086:	de bf       	out	0x3e, r29	; 62
    3088:	0f be       	out	0x3f, r0	; 63
    308a:	cd bf       	out	0x3d, r28	; 61
    308c:	9a 8f       	std	Y+26, r25	; 0x1a
    308e:	89 8f       	std	Y+25, r24	; 0x19
    3090:	7c 8f       	std	Y+28, r23	; 0x1c
    3092:	6b 8f       	std	Y+27, r22	; 0x1b
    3094:	4d 8f       	std	Y+29, r20	; 0x1d
    3096:	2e 8f       	std	Y+30, r18	; 0x1e
    3098:	0f 8f       	std	Y+31, r16	; 0x1f
	int num1=ptr1[0];
    309a:	e9 8d       	ldd	r30, Y+25	; 0x19
    309c:	fa 8d       	ldd	r31, Y+26	; 0x1a
    309e:	80 81       	ld	r24, Z
    30a0:	88 2f       	mov	r24, r24
    30a2:	90 e0       	ldi	r25, 0x00	; 0
    30a4:	98 8f       	std	Y+24, r25	; 0x18
    30a6:	8f 8b       	std	Y+23, r24	; 0x17
    int num2=ptr2[0];
    30a8:	eb 8d       	ldd	r30, Y+27	; 0x1b
    30aa:	fc 8d       	ldd	r31, Y+28	; 0x1c
    30ac:	80 81       	ld	r24, Z
    30ae:	88 2f       	mov	r24, r24
    30b0:	90 e0       	ldi	r25, 0x00	; 0
    30b2:	9e 8b       	std	Y+22, r25	; 0x16
    30b4:	8d 8b       	std	Y+21, r24	; 0x15

	for(int i=1;i<n1;i++)
    30b6:	81 e0       	ldi	r24, 0x01	; 1
    30b8:	90 e0       	ldi	r25, 0x00	; 0
    30ba:	9c 83       	std	Y+4, r25	; 0x04
    30bc:	8b 83       	std	Y+3, r24	; 0x03
    30be:	20 c0       	rjmp	.+64     	; 0x3100 <arrToNum+0x8a>
	{
		num1=num1 * 10 + ptr1[i];
    30c0:	8f 89       	ldd	r24, Y+23	; 0x17
    30c2:	98 8d       	ldd	r25, Y+24	; 0x18
    30c4:	9c 01       	movw	r18, r24
    30c6:	22 0f       	add	r18, r18
    30c8:	33 1f       	adc	r19, r19
    30ca:	c9 01       	movw	r24, r18
    30cc:	88 0f       	add	r24, r24
    30ce:	99 1f       	adc	r25, r25
    30d0:	88 0f       	add	r24, r24
    30d2:	99 1f       	adc	r25, r25
    30d4:	a9 01       	movw	r20, r18
    30d6:	48 0f       	add	r20, r24
    30d8:	59 1f       	adc	r21, r25
    30da:	2b 81       	ldd	r18, Y+3	; 0x03
    30dc:	3c 81       	ldd	r19, Y+4	; 0x04
    30de:	89 8d       	ldd	r24, Y+25	; 0x19
    30e0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    30e2:	fc 01       	movw	r30, r24
    30e4:	e2 0f       	add	r30, r18
    30e6:	f3 1f       	adc	r31, r19
    30e8:	80 81       	ld	r24, Z
    30ea:	88 2f       	mov	r24, r24
    30ec:	90 e0       	ldi	r25, 0x00	; 0
    30ee:	84 0f       	add	r24, r20
    30f0:	95 1f       	adc	r25, r21
    30f2:	98 8f       	std	Y+24, r25	; 0x18
    30f4:	8f 8b       	std	Y+23, r24	; 0x17
void arrToNum(u8*ptr1,u8*ptr2,u8 n1,u8 n2,u8 operation)
{
	int num1=ptr1[0];
    int num2=ptr2[0];

	for(int i=1;i<n1;i++)
    30f6:	8b 81       	ldd	r24, Y+3	; 0x03
    30f8:	9c 81       	ldd	r25, Y+4	; 0x04
    30fa:	01 96       	adiw	r24, 0x01	; 1
    30fc:	9c 83       	std	Y+4, r25	; 0x04
    30fe:	8b 83       	std	Y+3, r24	; 0x03
    3100:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3102:	28 2f       	mov	r18, r24
    3104:	30 e0       	ldi	r19, 0x00	; 0
    3106:	8b 81       	ldd	r24, Y+3	; 0x03
    3108:	9c 81       	ldd	r25, Y+4	; 0x04
    310a:	82 17       	cp	r24, r18
    310c:	93 07       	cpc	r25, r19
    310e:	c4 f2       	brlt	.-80     	; 0x30c0 <arrToNum+0x4a>
	{
		num1=num1 * 10 + ptr1[i];
	}


	for(int i=1;i<n2;i++)
    3110:	81 e0       	ldi	r24, 0x01	; 1
    3112:	90 e0       	ldi	r25, 0x00	; 0
    3114:	9a 83       	std	Y+2, r25	; 0x02
    3116:	89 83       	std	Y+1, r24	; 0x01
    3118:	20 c0       	rjmp	.+64     	; 0x315a <arrToNum+0xe4>
		{
			num2=num2 * 10 +ptr2[i];
    311a:	8d 89       	ldd	r24, Y+21	; 0x15
    311c:	9e 89       	ldd	r25, Y+22	; 0x16
    311e:	9c 01       	movw	r18, r24
    3120:	22 0f       	add	r18, r18
    3122:	33 1f       	adc	r19, r19
    3124:	c9 01       	movw	r24, r18
    3126:	88 0f       	add	r24, r24
    3128:	99 1f       	adc	r25, r25
    312a:	88 0f       	add	r24, r24
    312c:	99 1f       	adc	r25, r25
    312e:	a9 01       	movw	r20, r18
    3130:	48 0f       	add	r20, r24
    3132:	59 1f       	adc	r21, r25
    3134:	29 81       	ldd	r18, Y+1	; 0x01
    3136:	3a 81       	ldd	r19, Y+2	; 0x02
    3138:	8b 8d       	ldd	r24, Y+27	; 0x1b
    313a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    313c:	fc 01       	movw	r30, r24
    313e:	e2 0f       	add	r30, r18
    3140:	f3 1f       	adc	r31, r19
    3142:	80 81       	ld	r24, Z
    3144:	88 2f       	mov	r24, r24
    3146:	90 e0       	ldi	r25, 0x00	; 0
    3148:	84 0f       	add	r24, r20
    314a:	95 1f       	adc	r25, r21
    314c:	9e 8b       	std	Y+22, r25	; 0x16
    314e:	8d 8b       	std	Y+21, r24	; 0x15
	{
		num1=num1 * 10 + ptr1[i];
	}


	for(int i=1;i<n2;i++)
    3150:	89 81       	ldd	r24, Y+1	; 0x01
    3152:	9a 81       	ldd	r25, Y+2	; 0x02
    3154:	01 96       	adiw	r24, 0x01	; 1
    3156:	9a 83       	std	Y+2, r25	; 0x02
    3158:	89 83       	std	Y+1, r24	; 0x01
    315a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    315c:	28 2f       	mov	r18, r24
    315e:	30 e0       	ldi	r19, 0x00	; 0
    3160:	89 81       	ldd	r24, Y+1	; 0x01
    3162:	9a 81       	ldd	r25, Y+2	; 0x02
    3164:	82 17       	cp	r24, r18
    3166:	93 07       	cpc	r25, r19
    3168:	c4 f2       	brlt	.-80     	; 0x311a <arrToNum+0xa4>
	u32 sum , sub , mul , div ;

	//LCD_enuDisplayNumPOS(num1,2,2);
	//LCD_enuDisplayNumPOS(num2,2,6);

	switch(operation)
    316a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    316c:	28 2f       	mov	r18, r24
    316e:	30 e0       	ldi	r19, 0x00	; 0
    3170:	39 a3       	std	Y+33, r19	; 0x21
    3172:	28 a3       	std	Y+32, r18	; 0x20
    3174:	48 a1       	ldd	r20, Y+32	; 0x20
    3176:	59 a1       	ldd	r21, Y+33	; 0x21
    3178:	4d 32       	cpi	r20, 0x2D	; 45
    317a:	51 05       	cpc	r21, r1
    317c:	89 f1       	breq	.+98     	; 0x31e0 <arrToNum+0x16a>
    317e:	88 a1       	ldd	r24, Y+32	; 0x20
    3180:	99 a1       	ldd	r25, Y+33	; 0x21
    3182:	8e 32       	cpi	r24, 0x2E	; 46
    3184:	91 05       	cpc	r25, r1
    3186:	64 f4       	brge	.+24     	; 0x31a0 <arrToNum+0x12a>
    3188:	28 a1       	ldd	r18, Y+32	; 0x20
    318a:	39 a1       	ldd	r19, Y+33	; 0x21
    318c:	25 32       	cpi	r18, 0x25	; 37
    318e:	31 05       	cpc	r19, r1
    3190:	09 f4       	brne	.+2      	; 0x3194 <arrToNum+0x11e>
    3192:	87 c0       	rjmp	.+270    	; 0x32a2 <arrToNum+0x22c>
    3194:	48 a1       	ldd	r20, Y+32	; 0x20
    3196:	59 a1       	ldd	r21, Y+33	; 0x21
    3198:	4b 32       	cpi	r20, 0x2B	; 43
    319a:	51 05       	cpc	r21, r1
    319c:	41 f0       	breq	.+16     	; 0x31ae <arrToNum+0x138>
    319e:	a8 c0       	rjmp	.+336    	; 0x32f0 <arrToNum+0x27a>
    31a0:	88 a1       	ldd	r24, Y+32	; 0x20
    31a2:	99 a1       	ldd	r25, Y+33	; 0x21
    31a4:	88 37       	cpi	r24, 0x78	; 120
    31a6:	91 05       	cpc	r25, r1
    31a8:	09 f4       	brne	.+2      	; 0x31ac <arrToNum+0x136>
    31aa:	5c c0       	rjmp	.+184    	; 0x3264 <arrToNum+0x1ee>
    31ac:	a1 c0       	rjmp	.+322    	; 0x32f0 <arrToNum+0x27a>
	{
	    case '+':
	    	      {
	    	    	  sum=num1+num2;
    31ae:	2f 89       	ldd	r18, Y+23	; 0x17
    31b0:	38 8d       	ldd	r19, Y+24	; 0x18
    31b2:	8d 89       	ldd	r24, Y+21	; 0x15
    31b4:	9e 89       	ldd	r25, Y+22	; 0x16
    31b6:	82 0f       	add	r24, r18
    31b8:	93 1f       	adc	r25, r19
    31ba:	aa 27       	eor	r26, r26
    31bc:	97 fd       	sbrc	r25, 7
    31be:	a0 95       	com	r26
    31c0:	ba 2f       	mov	r27, r26
    31c2:	89 8b       	std	Y+17, r24	; 0x11
    31c4:	9a 8b       	std	Y+18, r25	; 0x12
    31c6:	ab 8b       	std	Y+19, r26	; 0x13
    31c8:	bc 8b       	std	Y+20, r27	; 0x14
	    	    	  LCD_enuDisplayNumPOS(sum,2,12);
    31ca:	89 89       	ldd	r24, Y+17	; 0x11
    31cc:	9a 89       	ldd	r25, Y+18	; 0x12
    31ce:	ab 89       	ldd	r26, Y+19	; 0x13
    31d0:	bc 89       	ldd	r27, Y+20	; 0x14
    31d2:	bc 01       	movw	r22, r24
    31d4:	cd 01       	movw	r24, r26
    31d6:	42 e0       	ldi	r20, 0x02	; 2
    31d8:	2c e0       	ldi	r18, 0x0C	; 12
    31da:	0e 94 41 11 	call	0x2282	; 0x2282 <LCD_enuDisplayNumPOS>
    31de:	88 c0       	rjmp	.+272    	; 0x32f0 <arrToNum+0x27a>
	    	    	  break;
	    	      }
	    case '-':{   if(num1<num2){
    31e0:	2f 89       	ldd	r18, Y+23	; 0x17
    31e2:	38 8d       	ldd	r19, Y+24	; 0x18
    31e4:	8d 89       	ldd	r24, Y+21	; 0x15
    31e6:	9e 89       	ldd	r25, Y+22	; 0x16
    31e8:	28 17       	cp	r18, r24
    31ea:	39 07       	cpc	r19, r25
    31ec:	04 f5       	brge	.+64     	; 0x322e <arrToNum+0x1b8>
                     sub=num2-num1;
    31ee:	2d 89       	ldd	r18, Y+21	; 0x15
    31f0:	3e 89       	ldd	r19, Y+22	; 0x16
    31f2:	8f 89       	ldd	r24, Y+23	; 0x17
    31f4:	98 8d       	ldd	r25, Y+24	; 0x18
    31f6:	a9 01       	movw	r20, r18
    31f8:	48 1b       	sub	r20, r24
    31fa:	59 0b       	sbc	r21, r25
    31fc:	ca 01       	movw	r24, r20
    31fe:	aa 27       	eor	r26, r26
    3200:	97 fd       	sbrc	r25, 7
    3202:	a0 95       	com	r26
    3204:	ba 2f       	mov	r27, r26
    3206:	8d 87       	std	Y+13, r24	; 0x0d
    3208:	9e 87       	std	Y+14, r25	; 0x0e
    320a:	af 87       	std	Y+15, r26	; 0x0f
    320c:	b8 8b       	std	Y+16, r27	; 0x10
                     LCD_enuDisplayCharPOS('-',2,11);
    320e:	8d e2       	ldi	r24, 0x2D	; 45
    3210:	62 e0       	ldi	r22, 0x02	; 2
    3212:	4b e0       	ldi	r20, 0x0B	; 11
    3214:	0e 94 10 11 	call	0x2220	; 0x2220 <LCD_enuDisplayCharPOS>
                     LCD_enuDisplayNumPOS(sub,2,12);
    3218:	8d 85       	ldd	r24, Y+13	; 0x0d
    321a:	9e 85       	ldd	r25, Y+14	; 0x0e
    321c:	af 85       	ldd	r26, Y+15	; 0x0f
    321e:	b8 89       	ldd	r27, Y+16	; 0x10
    3220:	bc 01       	movw	r22, r24
    3222:	cd 01       	movw	r24, r26
    3224:	42 e0       	ldi	r20, 0x02	; 2
    3226:	2c e0       	ldi	r18, 0x0C	; 12
    3228:	0e 94 41 11 	call	0x2282	; 0x2282 <LCD_enuDisplayNumPOS>
    322c:	61 c0       	rjmp	.+194    	; 0x32f0 <arrToNum+0x27a>
                     break;
	                                  }
	             	sub=num1-num2;
    322e:	2f 89       	ldd	r18, Y+23	; 0x17
    3230:	38 8d       	ldd	r19, Y+24	; 0x18
    3232:	8d 89       	ldd	r24, Y+21	; 0x15
    3234:	9e 89       	ldd	r25, Y+22	; 0x16
    3236:	a9 01       	movw	r20, r18
    3238:	48 1b       	sub	r20, r24
    323a:	59 0b       	sbc	r21, r25
    323c:	ca 01       	movw	r24, r20
    323e:	aa 27       	eor	r26, r26
    3240:	97 fd       	sbrc	r25, 7
    3242:	a0 95       	com	r26
    3244:	ba 2f       	mov	r27, r26
    3246:	8d 87       	std	Y+13, r24	; 0x0d
    3248:	9e 87       	std	Y+14, r25	; 0x0e
    324a:	af 87       	std	Y+15, r26	; 0x0f
    324c:	b8 8b       	std	Y+16, r27	; 0x10
	    	        LCD_enuDisplayNumPOS(sub,2,12);
    324e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3250:	9e 85       	ldd	r25, Y+14	; 0x0e
    3252:	af 85       	ldd	r26, Y+15	; 0x0f
    3254:	b8 89       	ldd	r27, Y+16	; 0x10
    3256:	bc 01       	movw	r22, r24
    3258:	cd 01       	movw	r24, r26
    325a:	42 e0       	ldi	r20, 0x02	; 2
    325c:	2c e0       	ldi	r18, 0x0C	; 12
    325e:	0e 94 41 11 	call	0x2282	; 0x2282 <LCD_enuDisplayNumPOS>
    3262:	46 c0       	rjmp	.+140    	; 0x32f0 <arrToNum+0x27a>
	    	        break;
	    }
	    case 'x': {
	            	mul=num1*num2;
    3264:	2f 89       	ldd	r18, Y+23	; 0x17
    3266:	38 8d       	ldd	r19, Y+24	; 0x18
    3268:	8d 89       	ldd	r24, Y+21	; 0x15
    326a:	9e 89       	ldd	r25, Y+22	; 0x16
    326c:	ac 01       	movw	r20, r24
    326e:	24 9f       	mul	r18, r20
    3270:	c0 01       	movw	r24, r0
    3272:	25 9f       	mul	r18, r21
    3274:	90 0d       	add	r25, r0
    3276:	34 9f       	mul	r19, r20
    3278:	90 0d       	add	r25, r0
    327a:	11 24       	eor	r1, r1
    327c:	aa 27       	eor	r26, r26
    327e:	97 fd       	sbrc	r25, 7
    3280:	a0 95       	com	r26
    3282:	ba 2f       	mov	r27, r26
    3284:	89 87       	std	Y+9, r24	; 0x09
    3286:	9a 87       	std	Y+10, r25	; 0x0a
    3288:	ab 87       	std	Y+11, r26	; 0x0b
    328a:	bc 87       	std	Y+12, r27	; 0x0c
	    	        LCD_enuDisplayNumPOS(mul,2,10);
    328c:	89 85       	ldd	r24, Y+9	; 0x09
    328e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3290:	ab 85       	ldd	r26, Y+11	; 0x0b
    3292:	bc 85       	ldd	r27, Y+12	; 0x0c
    3294:	bc 01       	movw	r22, r24
    3296:	cd 01       	movw	r24, r26
    3298:	42 e0       	ldi	r20, 0x02	; 2
    329a:	2a e0       	ldi	r18, 0x0A	; 10
    329c:	0e 94 41 11 	call	0x2282	; 0x2282 <LCD_enuDisplayNumPOS>
    32a0:	27 c0       	rjmp	.+78     	; 0x32f0 <arrToNum+0x27a>
	    	        break;
	    }
	    case '%': { if(num2==0)
    32a2:	8d 89       	ldd	r24, Y+21	; 0x15
    32a4:	9e 89       	ldd	r25, Y+22	; 0x16
    32a6:	00 97       	sbiw	r24, 0x00	; 0
    32a8:	49 f4       	brne	.+18     	; 0x32bc <arrToNum+0x246>
	                   {
	    	                 LCD_enuClear();
    32aa:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LCD_enuClear>
	    	                 LCD_enuDisplayStringPOS("ERROR1",1,3);
    32ae:	8e e9       	ldi	r24, 0x9E	; 158
    32b0:	90 e0       	ldi	r25, 0x00	; 0
    32b2:	61 e0       	ldi	r22, 0x01	; 1
    32b4:	43 e0       	ldi	r20, 0x03	; 3
    32b6:	0e 94 27 11 	call	0x224e	; 0x224e <LCD_enuDisplayStringPOS>
    32ba:	1a c0       	rjmp	.+52     	; 0x32f0 <arrToNum+0x27a>
	    	                 break;
	                   }

	               div=num1/num2;
    32bc:	8f 89       	ldd	r24, Y+23	; 0x17
    32be:	98 8d       	ldd	r25, Y+24	; 0x18
    32c0:	2d 89       	ldd	r18, Y+21	; 0x15
    32c2:	3e 89       	ldd	r19, Y+22	; 0x16
    32c4:	b9 01       	movw	r22, r18
    32c6:	0e 94 8d 19 	call	0x331a	; 0x331a <__divmodhi4>
    32ca:	cb 01       	movw	r24, r22
    32cc:	aa 27       	eor	r26, r26
    32ce:	97 fd       	sbrc	r25, 7
    32d0:	a0 95       	com	r26
    32d2:	ba 2f       	mov	r27, r26
    32d4:	8d 83       	std	Y+5, r24	; 0x05
    32d6:	9e 83       	std	Y+6, r25	; 0x06
    32d8:	af 83       	std	Y+7, r26	; 0x07
    32da:	b8 87       	std	Y+8, r27	; 0x08
	    	       LCD_enuDisplayNumPOS(div,2,10);
    32dc:	8d 81       	ldd	r24, Y+5	; 0x05
    32de:	9e 81       	ldd	r25, Y+6	; 0x06
    32e0:	af 81       	ldd	r26, Y+7	; 0x07
    32e2:	b8 85       	ldd	r27, Y+8	; 0x08
    32e4:	bc 01       	movw	r22, r24
    32e6:	cd 01       	movw	r24, r26
    32e8:	42 e0       	ldi	r20, 0x02	; 2
    32ea:	2a e0       	ldi	r18, 0x0A	; 10
    32ec:	0e 94 41 11 	call	0x2282	; 0x2282 <LCD_enuDisplayNumPOS>
	    	       break;
	    }
	}


}
    32f0:	a1 96       	adiw	r28, 0x21	; 33
    32f2:	0f b6       	in	r0, 0x3f	; 63
    32f4:	f8 94       	cli
    32f6:	de bf       	out	0x3e, r29	; 62
    32f8:	0f be       	out	0x3f, r0	; 63
    32fa:	cd bf       	out	0x3d, r28	; 61
    32fc:	cf 91       	pop	r28
    32fe:	df 91       	pop	r29
    3300:	0f 91       	pop	r16
    3302:	08 95       	ret

00003304 <main>:
#include"errorState.h"
#include"DIO_int.h"
#include"KEYPAD_int.h"
#include"LCD_int.h"
#include"app.h"
int main(void){
    3304:	df 93       	push	r29
    3306:	cf 93       	push	r28
    3308:	cd b7       	in	r28, 0x3d	; 61
    330a:	de b7       	in	r29, 0x3e	; 62

app();
    330c:	0e 94 64 11 	call	0x22c8	; 0x22c8 <app>
	//LCD_enuDisplayString("MANAR");
	LCD_enuDisplayNumPOS(56,2,5);
	while(1);*/


	return 1;
    3310:	81 e0       	ldi	r24, 0x01	; 1
    3312:	90 e0       	ldi	r25, 0x00	; 0
}
    3314:	cf 91       	pop	r28
    3316:	df 91       	pop	r29
    3318:	08 95       	ret

0000331a <__divmodhi4>:
    331a:	97 fb       	bst	r25, 7
    331c:	09 2e       	mov	r0, r25
    331e:	07 26       	eor	r0, r23
    3320:	0a d0       	rcall	.+20     	; 0x3336 <__divmodhi4_neg1>
    3322:	77 fd       	sbrc	r23, 7
    3324:	04 d0       	rcall	.+8      	; 0x332e <__divmodhi4_neg2>
    3326:	2e d0       	rcall	.+92     	; 0x3384 <__udivmodhi4>
    3328:	06 d0       	rcall	.+12     	; 0x3336 <__divmodhi4_neg1>
    332a:	00 20       	and	r0, r0
    332c:	1a f4       	brpl	.+6      	; 0x3334 <__divmodhi4_exit>

0000332e <__divmodhi4_neg2>:
    332e:	70 95       	com	r23
    3330:	61 95       	neg	r22
    3332:	7f 4f       	sbci	r23, 0xFF	; 255

00003334 <__divmodhi4_exit>:
    3334:	08 95       	ret

00003336 <__divmodhi4_neg1>:
    3336:	f6 f7       	brtc	.-4      	; 0x3334 <__divmodhi4_exit>
    3338:	90 95       	com	r25
    333a:	81 95       	neg	r24
    333c:	9f 4f       	sbci	r25, 0xFF	; 255
    333e:	08 95       	ret

00003340 <__udivmodsi4>:
    3340:	a1 e2       	ldi	r26, 0x21	; 33
    3342:	1a 2e       	mov	r1, r26
    3344:	aa 1b       	sub	r26, r26
    3346:	bb 1b       	sub	r27, r27
    3348:	fd 01       	movw	r30, r26
    334a:	0d c0       	rjmp	.+26     	; 0x3366 <__udivmodsi4_ep>

0000334c <__udivmodsi4_loop>:
    334c:	aa 1f       	adc	r26, r26
    334e:	bb 1f       	adc	r27, r27
    3350:	ee 1f       	adc	r30, r30
    3352:	ff 1f       	adc	r31, r31
    3354:	a2 17       	cp	r26, r18
    3356:	b3 07       	cpc	r27, r19
    3358:	e4 07       	cpc	r30, r20
    335a:	f5 07       	cpc	r31, r21
    335c:	20 f0       	brcs	.+8      	; 0x3366 <__udivmodsi4_ep>
    335e:	a2 1b       	sub	r26, r18
    3360:	b3 0b       	sbc	r27, r19
    3362:	e4 0b       	sbc	r30, r20
    3364:	f5 0b       	sbc	r31, r21

00003366 <__udivmodsi4_ep>:
    3366:	66 1f       	adc	r22, r22
    3368:	77 1f       	adc	r23, r23
    336a:	88 1f       	adc	r24, r24
    336c:	99 1f       	adc	r25, r25
    336e:	1a 94       	dec	r1
    3370:	69 f7       	brne	.-38     	; 0x334c <__udivmodsi4_loop>
    3372:	60 95       	com	r22
    3374:	70 95       	com	r23
    3376:	80 95       	com	r24
    3378:	90 95       	com	r25
    337a:	9b 01       	movw	r18, r22
    337c:	ac 01       	movw	r20, r24
    337e:	bd 01       	movw	r22, r26
    3380:	cf 01       	movw	r24, r30
    3382:	08 95       	ret

00003384 <__udivmodhi4>:
    3384:	aa 1b       	sub	r26, r26
    3386:	bb 1b       	sub	r27, r27
    3388:	51 e1       	ldi	r21, 0x11	; 17
    338a:	07 c0       	rjmp	.+14     	; 0x339a <__udivmodhi4_ep>

0000338c <__udivmodhi4_loop>:
    338c:	aa 1f       	adc	r26, r26
    338e:	bb 1f       	adc	r27, r27
    3390:	a6 17       	cp	r26, r22
    3392:	b7 07       	cpc	r27, r23
    3394:	10 f0       	brcs	.+4      	; 0x339a <__udivmodhi4_ep>
    3396:	a6 1b       	sub	r26, r22
    3398:	b7 0b       	sbc	r27, r23

0000339a <__udivmodhi4_ep>:
    339a:	88 1f       	adc	r24, r24
    339c:	99 1f       	adc	r25, r25
    339e:	5a 95       	dec	r21
    33a0:	a9 f7       	brne	.-22     	; 0x338c <__udivmodhi4_loop>
    33a2:	80 95       	com	r24
    33a4:	90 95       	com	r25
    33a6:	bc 01       	movw	r22, r24
    33a8:	cd 01       	movw	r24, r26
    33aa:	08 95       	ret

000033ac <__prologue_saves__>:
    33ac:	2f 92       	push	r2
    33ae:	3f 92       	push	r3
    33b0:	4f 92       	push	r4
    33b2:	5f 92       	push	r5
    33b4:	6f 92       	push	r6
    33b6:	7f 92       	push	r7
    33b8:	8f 92       	push	r8
    33ba:	9f 92       	push	r9
    33bc:	af 92       	push	r10
    33be:	bf 92       	push	r11
    33c0:	cf 92       	push	r12
    33c2:	df 92       	push	r13
    33c4:	ef 92       	push	r14
    33c6:	ff 92       	push	r15
    33c8:	0f 93       	push	r16
    33ca:	1f 93       	push	r17
    33cc:	cf 93       	push	r28
    33ce:	df 93       	push	r29
    33d0:	cd b7       	in	r28, 0x3d	; 61
    33d2:	de b7       	in	r29, 0x3e	; 62
    33d4:	ca 1b       	sub	r28, r26
    33d6:	db 0b       	sbc	r29, r27
    33d8:	0f b6       	in	r0, 0x3f	; 63
    33da:	f8 94       	cli
    33dc:	de bf       	out	0x3e, r29	; 62
    33de:	0f be       	out	0x3f, r0	; 63
    33e0:	cd bf       	out	0x3d, r28	; 61
    33e2:	09 94       	ijmp

000033e4 <__epilogue_restores__>:
    33e4:	2a 88       	ldd	r2, Y+18	; 0x12
    33e6:	39 88       	ldd	r3, Y+17	; 0x11
    33e8:	48 88       	ldd	r4, Y+16	; 0x10
    33ea:	5f 84       	ldd	r5, Y+15	; 0x0f
    33ec:	6e 84       	ldd	r6, Y+14	; 0x0e
    33ee:	7d 84       	ldd	r7, Y+13	; 0x0d
    33f0:	8c 84       	ldd	r8, Y+12	; 0x0c
    33f2:	9b 84       	ldd	r9, Y+11	; 0x0b
    33f4:	aa 84       	ldd	r10, Y+10	; 0x0a
    33f6:	b9 84       	ldd	r11, Y+9	; 0x09
    33f8:	c8 84       	ldd	r12, Y+8	; 0x08
    33fa:	df 80       	ldd	r13, Y+7	; 0x07
    33fc:	ee 80       	ldd	r14, Y+6	; 0x06
    33fe:	fd 80       	ldd	r15, Y+5	; 0x05
    3400:	0c 81       	ldd	r16, Y+4	; 0x04
    3402:	1b 81       	ldd	r17, Y+3	; 0x03
    3404:	aa 81       	ldd	r26, Y+2	; 0x02
    3406:	b9 81       	ldd	r27, Y+1	; 0x01
    3408:	ce 0f       	add	r28, r30
    340a:	d1 1d       	adc	r29, r1
    340c:	0f b6       	in	r0, 0x3f	; 63
    340e:	f8 94       	cli
    3410:	de bf       	out	0x3e, r29	; 62
    3412:	0f be       	out	0x3f, r0	; 63
    3414:	cd bf       	out	0x3d, r28	; 61
    3416:	ed 01       	movw	r28, r26
    3418:	08 95       	ret

0000341a <_exit>:
    341a:	f8 94       	cli

0000341c <__stop_program>:
    341c:	ff cf       	rjmp	.-2      	; 0x341c <__stop_program>
